{
    "docs": [
        {
            "location": "/", 
            "text": "Location? OwnTracks\n\n\nOwnTracks is an Open Source project which provides an iOS and an Android app with which your smartphone records its current location. While there are many smartphone apps available which can do that, we think OwnTracks is special.\n\n\n\n\nWhether you want your young child to know where you currently are, or you want to keep track of where you spent your last vacation, or you and a group of friends want to see each other on a map, OwnTracks does that. It consists of an app which runs on your smart phone, and which periodically, publishes a small chunk of data which other OwnTracks users you authorize may see. The big deal here is \nwhich you authorize\n: we are extremely picky about \nthe security features of OwnTracks\n.\n\n\nFrom this point onwards, it gets more and more complicated, but we'll try and ease your way into the world of OwnTracks so you may enjoy it. If you are unsure of something, would like to chat to us or ask questions, join \nour community\n; please feel free to bring any questions or conversation relating to OwnTracks, its usage, or location awareness to that group.\n\n\nWe've made OwnTracks very easy to try out without you having to do very much. Even so, the full power of OwnTracks is at your disposal if you want to personalize your setup.\n\n\nWe think the best way to get started using OwnTracks is to follow this guide, chapter by chapter, but you certainly may fast-forward or even skip sections you're familiar with. Pressing \nNext\n on each page will guide you (pun!) through the guide.\n\n\nWe'll now move on to explain \nwhat OwnTracks does\n and \nhow OwnTracks works\n.", 
            "title": "Intro"
        }, 
        {
            "location": "/#location-owntracks", 
            "text": "OwnTracks is an Open Source project which provides an iOS and an Android app with which your smartphone records its current location. While there are many smartphone apps available which can do that, we think OwnTracks is special.   Whether you want your young child to know where you currently are, or you want to keep track of where you spent your last vacation, or you and a group of friends want to see each other on a map, OwnTracks does that. It consists of an app which runs on your smart phone, and which periodically, publishes a small chunk of data which other OwnTracks users you authorize may see. The big deal here is  which you authorize : we are extremely picky about  the security features of OwnTracks .  From this point onwards, it gets more and more complicated, but we'll try and ease your way into the world of OwnTracks so you may enjoy it. If you are unsure of something, would like to chat to us or ask questions, join  our community ; please feel free to bring any questions or conversation relating to OwnTracks, its usage, or location awareness to that group.  We've made OwnTracks very easy to try out without you having to do very much. Even so, the full power of OwnTracks is at your disposal if you want to personalize your setup.  We think the best way to get started using OwnTracks is to follow this guide, chapter by chapter, but you certainly may fast-forward or even skip sections you're familiar with. Pressing  Next  on each page will guide you (pun!) through the guide.  We'll now move on to explain  what OwnTracks does  and  how OwnTracks works .", 
            "title": "Location? OwnTracks"
        }, 
        {
            "location": "/guide/what/", 
            "text": "What OwnTracks does\n\n\nThe OwnTracks app runs in the background on your Android or iOS device and waits for the smart phone to tell it that the device has moved, whereupon OwnTracks sends out a message with its current coordinates (and a few other things we'll discuss in a moment).\n\n\nWe'd like you to read this bit again:\n\n\n\n\nwaits for the smart phone to tell it that the device has moved\n\n\n\n\nIt is very important to understand that OwnTracks literally waits for the device's operating system to inform it of a movement; only then can OwnTracks react and do something. To make matters even more complicated\n1\n, OwnTracks on Android runs in the background, all the time, whereas on iOS it is \"killed off\" by the operating system and woken up every several hundred seconds, in which it gets a teeny tiny time slot to do its thing.\n\n\nThat's basically all OwnTracks does.\n\n\nMore\n\n\nThat last sentence isn't true. Strike it.\n\n\nOwnTracks does quite a bit more. It shows your location on a map. Wow: big deal, huh? Well, it shows your location and \nthat of your friends\n on a map. Ah: better. It can also detect when you enter or leave a particular region for which \nyou set a so-called waypoint\n. People use this, say, to control some aspect of their home-automation system. (Everybody left home? We can turn the lights off.)\n\n\nOwnTracks also has a pedometer, a.k.a. step counter (on iPhone 5S, 6) which you can query remotely. OwnTracks has support for \niBeacons\n, and it gives you neat notifications when one of your friends gets home so you can phone them over a land-line to plan a get-together.\n\n\nOwnTracks reports the device's battery level remotely so you can add that to your monitoring setup, if you have one. (No worries if you don't -- you probably don't need it then.)\n\n\nAnd finally, though for us this is \nvery\n important, OwnTracks does all this securely.\n\n\n\n\n\n\n\n\n\n\nand believe us, they \nare\n complicated", 
            "title": "What it does"
        }, 
        {
            "location": "/guide/what/#what-owntracks-does", 
            "text": "The OwnTracks app runs in the background on your Android or iOS device and waits for the smart phone to tell it that the device has moved, whereupon OwnTracks sends out a message with its current coordinates (and a few other things we'll discuss in a moment).  We'd like you to read this bit again:   waits for the smart phone to tell it that the device has moved   It is very important to understand that OwnTracks literally waits for the device's operating system to inform it of a movement; only then can OwnTracks react and do something. To make matters even more complicated 1 , OwnTracks on Android runs in the background, all the time, whereas on iOS it is \"killed off\" by the operating system and woken up every several hundred seconds, in which it gets a teeny tiny time slot to do its thing.  That's basically all OwnTracks does.  More  That last sentence isn't true. Strike it.  OwnTracks does quite a bit more. It shows your location on a map. Wow: big deal, huh? Well, it shows your location and  that of your friends  on a map. Ah: better. It can also detect when you enter or leave a particular region for which  you set a so-called waypoint . People use this, say, to control some aspect of their home-automation system. (Everybody left home? We can turn the lights off.)  OwnTracks also has a pedometer, a.k.a. step counter (on iPhone 5S, 6) which you can query remotely. OwnTracks has support for  iBeacons , and it gives you neat notifications when one of your friends gets home so you can phone them over a land-line to plan a get-together.  OwnTracks reports the device's battery level remotely so you can add that to your monitoring setup, if you have one. (No worries if you don't -- you probably don't need it then.)  And finally, though for us this is  very  important, OwnTracks does all this securely.      and believe us, they  are  complicated", 
            "title": "What OwnTracks does"
        }, 
        {
            "location": "/guide/how/", 
            "text": "How OwnTracks works\n\n\nThe OwnTracks apps run on your smart phone (but we've already mentioned that at least once, haven't we?). When the device determines that it's \nmoved\n a significant distance\n1\n, it contacts a server via 3G or WiFi (hopefully one of those is available) and says \"\nhey, I'm here\n\", whereby \"\nhere\n\" is specified with a bit more precision. This server is called a \nbroker\n and the contact is made with an open, lightweight, \nstandardized protocol called MQTT\n. (If you think that's bad it isn't: the protocol you use to surf the Web is called HTTP; does that sound much better?) So the smart phone sends your location (this operation is called \npublish\n in MQTT-speak) to the broker and goes back to sleep until it realizes you've again moved a significant distance whereupon the whole procedure starts anew. This broker is ideally something you provide, but we can help you out to start with by lending you the use of ours, free of charge for a while.\n\n\n\n\nAbove: the general architecture of OwnTracks\n\n\nThe broker receives the data, and then? Well, it can re-distribute it, at your wish. What this basically means is it can forward your location to a friend, \nto a program\n which stores your location in, say, a database, etc. There are plenty of things you can do, and we'll show you some of them later.\n\n\nThe important message here, and we can't repeat this often enough: OwnTracks is designed in such a way as that you can chose what you do with your data. It's \nyours\n.\n\n\nBasic setup\n\n\nOwnTracks used to be difficult to set up particularly because you had to provide the server (called a \nbroker\n, remember?) yourself, but we've gone to great lengths to make it easy for you to try before you'll want to take it upon yourself to do all the setup work.\n\n\nWe'll now cover the \nthree basic scenarios\n.\n\n\n\n\n\n\n\n\n\n\nThis is a relative amount, but you can tune it a bit.", 
            "title": "How it works"
        }, 
        {
            "location": "/guide/how/#how-owntracks-works", 
            "text": "The OwnTracks apps run on your smart phone (but we've already mentioned that at least once, haven't we?). When the device determines that it's  moved  a significant distance 1 , it contacts a server via 3G or WiFi (hopefully one of those is available) and says \" hey, I'm here \", whereby \" here \" is specified with a bit more precision. This server is called a  broker  and the contact is made with an open, lightweight,  standardized protocol called MQTT . (If you think that's bad it isn't: the protocol you use to surf the Web is called HTTP; does that sound much better?) So the smart phone sends your location (this operation is called  publish  in MQTT-speak) to the broker and goes back to sleep until it realizes you've again moved a significant distance whereupon the whole procedure starts anew. This broker is ideally something you provide, but we can help you out to start with by lending you the use of ours, free of charge for a while.   Above: the general architecture of OwnTracks  The broker receives the data, and then? Well, it can re-distribute it, at your wish. What this basically means is it can forward your location to a friend,  to a program  which stores your location in, say, a database, etc. There are plenty of things you can do, and we'll show you some of them later.  The important message here, and we can't repeat this often enough: OwnTracks is designed in such a way as that you can chose what you do with your data. It's  yours .", 
            "title": "How OwnTracks works"
        }, 
        {
            "location": "/guide/how/#basic-setup", 
            "text": "OwnTracks used to be difficult to set up particularly because you had to provide the server (called a  broker , remember?) yourself, but we've gone to great lengths to make it easy for you to try before you'll want to take it upon yourself to do all the setup work.  We'll now cover the  three basic scenarios .      This is a relative amount, but you can tune it a bit.", 
            "title": "Basic setup"
        }, 
        {
            "location": "/guide/ui/", 
            "text": "User interface\n\n\nWhile we've gone to a lot of work to get the basic features of OwnTracks on iOS and Android on par, there are quite a number of differences in the user interface as well as in the settings or preferences of the apps on Android and iOS respectively. We won't describe every minute detail here, instead we'll point out certain features of both.\n\n\nMap\n\n\nshot. point out major differences and UI controls\n\n\nPreferences\n\n\nshots\n\n\npublish now\n\n\nshow how to 'publish now' on each", 
            "title": "User interface"
        }, 
        {
            "location": "/guide/ui/#user-interface", 
            "text": "While we've gone to a lot of work to get the basic features of OwnTracks on iOS and Android on par, there are quite a number of differences in the user interface as well as in the settings or preferences of the apps on Android and iOS respectively. We won't describe every minute detail here, instead we'll point out certain features of both.  Map  shot. point out major differences and UI controls  Preferences  shots  publish now  show how to 'publish now' on each", 
            "title": "User interface"
        }, 
        {
            "location": "/guide/scenarios/", 
            "text": "Scenarios\n\n\nThere are three basic scenarios we have for you depending on your needs. It'll help if you keep a copy of the \ntechnical terminology\n handy.\n\n\n\n\nPublic\n\n\nThe very first time you install OwnTracks it will be configured in \npublic mode\n, and you'll be warned about this when you launch the app. In this mode, the app \"just works\". It connects to our public MQTT broker, and your location is published there anonymously. In the app you'll also see any other public users, although you won't be able to identify them (nor they you): there are, other than the location data, no personal details of any user. The one exception is a couple of pseudo-users we publish magically so that you have something nice to look at.\n\n\n\n\nWe mentioned earlier that this is not a mode in which you want to run OwnTracks; it's basically just a demonstration mode for you to get a feeling for how OwnTracks looks and works. The data published by OwnTracks in this mode is not retained, and we don't store it.\n\n\nUsing \nPublic\n mode means you don't \nhave\n to learn about \nMQTT brokers\n, \ntopics\n, and all the rest of the stuff, but the downside is that you don't get to use any of the neat features \nHosted\n or \nPrivate\n mode come with. For example, you can't set up \nfriends\n or configure \nclients to use your data\n for the sole reason that we don't tell you the address or the authentication credentials for \nPublic\n mode. Yep, it's as they say: \nyou get what you pay for\n. :-)\n\n\nHonestly, and kidding aside, we really do recommend you switch away from \nPublic\n mode to either \nHosted\n or, better yet, \nPrivate\n mode as soon as possible.\n\n\nWe think it's best you forget about this as quickly as possible and chose one of the other modes.\n\n\nHosted\n\n\nIf you don't want to go to the trouble of \nhosting your own setup\n, you can use our \nhosted\n mode. We provide an MQTT broker for you to use with OwnTracks, and we do so on a \nbest-effort\n basis. No guarantees whatsoever as to availability, but our track record is pretty good so far.\n\n\nThe first thing you do in order to use \nHosted\n mode is to sign up at  \nOwnTracks Hosted\n where you create an account providing a \nusername\n, a \npassword\n, a valid \ne-mail address\n for yourself, and your \nname\n. Simultaneously you specify a name for the device you'll be connecting, something like \nsamsung3\n, \nnexus5\n, \niphone5\n, etc. -- you get the idea.\nYou may, of course, register more than just one device.\n\n\n\n\nThe \npassword\n is solely for accessing the Hosted Web site and for nothing else; you will use it there only.\n\n\nUpon registering a device, you are shown an \naccess token\n. This jumble of letters and numbers is case-sensitive and is displayed \nonce only\n, so write it down somewhere; later this is replaced by a padlock symbol. (But no worries: if you misplace it, you can generate a new access token. And no: we cannot tell you what the token was.)\n\n\nIn order to use our \nMQTT broker\n you will specify these three bits in OwnTracks: the \nusername\n, the \ndevice\n, and the \naccess token\n.\n\n\nJust in case you're curious: we store neither the Web site \npassword\n you created, nor any of the \naccess tokens\n in clear of course; that \nwould\n be stupid. What we do is we hash them securely and store [PBKDF2] strings. When either you login to our Web site, or your device authenticates to our MQTT broker with the \naccess token\n, we take the values you connect with, hash them again, and test whether the PBKDF2 we have on record matches what we computed. If it does, you, respectively your device, are in. (And guess what happens if it doesn't match?)\n\n\nDetailed instructions for \nsetting up Hosted mode\n are available.\n\n\nYou will now want to \nconfigure a client\n with which you consume the data which is published by OwnTracks, or if you're feeling very brave, why not \nwrite your own client\n?\n\n\nPrivate\n\n\nThis is where you say \nadios!\n (or whatever you say in your language when you leave) to us, continue to use our app (still free of charge of course -- it's Open Source), and host everything yourself. And to be honest, that's \nprecisely what we think you should do\n so that you only (and the people you authorize) see where you are. That is the \nOwn\n in OwnTracks: it's \nyour own data\n and you only should see it.\n\n\nIn private mode you're on your own: you \nset up and configure your MQTT broker\n, you configure authentication, and then you configure your OwnTracks apps to connect to your broker. It's not particularly difficult to do, and you have full control over everything you set up.\n\n\nWhat you basically have to do is to\n\n\n\n\nset up an MQTT broker\n\n\nOptionally \nuse existing clients\n to consume OwnTracks data\n\n\nPossibly dig in and \nwrite your own client\n and do really cool stuff!\n\n\n\n\nWe urge you to resist the temptation of using \nprivate mode\n with one of the many public brokers hosted by different organizations. While it \nis\n an easy way out (though not easier than our \nhosted mode\n we think) those brokers are publically accessible which means anybody can see where you are if they can identify you. Furthermore, public brokers often don't implement access control, so basically anybody can create a \"location\" update which looks as though it may be yours. Believe us: it'll drive you crazy.\n\n\nIf you need assistance, we may be able to help you on our \nCommunity site\n.\n\n\nNow it's time to \ndiscuss topics\n.", 
            "title": "Scenarios"
        }, 
        {
            "location": "/guide/scenarios/#scenarios", 
            "text": "There are three basic scenarios we have for you depending on your needs. It'll help if you keep a copy of the  technical terminology  handy.", 
            "title": "Scenarios"
        }, 
        {
            "location": "/guide/scenarios/#public", 
            "text": "The very first time you install OwnTracks it will be configured in  public mode , and you'll be warned about this when you launch the app. In this mode, the app \"just works\". It connects to our public MQTT broker, and your location is published there anonymously. In the app you'll also see any other public users, although you won't be able to identify them (nor they you): there are, other than the location data, no personal details of any user. The one exception is a couple of pseudo-users we publish magically so that you have something nice to look at.   We mentioned earlier that this is not a mode in which you want to run OwnTracks; it's basically just a demonstration mode for you to get a feeling for how OwnTracks looks and works. The data published by OwnTracks in this mode is not retained, and we don't store it.  Using  Public  mode means you don't  have  to learn about  MQTT brokers ,  topics , and all the rest of the stuff, but the downside is that you don't get to use any of the neat features  Hosted  or  Private  mode come with. For example, you can't set up  friends  or configure  clients to use your data  for the sole reason that we don't tell you the address or the authentication credentials for  Public  mode. Yep, it's as they say:  you get what you pay for . :-)  Honestly, and kidding aside, we really do recommend you switch away from  Public  mode to either  Hosted  or, better yet,  Private  mode as soon as possible.  We think it's best you forget about this as quickly as possible and chose one of the other modes.", 
            "title": "Public"
        }, 
        {
            "location": "/guide/scenarios/#hosted", 
            "text": "If you don't want to go to the trouble of  hosting your own setup , you can use our  hosted  mode. We provide an MQTT broker for you to use with OwnTracks, and we do so on a  best-effort  basis. No guarantees whatsoever as to availability, but our track record is pretty good so far.  The first thing you do in order to use  Hosted  mode is to sign up at   OwnTracks Hosted  where you create an account providing a  username , a  password , a valid  e-mail address  for yourself, and your  name . Simultaneously you specify a name for the device you'll be connecting, something like  samsung3 ,  nexus5 ,  iphone5 , etc. -- you get the idea.\nYou may, of course, register more than just one device.   The  password  is solely for accessing the Hosted Web site and for nothing else; you will use it there only.  Upon registering a device, you are shown an  access token . This jumble of letters and numbers is case-sensitive and is displayed  once only , so write it down somewhere; later this is replaced by a padlock symbol. (But no worries: if you misplace it, you can generate a new access token. And no: we cannot tell you what the token was.)  In order to use our  MQTT broker  you will specify these three bits in OwnTracks: the  username , the  device , and the  access token .  Just in case you're curious: we store neither the Web site  password  you created, nor any of the  access tokens  in clear of course; that  would  be stupid. What we do is we hash them securely and store [PBKDF2] strings. When either you login to our Web site, or your device authenticates to our MQTT broker with the  access token , we take the values you connect with, hash them again, and test whether the PBKDF2 we have on record matches what we computed. If it does, you, respectively your device, are in. (And guess what happens if it doesn't match?)  Detailed instructions for  setting up Hosted mode  are available.  You will now want to  configure a client  with which you consume the data which is published by OwnTracks, or if you're feeling very brave, why not  write your own client ?", 
            "title": "Hosted"
        }, 
        {
            "location": "/guide/scenarios/#private", 
            "text": "This is where you say  adios!  (or whatever you say in your language when you leave) to us, continue to use our app (still free of charge of course -- it's Open Source), and host everything yourself. And to be honest, that's  precisely what we think you should do  so that you only (and the people you authorize) see where you are. That is the  Own  in OwnTracks: it's  your own data  and you only should see it.  In private mode you're on your own: you  set up and configure your MQTT broker , you configure authentication, and then you configure your OwnTracks apps to connect to your broker. It's not particularly difficult to do, and you have full control over everything you set up.  What you basically have to do is to   set up an MQTT broker  Optionally  use existing clients  to consume OwnTracks data  Possibly dig in and  write your own client  and do really cool stuff!   We urge you to resist the temptation of using  private mode  with one of the many public brokers hosted by different organizations. While it  is  an easy way out (though not easier than our  hosted mode  we think) those brokers are publically accessible which means anybody can see where you are if they can identify you. Furthermore, public brokers often don't implement access control, so basically anybody can create a \"location\" update which looks as though it may be yours. Believe us: it'll drive you crazy.  If you need assistance, we may be able to help you on our  Community site .  Now it's time to  discuss topics .", 
            "title": "Private"
        }, 
        {
            "location": "/guide/mqtt/", 
            "text": "MQTT\n\n\nSo what's this MQTT thing? Quoting directly \nfrom the horse's mouth\n:\n\n\n\n\nMQTT is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport. It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium. For example, it has been used in sensors communicating to a broker via satellite link, over occasional dial-up connections with healthcare providers, and in a range of home automation and small device scenarios. It is also ideal for mobile applications because of its small size, low power usage, minimised data packets, and efficient distribution of information to one or many receivers\n\n\n\n\nWe've tried, but we couldn't have phrased this better.\n\n\nIt's lightweight. It's easy on a battery. It has a low overhead (important to save on your phone's data plan). And it distributes information to one or more receivers.\n\n\nPub/Sub\n\n\nIn MQTT-speak, clients publish messages, which means they send or transmit them, and other clients subscribe to messages, meaning they receive them. Messages are published on \ntopics\n, and the MQTT server, which is called a \nbroker\n is configured to permit or deny clients doing so.\n\n\nCauldron\n\n\nWe like to imagine that MQTT makes something reminiscent of a large \ncauldron\n available to publishing and subscribing clients. Publishers drop messages which are tagged \nwith topic names\n into the pot, and subscribers can, access-control permitting, slurp these out, store them, create new messages and ladle them back into the pot or simply throw them away after peeking at them. As a small example, assume a client periodically publishes a Celsius temperature measurement to a particular topic, but you want Fahrenheit (incomprehensible that you would, but anyway). You could \ncreate a small client\n which subscribed to the Celsius reading (from the topic, say, \ntemp/celsius\n in the cauldron), converted to Fahrenheit or Kelvin or whatever, and republished the new value to a different topic, say, \ntemp/fahrenheit\n back into the cauldron. It's important to understand that subscribing and receiving an MQTT message does \nnot remove\n it from the broker; the same message is available to all clients which are subscribed at the time the message was published. (So you could have one client doing Fahrenheit conversion and another doing Kelvin.)\n\n\nAnd what does OwnTracks have to do with all of this? Well, the OwnTracks apps are MQTT clients which publish messages (your location) and subscribe to and consume messages (e.g. the locations of \nyour friends\n). OwnTracks' location updates land in the cauldron when the app publishes a location message from which it can be consumed by any number of subscribers to the same \nMQTT broker\n.\n\n\nThere are \na number of clients\n which do that already, and we're even going to show you how you can \ncreate your own client\n for specific purposes.", 
            "title": "MQTT"
        }, 
        {
            "location": "/guide/mqtt/#mqtt", 
            "text": "So what's this MQTT thing? Quoting directly  from the horse's mouth :   MQTT is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport. It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium. For example, it has been used in sensors communicating to a broker via satellite link, over occasional dial-up connections with healthcare providers, and in a range of home automation and small device scenarios. It is also ideal for mobile applications because of its small size, low power usage, minimised data packets, and efficient distribution of information to one or many receivers   We've tried, but we couldn't have phrased this better.  It's lightweight. It's easy on a battery. It has a low overhead (important to save on your phone's data plan). And it distributes information to one or more receivers.", 
            "title": "MQTT"
        }, 
        {
            "location": "/guide/mqtt/#pubsub", 
            "text": "In MQTT-speak, clients publish messages, which means they send or transmit them, and other clients subscribe to messages, meaning they receive them. Messages are published on  topics , and the MQTT server, which is called a  broker  is configured to permit or deny clients doing so.  Cauldron  We like to imagine that MQTT makes something reminiscent of a large  cauldron  available to publishing and subscribing clients. Publishers drop messages which are tagged  with topic names  into the pot, and subscribers can, access-control permitting, slurp these out, store them, create new messages and ladle them back into the pot or simply throw them away after peeking at them. As a small example, assume a client periodically publishes a Celsius temperature measurement to a particular topic, but you want Fahrenheit (incomprehensible that you would, but anyway). You could  create a small client  which subscribed to the Celsius reading (from the topic, say,  temp/celsius  in the cauldron), converted to Fahrenheit or Kelvin or whatever, and republished the new value to a different topic, say,  temp/fahrenheit  back into the cauldron. It's important to understand that subscribing and receiving an MQTT message does  not remove  it from the broker; the same message is available to all clients which are subscribed at the time the message was published. (So you could have one client doing Fahrenheit conversion and another doing Kelvin.)  And what does OwnTracks have to do with all of this? Well, the OwnTracks apps are MQTT clients which publish messages (your location) and subscribe to and consume messages (e.g. the locations of  your friends ). OwnTracks' location updates land in the cauldron when the app publishes a location message from which it can be consumed by any number of subscribers to the same  MQTT broker .  There are  a number of clients  which do that already, and we're even going to show you how you can  create your own client  for specific purposes.", 
            "title": "Pub/Sub"
        }, 
        {
            "location": "/guide/topics/", 
            "text": "Topics\n\n\nYou now know that \nMQTT\n is a messaging protocol, and that it uses\ntopic names to label messages.  topic names can be structured into multiple\ntopic levels by separating them with a forward slash (\n/\n). topic levels are\nUTF-8 text strings, and almost any character is valid except \n/\n, \n*\n, and \n+\n.\nThe last two are used to address sets of topic names.\n\n\nThe principles during the design of the OwnTracks topic-naming scheme were\n\n\n\n\nhuman readability\n\n\ntraffic minimization\n\n\ngranular access control\n\n\n\n\ntopic name Root\n\n\nTypically an MQTT broker hosts multiple applications. To create a separate name space\nfor OwnTracks we use a topic name root as the beginning of a topic name. Per default\nthis is \nowntracks/\n, but you may choose any other root (e.g. \npeters/locations/\n) or,\nif you prefer, the empty string.\n\n\nDevice name\n\n\nLocations are captured in OwnTracks by devices (e.g. your Smartphone). The\ndevice name forms the second component of the topic name. In order to avoid\nclashes in naming and to simplify subscription and authorization we decided to\nuse two topic levels\n\n\n\n\nThe user name or identifier (e.g. \npeter\n)\n\n\nThe device name (e.g. \niPhone\n)\n\n\n\n\nA typical topic name for a device would therefore be \npeter/iPhone\n. Other\ndevice naming schemes are possible and transparent to OwnTracks (e.g. using\njust one level \npeters-iPhone\n or multiple levels \naFamily/father/iPhone\n), but\nunder any one OwnTracks name root the number of levels used for device names\nhave to the same.\n\n\nBase topic name\n\n\nCombining the topic name root and the device name result in what we call \nbase\ntopic name\n for each device (e.g. \nowntracks/peter/iPhone\n).  The devices label\ntheir location messages with the \nbase topic name\n when publishing to the MQTT\nbroker.\n\n\nSubscribing to location Messages\n\n\nGiven the structure explained above, the topic filter you can use to subscribe to the\nlocation messages of all devices is \nowntracks/+/+\n (the topic name root plus a so-called\nwild card (\n+\n) for each level of the device name.\n\n\nAdditional topic names\n\n\nFor additional communication from and to devices, OwnTracks uses topic names relative\nto the base topic name.\n\n\nDevices listen to the relative topic name \ncmd\n for commands you can publish to\nOwnTracks devices (i.e. \nowntracks/peter/iPhone/cmd\n). For example, if\nauthorized, you could request a location update from a friend's device by\npublishing an \nappropriate payload\n to said topic.\n\n\nThe output of specific OwnTracks commands is published by the device to the\nrelative topic names \nstep\n, \ndump\n, etc.\n\n\nIn addition, devices subscribe to the relative topic name \ninfo\n for information about \nother devices. Messages published with the relative topic name \ninfo\n\n(e.g. \nowntracks/peter/iPhone/info\n) contain a \ncard\n payload -- the name and\navatar of a user with which authorized users can identify, say, Peter within their OwnTracks app.\n\n\nDevices publish their \nwaypoints\n to the relative topic name\n\nwaypoint\n and the corresponding events the transition into or out of a\nwaypoint triggers, to the relative topic name \nevent\n.\n\n\nSummary\n\n\nA device (named \npeter/iPhone\n in this example) is connected to an \nMQTT\nBroker\n with the OwnTracks name Root \nowntracks\n. It publishes\nlocation messages labeled with the topic name \nowntracks/peter/iPhone\n. The\nsame device publishes \nwaypoints\n labeled as\n\nowntracks/peter/iPhone/waypoint\nand publishes to\n\nowntracks/peter/iPhone/event\n when entering or leaving a waypoint (i.e. a monitored region).\n\n\nThe same device subscribes to \nowntracks/+/+\n to receive location messages of all \nother devices it is authorized for which are connected to the same MQTT broker.\nIn addition, the device may listen to \nowntracks/+/+/event\nif the user of the devices\nwants to be informed about other users entering or leaving monitored regions. Subscribing\nto \nowntracks/+/+/info\ngives the device access to additional information about the other\ndevices.\n\n\nIf a device's owner allows other users to ad-hoc request messages from his device,\nthe device will subscribe to \nowntracks/peter/iPhone/cmd\n as well, and it will listen for OwnTracks\ncommands; responses to these commands will be published and labeled \nowntracks/peter/iPhone/dump\n,\n\nowntracks/peter/iPhone/step\n, etc.\n\n\nA full set of supported topic names and expected payloads is documented in \nour JSON API\n.\n\n\nTerms used\n\n\n\n\ntopic name\n\n\nOwnTracks topic name root\n\n\nOwnTracks device name\n\n\nOwnTracks base topic name\n\n\nrelative topic names\n\n\nOwnTracks device\n\n\nOwnTracks user\n\n\nOwnTracks command", 
            "title": "Topics"
        }, 
        {
            "location": "/guide/topics/#topics", 
            "text": "You now know that  MQTT  is a messaging protocol, and that it uses\ntopic names to label messages.  topic names can be structured into multiple\ntopic levels by separating them with a forward slash ( / ). topic levels are\nUTF-8 text strings, and almost any character is valid except  / ,  * , and  + .\nThe last two are used to address sets of topic names.  The principles during the design of the OwnTracks topic-naming scheme were   human readability  traffic minimization  granular access control   topic name Root  Typically an MQTT broker hosts multiple applications. To create a separate name space\nfor OwnTracks we use a topic name root as the beginning of a topic name. Per default\nthis is  owntracks/ , but you may choose any other root (e.g.  peters/locations/ ) or,\nif you prefer, the empty string.  Device name  Locations are captured in OwnTracks by devices (e.g. your Smartphone). The\ndevice name forms the second component of the topic name. In order to avoid\nclashes in naming and to simplify subscription and authorization we decided to\nuse two topic levels   The user name or identifier (e.g.  peter )  The device name (e.g.  iPhone )   A typical topic name for a device would therefore be  peter/iPhone . Other\ndevice naming schemes are possible and transparent to OwnTracks (e.g. using\njust one level  peters-iPhone  or multiple levels  aFamily/father/iPhone ), but\nunder any one OwnTracks name root the number of levels used for device names\nhave to the same.  Base topic name  Combining the topic name root and the device name result in what we call  base\ntopic name  for each device (e.g.  owntracks/peter/iPhone ).  The devices label\ntheir location messages with the  base topic name  when publishing to the MQTT\nbroker.  Subscribing to location Messages  Given the structure explained above, the topic filter you can use to subscribe to the\nlocation messages of all devices is  owntracks/+/+  (the topic name root plus a so-called\nwild card ( + ) for each level of the device name.  Additional topic names  For additional communication from and to devices, OwnTracks uses topic names relative\nto the base topic name.  Devices listen to the relative topic name  cmd  for commands you can publish to\nOwnTracks devices (i.e.  owntracks/peter/iPhone/cmd ). For example, if\nauthorized, you could request a location update from a friend's device by\npublishing an  appropriate payload  to said topic.  The output of specific OwnTracks commands is published by the device to the\nrelative topic names  step ,  dump , etc.  In addition, devices subscribe to the relative topic name  info  for information about \nother devices. Messages published with the relative topic name  info \n(e.g.  owntracks/peter/iPhone/info ) contain a  card  payload -- the name and\navatar of a user with which authorized users can identify, say, Peter within their OwnTracks app.  Devices publish their  waypoints  to the relative topic name waypoint  and the corresponding events the transition into or out of a\nwaypoint triggers, to the relative topic name  event .  Summary  A device (named  peter/iPhone  in this example) is connected to an  MQTT\nBroker  with the OwnTracks name Root  owntracks . It publishes\nlocation messages labeled with the topic name  owntracks/peter/iPhone . The\nsame device publishes  waypoints  labeled as owntracks/peter/iPhone/waypoint and publishes to owntracks/peter/iPhone/event  when entering or leaving a waypoint (i.e. a monitored region).  The same device subscribes to  owntracks/+/+  to receive location messages of all \nother devices it is authorized for which are connected to the same MQTT broker.\nIn addition, the device may listen to  owntracks/+/+/event if the user of the devices\nwants to be informed about other users entering or leaving monitored regions. Subscribing\nto  owntracks/+/+/info gives the device access to additional information about the other\ndevices.  If a device's owner allows other users to ad-hoc request messages from his device,\nthe device will subscribe to  owntracks/peter/iPhone/cmd  as well, and it will listen for OwnTracks\ncommands; responses to these commands will be published and labeled  owntracks/peter/iPhone/dump , owntracks/peter/iPhone/step , etc.  A full set of supported topic names and expected payloads is documented in  our JSON API .  Terms used   topic name  OwnTracks topic name root  OwnTracks device name  OwnTracks base topic name  relative topic names  OwnTracks device  OwnTracks user  OwnTracks command", 
            "title": "Topics"
        }, 
        {
            "location": "/guide/broker/", 
            "text": "MQTT broker\n\n\nAn MQTT broker is a service to which MQTT clients connect. These clients publish\ndata to specific \ntopics\n and they can subscribe to one or more \ntopics\n to receive\nmessages. A \ntopic\n is like an \"address\" for a particular message. For example,\na topic for a device that publishes a temperature reading of your living room\nmay be \ntemperature/indoors/living\n, whereas a device which publishes weather\ndata could do so to \nweather/germany/frankfurt\n. In the particular case of OwnTracks, we\nuse a topic branch called \nowntracks/username/device\n, but you can override that\nname if you prefer to. The reason we've chosen that structure is to accomodate\nfriends and family on a single broker, taking into consideration that a particular\nuser might have more than one device.\n\n\nPrivate broker\n\n\nIdeally, you set up a private broker under your control. This sounds more difficult\nthan it actually is, and there are some very nice brokers you can use free of charge\non your own infrastructure. As an example, we've written up how to install\nMosquitto on a Raspberry Pi.\n\n\nRasPi\n\n\n\n\nThe hardest bit is installing an OS, say, \nRaspbian Wheezy\n, onto an SD card, but there are many tutorials on how to do that. (Here's an example \nusing Mac OS X\n.) A basic install will suffice, and after logging in with Raspbian's default username and password, we'll get started from there.\n\n\nRoger Light, \nMosquitto\n's creator has thankfully (!) set up a few \nMosquitto repositories\n we can use to obtain the latest and greatest version, so we'll do just that. We first perform the required steps to add and activate the repository. The last step in particular can take a few moments.\n\n\ncurl -O http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key\nsudo apt-key add mosquitto-repo.gpg.key\nrm mosquitto-repo.gpg.key\ncd /etc/apt/sources.list.d/\nsudo curl -O http://repo.mosquitto.org/debian/mosquitto-repo.list\nsudo apt-get update\n\n\n\n\nNow we can go ahead and install \nMosquitto\n proper. There are three packages:\n\n\n\n\nmosquitto\n is the MQTT broker (i.e. server)\n\n\nmosquitto-clients\n are the command-line clients, which I recommend you install\n\n\nDon't install \npython-mosquitto\n; if you want to do programming with Python and MQTT, we \nshow you how to do so with the Paho Python module\n.\n\n\n\n\nThese packages together require about 665Kb of space, which we can easily afford even on the tiny Pi.\n\n\nsudo apt-get install mosquitto mosquitto-clients python-mosquitto\n\n\n\n\nRegrettably, as with most Debian packages, the broker is immediately started; stop it.\n\n\nsudo /etc/init.d/mosquitto stop\n\n\n\n\nThat concludes the installation of the \nMosquitto\n MQTT broker, and we'll now proceed to\nits configuration. This section is geared towards a configuration of \nMosquitto\n which will\nwork well with OwnTracks. In particular we want the following features enabled\nby default:\n\n\n\n\nConnections to the broker must be \nTLS\n protected. This requires a TLS certificate and key which will be configured automatically.\n\n\nACLs will restrict who may access what.\n\n\n\n\nOver at the \nOwnTracks repository\n, we've got some utilities which are going to automate this. It's a work-in-progress (of course), but this is what \nsudo ./mosquitto-setup.sh\n looks like at the moment:\n\n\nSaving previous configuration as mosquitto.conf-20130901-133525\nGenerating a 2048 bit RSA private key\n.................................................................................................+++\n...............................+++\nwriting new private key to '/etc/mosquitto/ca.key'\n-----\nCreated CA certificate in /etc/mosquitto/ca.crt\nsubject=\n    commonName                = An MQTT broker\n    organizationName          = MQTTitude.org\n    emailAddress              = nobody@example.net\n--- Creating server key and signing request\nGenerating RSA private key, 2048 bit long modulus\n............+++\n..............+++\ne is 65537 (0x10001)\n--- Creating and signing server certificate\nSignature ok\nsubject=/CN=raspberrypi/O=MQTTitude.org/emailAddress=nobody@example.net\nGetting CA Private Key\n\n\n\n\nA CA is created together with a server key-pair with a whole bunch of \nsubjAltName\n\nsettings:\n\n\n    X509v3 Subject Alternative Name:\n        IP Address:192.168.1.189, IP Address:127.0.0.1, IP Address:0:0:0:0:0:0:0:1, DNS:broker.example.com, DNS:foo.example.de, DNS:localhost\n\n\n\n\nWill it work? Let's start the broker manually to see what it says:\n\n\nsudo /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf\n1378042632: mosquitto version 1.2 (build date 2013-08-09 21:49:03+0100) starting\n1378042632: Config loaded from /etc/mosquitto/mosquitto.conf.\n1378042632: Opening ipv4 listen socket on port 1883.\n1378042632: Opening ipv4 listen socket on port 8883.\n1378042632: Opening ipv6 listen socket on port 8883.\n1378042632: Warning: Address family not supported by protocol\n...^C\n1378042634: mosquitto version 1.2 terminating\n1378042634: Saving in-memory database to /tmp/mosquitto.db.\n\n\n\n\nThe Mosquitto clients need to have access to a copy of the CA certificate (\nca.crt\n) and you can transport that insecurely to your clients (it's a public certificate).\n\n\nmosquitto_pub  --cafile ca.crt -h 127.0.0.1 -p 8883  ...\n\n\n\n\nThat's it for the moment. \n\n\nTesting\n\n\nOnce you've chosen an MQTT broker, make sure you feel comfortable with the\nutilities it provides to subscribe and publish to topics. We recommend the\n\nMosquitto\n utilities for doing so.\n\n\nFor example, to subscribe to all topics prefixed by \nowntracks\n on your broker:\n\n\nmosquitto_sub -h hostname -p 1883 -v -t 'owntracks/#'\n\n\n\n\n(Note that the hash symbol has to be quoted in the shell which is why we've put\nthe whole topic branch in single quotes.)\n\n\nIn another screen you could publish a test message:\n\n\nmosquitto_pub -h hostname -p 1883 -t 'owntracks/test' -m 'hello world'\n\n\n\n\nand in the first screen you'd see the topic name followed by a space and the message\n\npayload\n.\n\n\nOnce you feel comfortable with what is going on, you should consider adding \nTLS\n.\n\n\nBridging\n\n\nIf you want to connect two (or more) brokers (e.g. yours and that of your friend) you can, and we've written up \nhow you can bridge brokers\n.\n\n\nLogging\n\n\nBefore doing anything else, please consult the manual to determine where your Mosquitto logs are being written to. It's hard stabbing around in the dark when a glance at a log file can give you valuable tips on what is actually happening.\n\n\nMosquitto typically logs via \nsyslog\n, and \nsyslog\n's configuration defines where the log messages are actually written to. Your \nsyslog\n may be called \nsyslog\n, \nrsyslog\n, \nsyslog-ng\n, or anything else for that matter. In case of doubt, check the files in \n/var/log\n; one of them \nought\n to have what you're looking for (e..g \nmessages\n, \nsyslog\n, \nlocalmessages\n, or even \ndebugmessages\n).\n\n\nMosquitto typically logs each connection request, a publish, a subscribe request, etc. (Read the \nmanpage for \nmosquitto.conf\n to learn how to configure logging.\n\n\nA successful publish of an OwnTracks location could look somewhat like this:\n\n\nmosquitto[1366]: Received PUBLISH from jane-5s-m-o (d0, q2, r1, m7, 'owntracks/jane/5s', ... (159 bytes))\nmosquitto[1366]: Sending PUBREC to jane-5s-m-o (Mid: 7)\nmosquitto[1366]: Received PUBREL from jane-5s-m-o (Mid: 7)\nmosquitto[1366]: Sending PUBCOMP to jane-5s-m-o (Mid: 7)\n\n\n\n\nACLs\n\n\nYou will definitely want to set up Access Control Lists (ACLs) on your broker so that you can control who may see what. As an example, suppose Jane (username \njjolie\n) should be able to publish to her \nOwnTracks MQTT topics\n and Fred (username \nfred\n) should be allowed to see Jane's location, we could configure something like this:\n\n\nuser jjolie\ntopic owntracks/jjolie/#\n\nuser fred\ntopic read owntracks/jjolie/5s\ntopic owntracks/fred/nexus/#\n\n\n\n\nFirewall\n\n\nIf you want to run your \nPrivate\n broker it's possibly going to be at home under your desk (or is it in your small office?). Be that as it may, how does an OwnTracks app reach (network-wise) that broker?  Chances are you have some form of router which connects the local network in your home to the Internet.\n\n\nOwnTracks runs on the device which is in your pocket or your purse, or wherever you placed it, and it must be able to connect to your MQTT broker, but it cannot: your router hopefully has a firewall configured on it which will allow outgoing (from your home outwards) connections, but it is sure to not allow incoming connections. We must change that, at least for MQTT, and we're going to assume you've configured TLS, i.e. your broker is (also) listening on TCP port 8883\n\n\nWhat you need to do to get this working is to reconfigure your router to allow incoming TCP traffic on port 8883 and to hand that off to the TCP/IP address of your MQTT broker. The exact details on how to do that vary from vendor to vendor, but a close look at the documentation of your router should show you how to do that.\n\n\nWhat is also likely, or at least possible, is that your home doesn't have a fixed TCP/IP address, but one which changes periodically. The OwnTracks apps won't be able to find your home then, will they? If you keep \"moving\" (i.e changing addresses).\n\n\nA service which is typically (if maybe incorrectly) called dynamic DNS comes to the rescue. These services allow you to configure a DNS name (e.g. \nfreds-router.example.org\n) which points to the changing IP address of your router.\n\n\nOnce you've completed those steps, configure the OwnTracks apps to use the shiny new DNS name and TCP port number (8883) and you should be all set.\n\n\nOwnTracks\n\n\nSo, you've configured your broker and you are familiar with the \nmosquitto\n command-line\nclients, so now it's time to see if you can \nget OwnTracks to speak to your broker\n.", 
            "title": "Broker"
        }, 
        {
            "location": "/guide/broker/#mqtt-broker", 
            "text": "An MQTT broker is a service to which MQTT clients connect. These clients publish\ndata to specific  topics  and they can subscribe to one or more  topics  to receive\nmessages. A  topic  is like an \"address\" for a particular message. For example,\na topic for a device that publishes a temperature reading of your living room\nmay be  temperature/indoors/living , whereas a device which publishes weather\ndata could do so to  weather/germany/frankfurt . In the particular case of OwnTracks, we\nuse a topic branch called  owntracks/username/device , but you can override that\nname if you prefer to. The reason we've chosen that structure is to accomodate\nfriends and family on a single broker, taking into consideration that a particular\nuser might have more than one device.  Private broker  Ideally, you set up a private broker under your control. This sounds more difficult\nthan it actually is, and there are some very nice brokers you can use free of charge\non your own infrastructure. As an example, we've written up how to install\nMosquitto on a Raspberry Pi.  RasPi   The hardest bit is installing an OS, say,  Raspbian Wheezy , onto an SD card, but there are many tutorials on how to do that. (Here's an example  using Mac OS X .) A basic install will suffice, and after logging in with Raspbian's default username and password, we'll get started from there.  Roger Light,  Mosquitto 's creator has thankfully (!) set up a few  Mosquitto repositories  we can use to obtain the latest and greatest version, so we'll do just that. We first perform the required steps to add and activate the repository. The last step in particular can take a few moments.  curl -O http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key\nsudo apt-key add mosquitto-repo.gpg.key\nrm mosquitto-repo.gpg.key\ncd /etc/apt/sources.list.d/\nsudo curl -O http://repo.mosquitto.org/debian/mosquitto-repo.list\nsudo apt-get update  Now we can go ahead and install  Mosquitto  proper. There are three packages:   mosquitto  is the MQTT broker (i.e. server)  mosquitto-clients  are the command-line clients, which I recommend you install  Don't install  python-mosquitto ; if you want to do programming with Python and MQTT, we  show you how to do so with the Paho Python module .   These packages together require about 665Kb of space, which we can easily afford even on the tiny Pi.  sudo apt-get install mosquitto mosquitto-clients python-mosquitto  Regrettably, as with most Debian packages, the broker is immediately started; stop it.  sudo /etc/init.d/mosquitto stop  That concludes the installation of the  Mosquitto  MQTT broker, and we'll now proceed to\nits configuration. This section is geared towards a configuration of  Mosquitto  which will\nwork well with OwnTracks. In particular we want the following features enabled\nby default:   Connections to the broker must be  TLS  protected. This requires a TLS certificate and key which will be configured automatically.  ACLs will restrict who may access what.   Over at the  OwnTracks repository , we've got some utilities which are going to automate this. It's a work-in-progress (of course), but this is what  sudo ./mosquitto-setup.sh  looks like at the moment:  Saving previous configuration as mosquitto.conf-20130901-133525\nGenerating a 2048 bit RSA private key\n.................................................................................................+++\n...............................+++\nwriting new private key to '/etc/mosquitto/ca.key'\n-----\nCreated CA certificate in /etc/mosquitto/ca.crt\nsubject=\n    commonName                = An MQTT broker\n    organizationName          = MQTTitude.org\n    emailAddress              = nobody@example.net\n--- Creating server key and signing request\nGenerating RSA private key, 2048 bit long modulus\n............+++\n..............+++\ne is 65537 (0x10001)\n--- Creating and signing server certificate\nSignature ok\nsubject=/CN=raspberrypi/O=MQTTitude.org/emailAddress=nobody@example.net\nGetting CA Private Key  A CA is created together with a server key-pair with a whole bunch of  subjAltName \nsettings:      X509v3 Subject Alternative Name:\n        IP Address:192.168.1.189, IP Address:127.0.0.1, IP Address:0:0:0:0:0:0:0:1, DNS:broker.example.com, DNS:foo.example.de, DNS:localhost  Will it work? Let's start the broker manually to see what it says:  sudo /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf\n1378042632: mosquitto version 1.2 (build date 2013-08-09 21:49:03+0100) starting\n1378042632: Config loaded from /etc/mosquitto/mosquitto.conf.\n1378042632: Opening ipv4 listen socket on port 1883.\n1378042632: Opening ipv4 listen socket on port 8883.\n1378042632: Opening ipv6 listen socket on port 8883.\n1378042632: Warning: Address family not supported by protocol\n...^C\n1378042634: mosquitto version 1.2 terminating\n1378042634: Saving in-memory database to /tmp/mosquitto.db.  The Mosquitto clients need to have access to a copy of the CA certificate ( ca.crt ) and you can transport that insecurely to your clients (it's a public certificate).  mosquitto_pub  --cafile ca.crt -h 127.0.0.1 -p 8883  ...  That's it for the moment.   Testing  Once you've chosen an MQTT broker, make sure you feel comfortable with the\nutilities it provides to subscribe and publish to topics. We recommend the Mosquitto  utilities for doing so.  For example, to subscribe to all topics prefixed by  owntracks  on your broker:  mosquitto_sub -h hostname -p 1883 -v -t 'owntracks/#'  (Note that the hash symbol has to be quoted in the shell which is why we've put\nthe whole topic branch in single quotes.)  In another screen you could publish a test message:  mosquitto_pub -h hostname -p 1883 -t 'owntracks/test' -m 'hello world'  and in the first screen you'd see the topic name followed by a space and the message payload .  Once you feel comfortable with what is going on, you should consider adding  TLS .  Bridging  If you want to connect two (or more) brokers (e.g. yours and that of your friend) you can, and we've written up  how you can bridge brokers .", 
            "title": "MQTT broker"
        }, 
        {
            "location": "/guide/broker/#logging", 
            "text": "Before doing anything else, please consult the manual to determine where your Mosquitto logs are being written to. It's hard stabbing around in the dark when a glance at a log file can give you valuable tips on what is actually happening.  Mosquitto typically logs via  syslog , and  syslog 's configuration defines where the log messages are actually written to. Your  syslog  may be called  syslog ,  rsyslog ,  syslog-ng , or anything else for that matter. In case of doubt, check the files in  /var/log ; one of them  ought  to have what you're looking for (e..g  messages ,  syslog ,  localmessages , or even  debugmessages ).  Mosquitto typically logs each connection request, a publish, a subscribe request, etc. (Read the  manpage for  mosquitto.conf  to learn how to configure logging.  A successful publish of an OwnTracks location could look somewhat like this:  mosquitto[1366]: Received PUBLISH from jane-5s-m-o (d0, q2, r1, m7, 'owntracks/jane/5s', ... (159 bytes))\nmosquitto[1366]: Sending PUBREC to jane-5s-m-o (Mid: 7)\nmosquitto[1366]: Received PUBREL from jane-5s-m-o (Mid: 7)\nmosquitto[1366]: Sending PUBCOMP to jane-5s-m-o (Mid: 7)", 
            "title": "Logging"
        }, 
        {
            "location": "/guide/broker/#acls", 
            "text": "You will definitely want to set up Access Control Lists (ACLs) on your broker so that you can control who may see what. As an example, suppose Jane (username  jjolie ) should be able to publish to her  OwnTracks MQTT topics  and Fred (username  fred ) should be allowed to see Jane's location, we could configure something like this:  user jjolie\ntopic owntracks/jjolie/#\n\nuser fred\ntopic read owntracks/jjolie/5s\ntopic owntracks/fred/nexus/#", 
            "title": "ACLs"
        }, 
        {
            "location": "/guide/broker/#firewall", 
            "text": "If you want to run your  Private  broker it's possibly going to be at home under your desk (or is it in your small office?). Be that as it may, how does an OwnTracks app reach (network-wise) that broker?  Chances are you have some form of router which connects the local network in your home to the Internet.  OwnTracks runs on the device which is in your pocket or your purse, or wherever you placed it, and it must be able to connect to your MQTT broker, but it cannot: your router hopefully has a firewall configured on it which will allow outgoing (from your home outwards) connections, but it is sure to not allow incoming connections. We must change that, at least for MQTT, and we're going to assume you've configured TLS, i.e. your broker is (also) listening on TCP port 8883  What you need to do to get this working is to reconfigure your router to allow incoming TCP traffic on port 8883 and to hand that off to the TCP/IP address of your MQTT broker. The exact details on how to do that vary from vendor to vendor, but a close look at the documentation of your router should show you how to do that.  What is also likely, or at least possible, is that your home doesn't have a fixed TCP/IP address, but one which changes periodically. The OwnTracks apps won't be able to find your home then, will they? If you keep \"moving\" (i.e changing addresses).  A service which is typically (if maybe incorrectly) called dynamic DNS comes to the rescue. These services allow you to configure a DNS name (e.g.  freds-router.example.org ) which points to the changing IP address of your router.  Once you've completed those steps, configure the OwnTracks apps to use the shiny new DNS name and TCP port number (8883) and you should be all set.  OwnTracks  So, you've configured your broker and you are familiar with the  mosquitto  command-line\nclients, so now it's time to see if you can  get OwnTracks to speak to your broker .", 
            "title": "Firewall"
        }, 
        {
            "location": "/guide/apps/", 
            "text": "OwnTracks apps\n\n\nThe OwnTracks apps operate in one of three modes (discussed in \nscenarios\n], and you tell the app in which mode you want to use it.\n\n\nPublic\n mode is the easiest: you don't have to configure anything. Next up is \nHosted\n mode, in which you configure your \nusername\n, your \ndevice name\n, and the \naccess token\n you got when \nsigning up to Hosted OwnTracks\n.\n\n\nIn \nPrivate\n mode, you configure our iOS and Android app to access your broker.\n\n\niOS\n\n\nAndroid\n\n\nThere are other \nclients\n you can use with OwnTracks.", 
            "title": "Apps"
        }, 
        {
            "location": "/guide/apps/#owntracks-apps", 
            "text": "The OwnTracks apps operate in one of three modes (discussed in  scenarios ], and you tell the app in which mode you want to use it.  Public  mode is the easiest: you don't have to configure anything. Next up is  Hosted  mode, in which you configure your  username , your  device name , and the  access token  you got when  signing up to Hosted OwnTracks .  In  Private  mode, you configure our iOS and Android app to access your broker.", 
            "title": "OwnTracks apps"
        }, 
        {
            "location": "/guide/apps/#ios", 
            "text": "", 
            "title": "iOS"
        }, 
        {
            "location": "/guide/apps/#android", 
            "text": "There are other  clients  you can use with OwnTracks.", 
            "title": "Android"
        }, 
        {
            "location": "/guide/clients/", 
            "text": "Clients\n\n\nUsing our OwnTracks app is cool, but what do you do with the location data the apps send (i.e. \npublish\n) to the MQTT broker? We have some suggestions. (Do remember however, that you cannot do this in \npublic mode\n.)\n\n\nYou know that OwnTracks \npublishes\n location information to an MQTT \nbroker\n. The data it publishes is transferred in a particular format called \nJSON\n, and \nthis is what it looks like\n.\n\n\nWhen you've got your broker set up, and OwnTracks configured to use it, you'll want to do something useful with the data, and the following sections introduce you to some of the existing clients you can utilitze for doing that.\n\n\nmosquitto_sub\n\n\nmosquitto_sub\n is a very basic command-line client provided by the \nMosquitto project\n. However, it is brilliantly useful, and you can also use it for long-time collection of data by having it run in the background with \nstdout\n pointing to a file.\n\n\nIn it's most basic invocation, you have the program connect to your broker and subscribe to the topics you're interested in.\n\n\nmosquitto_sub -h localhost -p 1883 -v -t 'owntracks/#'\n\n\n\n\nmosquitto_sub\n and it's counterpart, \nmosquitto_pub\n for publishing to a broker, support a slew of options. It'll be worth your while to study their \nmanual page\n.\n\n\no2s\n\n\nOne of the clients we provide as part of the Open Source OwnTracks project is called \no2s\n; the strange name stands for \nOwnTracks to Storage\n, and we think you're going to want to have this connected to your \nMQTT broker\n, particularly in \nPrivate mode\n.\n\n\nCorrectly configured (and it's not trivial), \no2s\n connects to your broker and subscribes to location messages and other \nOwnTracks payloads\n. Upon receiving a location update, \no2s\n will do a number of things:\n\n\n\n\nPerform a reverse-geo lookup (using your choice of either Google or XXX to do so) for the geographical coordinates received from the OwnTracks app\n\n\nStore the message and its details into a database (MySQL and PostgreSQL are supported)\n\n\nAlert via (future) plugins that a geographical region (\nwaypoint\n) has been entered or left\n\n\n\n\nThe result of using \no2s\n is that you get a database table (several actually) in which your OwnTracks locations are stored.\n\n\n+---------------------+-----+------------+------------+------+--------------------------------------+\n| tst                 | tid | lat        | lon        | cc   | addr                                 |\n+---------------------+-----+------------+------------+------+--------------------------------------+\n| 2015-05-27 06:23:36 | jJ  | 46.7835540 | 17.2073088 | HU   | Keszthely, H\u00e9v\u00edzi \u00fat, 8360 Ungarn    |\n| 2015-05-26 20:10:52 | jJ  | 46.7710135 | 17.1829915 | HU   | Als\u00f3p\u00e1hok, 760, 8394 Ungarn          |\n| 2015-05-26 14:32:50 | jJ  | 46.9557636 | 19.4132377 | HU   | Kerekegyh\u00e1za, 5211, 6041 Ungarn      |\n| 2015-05-23 22:42:27 | jJ  | 47.4986630 | 19.0438124 | HU   | Budapest, E\u00f6tv\u00f6s t\u00e9r, 1051 Ungarn    |\n+---------------------+-----+------------+------------+------+--------------------------------------+\n\n\n\n\nSo, now that you have the OwnTracks locations being neatly stored for you, how do you visualize them on, say, a map, at a later point in time? Enter \nPista\n.\n\n\nPista\n\n\nPista\n is a word which signifies \ntrack\n in Spanish and in Italian. It is, unfortunately, a very difficult bit of software to get installed, but we'll try to help you. \nPista\n contains a whole kitchen-sink of features, most of which you won't need to use with our OwnTracks apps. (These features were built for the OwnTracks Greenwich devices.)\n\n\nWe'll concentrate on setting up \nPista\n's \nTracks\n utility which will enable you to view past locations directly from the database tables which are updated by \no2s\n.\n\n\nmqttwarn\n\n\nYou'll recall (we hope) the discussion on \nMQTT\n and the analogy with the cauldron. \nmqttwarn\n, while not specific to OwnTracks, is another client you connect to your \nMQTT broker\n. We think it's worth mentioning (and both Ben and JP -- the creators -- are quite pleased with what it does).\n\n\nmqttwarn\n lets you do things like tweet everytime OwnTracks reports a location (but do consider whether you \nreally\n want that), send an e-mail when a loved one enters a particular region, etc.\n\n\nopenHAB\n\n\nPresence detection in home automation is one of the most important pieces of the puzzle. Without it your smart home is effectively blind, and as a result can hardly be called 'smart' at all. There are very few automation rules that do not require some form of context in terms of human occupancy. Rules around security, lighting, music, even coffee machines -- all need to know if 'someone' is home before deciding whether to take action. \n\n\nThis is where OwnTracks steps in. In its simplest form it can be configured with waypoints (for home/work etc) that generate events whenever your phone enters/leaves these regions. These are sent to your own personal \nMQTT broker\n where your home automation software can react accordingly. The beauty of OwnTracks is two-fold - it is simple, you can disable the standard location reporting so all you get is the waypoint event/leave events, which is all your smart home cares about. The second is that, in \nprivate mode\n, all your data is 'yours' and yours alone - there is no cloud service collecting, storing and potentially mining your data. \n\n\nRead more about \nopenHAB and OwnTracks\n.\n\n\nRoll your own\n\n\nIf you feel really brave, you can \nwrite your own program\n which subscribes to OwnTracks data, but don't forget to tell us about it!\n\n\nRelated\n\n\nHere are some projects we know of which use and/or integrate OwnTracks and/or\nwhich are useful when using MQTT in general or OwnTracks in particular.\n\n\n\n\nMQTT Inspector for iOS\n, written by Christoph Krey, who also did our OwnTracks for iOS app. This is an indispensible utility for all things MQTT.\n\n\nthe thing system\n ( \ncode\n )\n\n\nA Clojure webapp that aims to manage information gathered from OwnTracks; \nclojure-mqttitude-backend\n\n\nAn \nOwnTracks flow\n by \nGiovanni @juzam Angoli\n for Node-RED which publishes messages to \npushover.net\n upon entering or leaving a geo-fence.\n\n\nMyMQTT\n is an app for Android which enables you to subscribe and publish to an MQTT broker.\n\n\nStefano Costa cooks Italian pasta \nusing OwnTracks\n.", 
            "title": "Clients"
        }, 
        {
            "location": "/guide/clients/#clients", 
            "text": "Using our OwnTracks app is cool, but what do you do with the location data the apps send (i.e.  publish ) to the MQTT broker? We have some suggestions. (Do remember however, that you cannot do this in  public mode .)  You know that OwnTracks  publishes  location information to an MQTT  broker . The data it publishes is transferred in a particular format called  JSON , and  this is what it looks like .  When you've got your broker set up, and OwnTracks configured to use it, you'll want to do something useful with the data, and the following sections introduce you to some of the existing clients you can utilitze for doing that.", 
            "title": "Clients"
        }, 
        {
            "location": "/guide/clients/#mosquitto_sub", 
            "text": "mosquitto_sub  is a very basic command-line client provided by the  Mosquitto project . However, it is brilliantly useful, and you can also use it for long-time collection of data by having it run in the background with  stdout  pointing to a file.  In it's most basic invocation, you have the program connect to your broker and subscribe to the topics you're interested in.  mosquitto_sub -h localhost -p 1883 -v -t 'owntracks/#'  mosquitto_sub  and it's counterpart,  mosquitto_pub  for publishing to a broker, support a slew of options. It'll be worth your while to study their  manual page .", 
            "title": "mosquitto_sub"
        }, 
        {
            "location": "/guide/clients/#o2s", 
            "text": "One of the clients we provide as part of the Open Source OwnTracks project is called  o2s ; the strange name stands for  OwnTracks to Storage , and we think you're going to want to have this connected to your  MQTT broker , particularly in  Private mode .  Correctly configured (and it's not trivial),  o2s  connects to your broker and subscribes to location messages and other  OwnTracks payloads . Upon receiving a location update,  o2s  will do a number of things:   Perform a reverse-geo lookup (using your choice of either Google or XXX to do so) for the geographical coordinates received from the OwnTracks app  Store the message and its details into a database (MySQL and PostgreSQL are supported)  Alert via (future) plugins that a geographical region ( waypoint ) has been entered or left   The result of using  o2s  is that you get a database table (several actually) in which your OwnTracks locations are stored.  +---------------------+-----+------------+------------+------+--------------------------------------+\n| tst                 | tid | lat        | lon        | cc   | addr                                 |\n+---------------------+-----+------------+------------+------+--------------------------------------+\n| 2015-05-27 06:23:36 | jJ  | 46.7835540 | 17.2073088 | HU   | Keszthely, H\u00e9v\u00edzi \u00fat, 8360 Ungarn    |\n| 2015-05-26 20:10:52 | jJ  | 46.7710135 | 17.1829915 | HU   | Als\u00f3p\u00e1hok, 760, 8394 Ungarn          |\n| 2015-05-26 14:32:50 | jJ  | 46.9557636 | 19.4132377 | HU   | Kerekegyh\u00e1za, 5211, 6041 Ungarn      |\n| 2015-05-23 22:42:27 | jJ  | 47.4986630 | 19.0438124 | HU   | Budapest, E\u00f6tv\u00f6s t\u00e9r, 1051 Ungarn    |\n+---------------------+-----+------------+------------+------+--------------------------------------+  So, now that you have the OwnTracks locations being neatly stored for you, how do you visualize them on, say, a map, at a later point in time? Enter  Pista .", 
            "title": "o2s"
        }, 
        {
            "location": "/guide/clients/#pista", 
            "text": "Pista  is a word which signifies  track  in Spanish and in Italian. It is, unfortunately, a very difficult bit of software to get installed, but we'll try to help you.  Pista  contains a whole kitchen-sink of features, most of which you won't need to use with our OwnTracks apps. (These features were built for the OwnTracks Greenwich devices.)  We'll concentrate on setting up  Pista 's  Tracks  utility which will enable you to view past locations directly from the database tables which are updated by  o2s .", 
            "title": "Pista"
        }, 
        {
            "location": "/guide/clients/#mqttwarn", 
            "text": "You'll recall (we hope) the discussion on  MQTT  and the analogy with the cauldron.  mqttwarn , while not specific to OwnTracks, is another client you connect to your  MQTT broker . We think it's worth mentioning (and both Ben and JP -- the creators -- are quite pleased with what it does).  mqttwarn  lets you do things like tweet everytime OwnTracks reports a location (but do consider whether you  really  want that), send an e-mail when a loved one enters a particular region, etc.", 
            "title": "mqttwarn"
        }, 
        {
            "location": "/guide/clients/#openhab", 
            "text": "Presence detection in home automation is one of the most important pieces of the puzzle. Without it your smart home is effectively blind, and as a result can hardly be called 'smart' at all. There are very few automation rules that do not require some form of context in terms of human occupancy. Rules around security, lighting, music, even coffee machines -- all need to know if 'someone' is home before deciding whether to take action.   This is where OwnTracks steps in. In its simplest form it can be configured with waypoints (for home/work etc) that generate events whenever your phone enters/leaves these regions. These are sent to your own personal  MQTT broker  where your home automation software can react accordingly. The beauty of OwnTracks is two-fold - it is simple, you can disable the standard location reporting so all you get is the waypoint event/leave events, which is all your smart home cares about. The second is that, in  private mode , all your data is 'yours' and yours alone - there is no cloud service collecting, storing and potentially mining your data.   Read more about  openHAB and OwnTracks .", 
            "title": "openHAB"
        }, 
        {
            "location": "/guide/clients/#roll-your-own", 
            "text": "If you feel really brave, you can  write your own program  which subscribes to OwnTracks data, but don't forget to tell us about it!", 
            "title": "Roll your own"
        }, 
        {
            "location": "/guide/clients/#related", 
            "text": "Here are some projects we know of which use and/or integrate OwnTracks and/or\nwhich are useful when using MQTT in general or OwnTracks in particular.   MQTT Inspector for iOS , written by Christoph Krey, who also did our OwnTracks for iOS app. This is an indispensible utility for all things MQTT.  the thing system  (  code  )  A Clojure webapp that aims to manage information gathered from OwnTracks;  clojure-mqttitude-backend  An  OwnTracks flow  by  Giovanni @juzam Angoli  for Node-RED which publishes messages to  pushover.net  upon entering or leaving a geo-fence.  MyMQTT  is an app for Android which enables you to subscribe and publish to an MQTT broker.  Stefano Costa cooks Italian pasta  using OwnTracks .", 
            "title": "Related"
        }, 
        {
            "location": "/guide/friends/", 
            "text": "Friends\n\n\nOwnTracks has a so-called \nFriends\n feature which allows friends and/or family members who connect to the same \nMQTT broker\n to see eachother on the map and receive location updates from these friends. This is a really nice feature which allows, say, all members of a family to see where another member is currently located. Even when on different brokers, users can configure their systems to enable location updates to pass from one broker to another by a \nprocess called bridging\n.\n\n\nWith \nOwnTracks Hosted\n we make this very easy for you: add a tracker and your smart phone will start seeing a friend's location as soon as that friend has confirmed the tracking request.\n\n\nThe nitty-gritty is documented in the \nFriends feature\n.", 
            "title": "Friends"
        }, 
        {
            "location": "/guide/friends/#friends", 
            "text": "OwnTracks has a so-called  Friends  feature which allows friends and/or family members who connect to the same  MQTT broker  to see eachother on the map and receive location updates from these friends. This is a really nice feature which allows, say, all members of a family to see where another member is currently located. Even when on different brokers, users can configure their systems to enable location updates to pass from one broker to another by a  process called bridging .  With  OwnTracks Hosted  we make this very easy for you: add a tracker and your smart phone will start seeing a friend's location as soon as that friend has confirmed the tracking request.  The nitty-gritty is documented in the  Friends feature .", 
            "title": "Friends"
        }, 
        {
            "location": "/guide/waypoints/", 
            "text": "Waypoints\n\n\nf you've configured a geo-fence, a \nlocation\n message will\ncontain the elements:\n\n\n\n\nrad\nius (if its value is greater than 0)\n\n\ndesc\nription with the name you set for the waypoint\n\n\nevent\n with a value of \n\"enter\"\n or \n\"leave\"\n, depending on\n   whether the device is entering or leaving a configured region, respectively.\n\n\n\n\nIf you set up a shared waypoint, the app publishes that waypoint (without the retain flag,\nirrespective of your general preference) to the base topic with \n/waypoints\n\ntacked onto the topic (e.g. \nowntracks/\nuser\n/\ndevice\n/waypoints\n) with the\npayload for \n_type=waypoint\n as specified in the [[JSON page|JSON]]. For waypoints with disabled sharing, no waypoint message is published. These can be used to note down locations privately. But note that entering or leaving a waypoint will be published as a \nlocation\n message as described above.\n\n\nFor example, If Jane configures a waypoint on her iPhone\n\n\nthe app will publish the following payload\n\n\nWhen you set up a shared waypoint (with a \ndesc\nription and a \nrad\nius), this\nwaypoint is published to the broker with the current time stamp. If you update\nthe waypoint definition on the device at a later stage, the waypoint is\nre-published, with the \noriginal\n timestamp, but with possibly new\n\ndesc\nription and/or \nrad\nius. To be precise, the \ntst\n timestamp is used as an\nidentifier of the waypoint even if it is later modified on the device. For waypoints that are not shared, the above obviously does not apply. \n\n\nSubscribers to the broker (our apps and any other program) can avoid getting\nwaypoints by subscribing to, say, \nowntracks/+/+\n; also broker ACLs can\nprohibit access to \nowntracks/+/+/waypoints\n for particular users if so desired.\nConversely, all messages published by the apps (\nlocation\n and \nwaypoint\n) are\navailable with a subscription to \nowntracks/#\n.\n\n\nThe OwnTracks apps may keep track of waypoints, e.g. for displaying to users.", 
            "title": "Waypoints"
        }, 
        {
            "location": "/guide/waypoints/#waypoints", 
            "text": "f you've configured a geo-fence, a  location  message will\ncontain the elements:   rad ius (if its value is greater than 0)  desc ription with the name you set for the waypoint  event  with a value of  \"enter\"  or  \"leave\" , depending on\n   whether the device is entering or leaving a configured region, respectively.   If you set up a shared waypoint, the app publishes that waypoint (without the retain flag,\nirrespective of your general preference) to the base topic with  /waypoints \ntacked onto the topic (e.g.  owntracks/ user / device /waypoints ) with the\npayload for  _type=waypoint  as specified in the [[JSON page|JSON]]. For waypoints with disabled sharing, no waypoint message is published. These can be used to note down locations privately. But note that entering or leaving a waypoint will be published as a  location  message as described above.  For example, If Jane configures a waypoint on her iPhone  the app will publish the following payload  When you set up a shared waypoint (with a  desc ription and a  rad ius), this\nwaypoint is published to the broker with the current time stamp. If you update\nthe waypoint definition on the device at a later stage, the waypoint is\nre-published, with the  original  timestamp, but with possibly new desc ription and/or  rad ius. To be precise, the  tst  timestamp is used as an\nidentifier of the waypoint even if it is later modified on the device. For waypoints that are not shared, the above obviously does not apply.   Subscribers to the broker (our apps and any other program) can avoid getting\nwaypoints by subscribing to, say,  owntracks/+/+ ; also broker ACLs can\nprohibit access to  owntracks/+/+/waypoints  for particular users if so desired.\nConversely, all messages published by the apps ( location  and  waypoint ) are\navailable with a subscription to  owntracks/# .  The OwnTracks apps may keep track of waypoints, e.g. for displaying to users.", 
            "title": "Waypoints"
        }, 
        {
            "location": "/guide/beacons/", 
            "text": "iBeacons\n\n\n\n\nWhat is an iBeacon?\n\n\nAn iBeacon is a small Bluetooth device (Bluetooth Low Energy - BLE, Bluetooth 4.0) which sends out it's identification regularily. The iBeacon standard was introduced by Apple Inc. in 2013. It is supported by iOS, Android and on other platforms. iBeacons can be purchased as standalone devices or to be used in connection with computer equipement.\n\n\nIf you position 3/4 iBeacons in a room, your 2/3-dimensional position can be calculated based on the signal strengths received.\n\n\nWhat you can do with iBeacons in OwnTracks\n\n\nThis data is detected by your OwnTracks iOS device and can be used for region monitoring.\n\n\n\n\n\n\nUse an iBeacon to get your exact location\n\nPosition an iBeacon in your study and get enter- and leave-events from that room.\n\n\n\n\n\n\nUse an iBeacon to connect yourself with a vehicle\n\nEquip your car with an iBeacon and monitor how much time you spend commuting.\n\n\n\n\n\n\nUse an iBeacon to track a valuable accessory\n\nFit an iBeacon to your keys/luggage/expensive equipement and get alarmed when you leave them behind.\n\n\n\n\n\n\nFull feature set is \nhere\n.", 
            "title": "iBeacons"
        }, 
        {
            "location": "/guide/beacons/#ibeacons", 
            "text": "", 
            "title": "iBeacons"
        }, 
        {
            "location": "/guide/beacons/#what-is-an-ibeacon", 
            "text": "An iBeacon is a small Bluetooth device (Bluetooth Low Energy - BLE, Bluetooth 4.0) which sends out it's identification regularily. The iBeacon standard was introduced by Apple Inc. in 2013. It is supported by iOS, Android and on other platforms. iBeacons can be purchased as standalone devices or to be used in connection with computer equipement.  If you position 3/4 iBeacons in a room, your 2/3-dimensional position can be calculated based on the signal strengths received.", 
            "title": "What is an iBeacon?"
        }, 
        {
            "location": "/guide/beacons/#what-you-can-do-with-ibeacons-in-owntracks", 
            "text": "This data is detected by your OwnTracks iOS device and can be used for region monitoring.    Use an iBeacon to get your exact location \nPosition an iBeacon in your study and get enter- and leave-events from that room.    Use an iBeacon to connect yourself with a vehicle \nEquip your car with an iBeacon and monitor how much time you spend commuting.    Use an iBeacon to track a valuable accessory \nFit an iBeacon to your keys/luggage/expensive equipement and get alarmed when you leave them behind.    Full feature set is  here .", 
            "title": "What you can do with iBeacons in OwnTracks"
        }, 
        {
            "location": "/guide/bridge/", 
            "text": "Bridging\n\n\nIn order to profit from the \nFriends feature\n in\nOwnTracks, all contacts you want to be able to track on your your device must\nshare a broker, but that can be difficult if both you and your friend\n(henceforce \"Jane\" in the examples that follow) also use your brokers for other\npurposes.\n\n\nMosquitto\n (and some other \nMQTT\n brokers) have a feature called bridging\nwhich basically lets you connect two (or more) brokers together.\n\n\nLet's assume that you and Jane want to see each other's location updates while\nmaintaining a connection from your devices to your respective MQTT brokers at\nhome. In other words, you will use your broker, whereas Jane connects to her broker because, e.g. she has private contacts who use her broker, but she doesn't want you to have access to those.\n\n\n\n\nWhat will happen?\n\n\nSetting up a bridge is not difficult, but there are some things we have to keep in mind.  In this example, we'll assume the following:\n\n\n\n\nYour broker will initiate a connection to Jane's broker\n\n\nYou'll be using \nTLS\n to protect credentials and data in transit\n\n\nJane has given you (e.g. via e-mail) a copy of her TLS CA certificate\n\n\nJane has set up an ACL on her \nMosquitto\n broker to ensure you have access only to her OwnTracks location data and nothing else.\n\n\nJane has a username and password for your broker to use when connecting to her broker, and she's given you both.\n\n\nJane has a device called \nnexus7\n and she publishes location updates to \nher\n broker at \nowntracks/jane/nexus7\n.\n\n\nYou have an iPhone and want to share your location data with Jane. You publish (on your broker) to \nowntracks/john/iphone\n.\n\n\n\n\nHere's what you configure \non your broker\n's \nmosquitto.conf\n:\n\n\n# Bridge to Jane\nconnection br-me-to-jane\nbridge_cafile /etc/mosquitto/jane/JANE-OwnTracks-ca.crt\nbridge_insecure false\naddress jane.example.org:8883\ncleansession false\nclientid br-john-jane\nstart_type automatic\nusername john\npassword s3cr1t\nnotifications false\ntry_private true\ntopic nexus7 in 2 owntracks/jane/ owntracks/jane/\ntopic iphone out 2 owntracks/john/ owntracks/john/\n\n\n\n\nThese last two lines define which topic branches will be published (\nout\n) and\nwhich will be subscribed to (\nin\n) from the point of view of your broker. There\nare a lot of things you can tweak in this configuration, but this is should get\nyou started.\n\n\nPublishes\n\n\nWhen your device publishes location data to your broker, it will publish the single topic \nowntracks/john/iphone\n to Jane's broker. Conversely, as your broker is now subscribed to Jane's at \nowntracks/jane/nexus7\n, it will receive Jane's location data and re-publish that to your connected device.\n\n\nEvents\n\n\nOwnTracks uses more than just a single topic per user \nas documented\n. This means we must add more \ntopic\n statements to our broker (and Jane to her broker) if we additionally want to support transition events (e.g. when did Jane leave home?) and outgoing commands (e.g. tell Jane's device to report its location \nnow\n).\n\n\nAssuming Jane allows this (by configuring appropriate ACLs on her broker), we add one or more of the following. The first line we already had: it bridges Jane's location publishes \nin\n to our broker. The second line is new: it bridges Jane's \nnexus7\n events into our broker.\n\n\ntopic nexus7 in 2 owntracks/jane/ owntracks/jane/\ntopic event in 2 owntracks/jane/nexus7/ owntracks/jane/nexus7/\n\n\n\n\nCMD\n\n\nTapping on OwnTrack's \nrequest location update\n publishes a \ncmd\n to the destination device, so we bridge that topic \nout\n towards Jane's broker:\n\n\ntopic cmd out 2 owntracks/jane/nexus7/ owntracks/jane/nexus7/\n\n\n\n\nMQTTitude\n\n\nLet's assume for the moment that you're running a broker with a number of connected OwnTracks clients, some of which are still publishing to the \"old\" topic branch at `mqttitude/', but you want to \"assimilate\" these clients into your environment without having to force them to rename the topic to which they publish. You can easily do that in Mosquitto, by adding the following line to your bridge configuration:\n\n\ntopic # in 2 owntracks/ mqttitude/\n\n\n\n\nWhat this does is: your bridge subscribes to the \nremote\n topic \nmqttitude/#\n and all received messages will be republished at \nowntracks/\n on \nyour\n broker (note the \nin\n direction). \n\n\nNeat, eh? \n\n\nConsult the manual page for\n\nmosquitto.conf\n for more\ndetails.", 
            "title": "Bridging"
        }, 
        {
            "location": "/guide/bridge/#bridging", 
            "text": "In order to profit from the  Friends feature  in\nOwnTracks, all contacts you want to be able to track on your your device must\nshare a broker, but that can be difficult if both you and your friend\n(henceforce \"Jane\" in the examples that follow) also use your brokers for other\npurposes.  Mosquitto  (and some other  MQTT  brokers) have a feature called bridging\nwhich basically lets you connect two (or more) brokers together.  Let's assume that you and Jane want to see each other's location updates while\nmaintaining a connection from your devices to your respective MQTT brokers at\nhome. In other words, you will use your broker, whereas Jane connects to her broker because, e.g. she has private contacts who use her broker, but she doesn't want you to have access to those.", 
            "title": "Bridging"
        }, 
        {
            "location": "/guide/bridge/#what-will-happen", 
            "text": "Setting up a bridge is not difficult, but there are some things we have to keep in mind.  In this example, we'll assume the following:   Your broker will initiate a connection to Jane's broker  You'll be using  TLS  to protect credentials and data in transit  Jane has given you (e.g. via e-mail) a copy of her TLS CA certificate  Jane has set up an ACL on her  Mosquitto  broker to ensure you have access only to her OwnTracks location data and nothing else.  Jane has a username and password for your broker to use when connecting to her broker, and she's given you both.  Jane has a device called  nexus7  and she publishes location updates to  her  broker at  owntracks/jane/nexus7 .  You have an iPhone and want to share your location data with Jane. You publish (on your broker) to  owntracks/john/iphone .   Here's what you configure  on your broker 's  mosquitto.conf :  # Bridge to Jane\nconnection br-me-to-jane\nbridge_cafile /etc/mosquitto/jane/JANE-OwnTracks-ca.crt\nbridge_insecure false\naddress jane.example.org:8883\ncleansession false\nclientid br-john-jane\nstart_type automatic\nusername john\npassword s3cr1t\nnotifications false\ntry_private true\ntopic nexus7 in 2 owntracks/jane/ owntracks/jane/\ntopic iphone out 2 owntracks/john/ owntracks/john/  These last two lines define which topic branches will be published ( out ) and\nwhich will be subscribed to ( in ) from the point of view of your broker. There\nare a lot of things you can tweak in this configuration, but this is should get\nyou started.", 
            "title": "What will happen?"
        }, 
        {
            "location": "/guide/bridge/#publishes", 
            "text": "When your device publishes location data to your broker, it will publish the single topic  owntracks/john/iphone  to Jane's broker. Conversely, as your broker is now subscribed to Jane's at  owntracks/jane/nexus7 , it will receive Jane's location data and re-publish that to your connected device.", 
            "title": "Publishes"
        }, 
        {
            "location": "/guide/bridge/#events", 
            "text": "OwnTracks uses more than just a single topic per user  as documented . This means we must add more  topic  statements to our broker (and Jane to her broker) if we additionally want to support transition events (e.g. when did Jane leave home?) and outgoing commands (e.g. tell Jane's device to report its location  now ).  Assuming Jane allows this (by configuring appropriate ACLs on her broker), we add one or more of the following. The first line we already had: it bridges Jane's location publishes  in  to our broker. The second line is new: it bridges Jane's  nexus7  events into our broker.  topic nexus7 in 2 owntracks/jane/ owntracks/jane/\ntopic event in 2 owntracks/jane/nexus7/ owntracks/jane/nexus7/", 
            "title": "Events"
        }, 
        {
            "location": "/guide/bridge/#cmd", 
            "text": "Tapping on OwnTrack's  request location update  publishes a  cmd  to the destination device, so we bridge that topic  out  towards Jane's broker:  topic cmd out 2 owntracks/jane/nexus7/ owntracks/jane/nexus7/  MQTTitude  Let's assume for the moment that you're running a broker with a number of connected OwnTracks clients, some of which are still publishing to the \"old\" topic branch at `mqttitude/', but you want to \"assimilate\" these clients into your environment without having to force them to rename the topic to which they publish. You can easily do that in Mosquitto, by adding the following line to your bridge configuration:  topic # in 2 owntracks/ mqttitude/  What this does is: your bridge subscribes to the  remote  topic  mqttitude/#  and all received messages will be republished at  owntracks/  on  your  broker (note the  in  direction).   Neat, eh?   Consult the manual page for mosquitto.conf  for more\ndetails.", 
            "title": "CMD"
        }, 
        {
            "location": "/features/hosted/", 
            "text": "Hosted mode\n\n\nAs shortly described in \nscenarios\n, we offer a \nHosted\n mode on a best-effort basis. We provide an MQTT broker to which you can connect a device or two. Or three. You can also invite OwnTracks friends to share their location with you or, let them see where you are.\n\n\n\n\nRegister for an account\n\n\nConfigure your devices\n\n\nEnjoy\n\n\n\n\nYou sign up for a free account at \nhttps://hosted.owntracks.org\n where you specify the following:\n\n\n\n\n\n\nusername\n is the the name with which your device will connect to our hosted broker, and it's the username by which your friends (if you invite anybody) will see you.\n\n\nName\n is your name. This will be visible to your friends\n\n\nDevice name\n is a name you give your device\n\n\nEmail\n is your valid e-mail address. We need this in order to send you notifications when a friend invites you to track them\n\n\nPassword\n is a password for this Web site only. This is \nnot\n the password you will use to actually connect to the service via MQTT.\n\n\n\n\n\n\nAs shown above, during registration you specify the name of a device you'll be using. This can be any name, but it must contain ASCII characters from the set \n[a-zA-Z0-9]\n only. We generate a special \ntoken\n for this device which you will use upon configuring OwnTracks on it. The credentials you use on your device are shown on the screen you then see, and these are shown exactly once and never again. As the page clearly says, keep a copy safe somewhere. (But you can regenerate this \ntoken\n at any time and re-configure your OwnTracks app to use that new token.) The token is a mumble-jumble of letters and digits.\n\n\n\n\nThis completes the initial setup, and you can now configure the OwnTracks apps to use \nHosted\n mode with your \nusername\n, your \ndevice name\n, and the \ntoken\n that was issued to you.\n\n\nTrackers\n\n\nThe main page of our Web site is then shown with three columns:\n\n\n\n\nThe list of devices you have created for yourself.\n\n\nThe list of friends who are tracking one of your devices.\n\n\nThe list of people you track.\n\n\n\n\n\n\nLet's assume a friend of yours has also registered for \nHosted\n mode, and you want to allow him to track your device. You add that friend as a \nTracker\n, whereupon your friend will get an email asking her/him to confirm the tracking request. Simultaneously, you offer to let her/him track your \ns3\n device. (You cannot track somebody without them seeing you as well -- it wouldn't be fair!)\n\n\n\n\nThis friend of yours (shown here as user \njp\n) is added to your Friends with a status of \nPending\n until your friend confirms the tracking request.\n\n\n\n\nWhen your friend confirms your request, this is shown on the main page. The right column shows that \njp\n is seeing your \ns3\n device, and the center column shows that you have not yet confirmed you wish to track \njp\n's \npad\n device.\n\n\n\n\nYou can then accept to track this friend's device, but you can also decline the request.\n\n\n\n\n\n\nDevices\n\n\nIf you want to add more devices to your account, go ahead: you enter a device name, and are then shown the access \ntoken\n which you use, together with your \nusername\n and new \ndevice name\n to configure OwnTracks.\n\n\n\n\nThis new device is shown in the list of Devices, and you'll note that Jane hasn't shared this device with anybody because she needn't to.", 
            "title": "Hosted"
        }, 
        {
            "location": "/features/hosted/#hosted-mode", 
            "text": "As shortly described in  scenarios , we offer a  Hosted  mode on a best-effort basis. We provide an MQTT broker to which you can connect a device or two. Or three. You can also invite OwnTracks friends to share their location with you or, let them see where you are.   Register for an account  Configure your devices  Enjoy   You sign up for a free account at  https://hosted.owntracks.org  where you specify the following:    username  is the the name with which your device will connect to our hosted broker, and it's the username by which your friends (if you invite anybody) will see you.  Name  is your name. This will be visible to your friends  Device name  is a name you give your device  Email  is your valid e-mail address. We need this in order to send you notifications when a friend invites you to track them  Password  is a password for this Web site only. This is  not  the password you will use to actually connect to the service via MQTT.    As shown above, during registration you specify the name of a device you'll be using. This can be any name, but it must contain ASCII characters from the set  [a-zA-Z0-9]  only. We generate a special  token  for this device which you will use upon configuring OwnTracks on it. The credentials you use on your device are shown on the screen you then see, and these are shown exactly once and never again. As the page clearly says, keep a copy safe somewhere. (But you can regenerate this  token  at any time and re-configure your OwnTracks app to use that new token.) The token is a mumble-jumble of letters and digits.   This completes the initial setup, and you can now configure the OwnTracks apps to use  Hosted  mode with your  username , your  device name , and the  token  that was issued to you.", 
            "title": "Hosted mode"
        }, 
        {
            "location": "/features/hosted/#trackers", 
            "text": "The main page of our Web site is then shown with three columns:   The list of devices you have created for yourself.  The list of friends who are tracking one of your devices.  The list of people you track.    Let's assume a friend of yours has also registered for  Hosted  mode, and you want to allow him to track your device. You add that friend as a  Tracker , whereupon your friend will get an email asking her/him to confirm the tracking request. Simultaneously, you offer to let her/him track your  s3  device. (You cannot track somebody without them seeing you as well -- it wouldn't be fair!)   This friend of yours (shown here as user  jp ) is added to your Friends with a status of  Pending  until your friend confirms the tracking request.   When your friend confirms your request, this is shown on the main page. The right column shows that  jp  is seeing your  s3  device, and the center column shows that you have not yet confirmed you wish to track  jp 's  pad  device.   You can then accept to track this friend's device, but you can also decline the request.", 
            "title": "Trackers"
        }, 
        {
            "location": "/features/hosted/#devices", 
            "text": "If you want to add more devices to your account, go ahead: you enter a device name, and are then shown the access  token  which you use, together with your  username  and new  device name  to configure OwnTracks.   This new device is shown in the list of Devices, and you'll note that Jane hasn't shared this device with anybody because she needn't to.", 
            "title": "Devices"
        }, 
        {
            "location": "/features/security/", 
            "text": "Security\n\n\nOwnTracks and its associated utilities have been designed foremost with data privacy in mind. We think your location or that of your loved ones is something only you respectively they should know. While we cannot help you (or ourselves for that matter) protect against NSA snooping, we do our best to protect your data from other people's eyes.\n\n\n\n\nIf your broker supports it, and if you configure OwnTracks to do so, OwnTracks uses MQTT over \nTLS\n when connecting to your broker.\n\n\nThe apps support authenticating to the broker with \nusername\n and \npassword\n which can be as strong (or as convoluted) as your broker supports.\n\n\nCredentials you configure (i.e. \nusername\n and \npassword\n) are thus protected from snooping, at least until they get to your broker. The same applies to location data our app transmits.", 
            "title": "Security"
        }, 
        {
            "location": "/features/security/#security", 
            "text": "OwnTracks and its associated utilities have been designed foremost with data privacy in mind. We think your location or that of your loved ones is something only you respectively they should know. While we cannot help you (or ourselves for that matter) protect against NSA snooping, we do our best to protect your data from other people's eyes.   If your broker supports it, and if you configure OwnTracks to do so, OwnTracks uses MQTT over  TLS  when connecting to your broker.  The apps support authenticating to the broker with  username  and  password  which can be as strong (or as convoluted) as your broker supports.  Credentials you configure (i.e.  username  and  password ) are thus protected from snooping, at least until they get to your broker. The same applies to location data our app transmits.", 
            "title": "Security"
        }, 
        {
            "location": "/features/tid/", 
            "text": "TID\n\n\nA \nTID\n is a \ntracker ID\n, a two-character identifier of your chosing, your initials, say. This \nTID\n is published in the \nJSON payload\n of each message published by OwnTracks and is meant to be used as a short identifier which is easier to read than a rather \nlong topic name\n.\n\n\n\n\nThe \nTID\n of your \nfriends\n is displayed on the OwnTracks map if you don't have an address book entry associated with that friend, and if said friend has no retained \ncard\n published.\n\n\nThe \nTID\n is also used by our \nPista client\n when you're about to select a track for a particular OwnTracks user.", 
            "title": "TID"
        }, 
        {
            "location": "/features/tid/#tid", 
            "text": "A  TID  is a  tracker ID , a two-character identifier of your chosing, your initials, say. This  TID  is published in the  JSON payload  of each message published by OwnTracks and is meant to be used as a short identifier which is easier to read than a rather  long topic name .   The  TID  of your  friends  is displayed on the OwnTracks map if you don't have an address book entry associated with that friend, and if said friend has no retained  card  published.  The  TID  is also used by our  Pista client  when you're about to select a track for a particular OwnTracks user.", 
            "title": "TID"
        }, 
        {
            "location": "/features/friends/", 
            "text": "Friends\n\n\nOwnTracks has a so-called \nFriends and Family\n capability which is enabled by\ndefault. The way this works is friends and/or family members who share a single\n\nMQTT broker\n can \"see\" eachother on the map, respectively on a\nlist of friends held by the app.  (This can be done either by configuring all\napps to use the same broker or by what is called \nbridging\n.)\n\n\nLet's assume for a moment, that a user Jane (user name \njjolie\n) has an iPhone 4s (device name \n4s\n), and that she publishes location data to a topic at\n\n\nowntracks/jjolie/4s\n\n\n\n\nLet us further assume, that her friend John (user name \njohn\n) has an Android Nexus 4 (device name \nnex4\n) and he therefore publishes on the \nsame broker\n to a topic called\n\n\nowntracks/john/nex4\n\n\n\n\nLet us further assume that access control on the \nMQTT broker\n allows both users to subscribe to eachother's topics.\n\n\nNow, if \nboth\n friends subscribe to a topic called \nowntracks/+/+\n (which the\napps do by default) their devices will effectively receive published location\nmessages to either topic. So when either Jane or John publish their location,\nthe other's device will receive it.\n\n\nWhat OwnTracks then does is to list these topic names (e.g. \nowntracks/jjolie/4s\n) with the last received position and a time stamp. A click on a particular entry will take you to that entry's location on the map. Neat, eh?\n\n\nFaces\n\n\nIt gets better.\n\n\nYou probably don't want to remember the (sometimes cryptic) topic names of your friends or family members, but you would like to see their names and a matching face. That's no problem: OwnTracks can do that.\n\n\nDepending on the device you're using, the procedure differs slightly.\n\n\nAndroid\n\n\nThe app subscribes to a topic branch \nowntracks/+/+\n on the broker per default\n(but this can be configured in advanced preferences) to receive locations of\nother people connected to the the same [[MQTT broker|MQTTbroker]] that publish\nto the default topic of \nmqttittude/$username/$devicename\n.\n\n\nWhen the app receives a message published by a different user, it looks for a\ncontact with an instant messenger (\nIM\n) entry of type \"\nOwnTracks\n\" (case insensitive)\nwhose entry value is equal to the topic of the received location\npublish. If a contact is found, the contact is shown with its profile picture\nand name instead of the topic in the list and on the map.\n\n\nNote that if you add an IM entry to a contact via, say, Google, you have to\nsync the contact to your phone (phone preferences/accounts/google/sync untick\nand tick contacts, wait a few seconds) and restart the app. In other words, the\ncontact's data must be on your device.\n\n\nAdd an instant-messaging (\nIM\n) entry to the contact you want to associate with\na particular MQTT topic name. The tag of the \nIM\n should be \"\nOwnTracks\n\" (case\nindependent), and the value is the topic name.\n\n\n\n\nThe \nLocations\n list will then show you your contact's name and photo:\n\n\n\n\niOS\n\n\nThe app \"sees\" a friend as soon as it receives a publish to the topic branch subscribed to, which by default is \nowntracks/+/+\n.\n\n\nSelect the \nFriends\n button to see a list of friends:\n\n\n\n\nTapping on one of the friends, performs a reverse geo-coding to show address. Furthermore, a click on the little right-arrow shows the last location and\nall shared waypoints of that friend.\n\n\nWho is that?\n\n\nIt's difficult to remember which MQTT topic belongs to which friend, so we can associate a topic with an image of the friend as contained in the iOS address book:\n\n\nSelect an entry:\n\n\n\n\nThen click on the \nbookmark\n icon on top right. The Address book opens.\n\n\n\n\nSelect the entry you want to associate with the OwnTracks topic. In this\nexample, I choose Kate Bell.\n\n\n\n\nWe're back in OwnTracks, and we see the picture from the addressbook.\nIf you want to release the association, select the wastepaper basket icon in the address book screen. The display\nchanges back from the picture and name of the friend to the mqtt topic (e.g. \"owntracks/kate/nexus4\").\n\n\n\n\n\n\nWhen you zoom the map out (or near to the friend's location), you see a small rendition of the icon directly on the map.\n\n\n\n\nVoila!\n\n\nNote: this works only with contacts stored locally -- not with corporate address books associated with your iPhone.\n\n\nTo support corporate address books (which usually cannot be updated) the ios\napp Version \n=5.1 can be set to store the associations locally rather than in\nthe address book. You find the respective switch in the expert mode settings.\nSwitch it \noff\n (i.e. disabled) to keep associations between MQTT topics and \nyour contact within OwnTracks.", 
            "title": "Friends"
        }, 
        {
            "location": "/features/friends/#friends", 
            "text": "OwnTracks has a so-called  Friends and Family  capability which is enabled by\ndefault. The way this works is friends and/or family members who share a single MQTT broker  can \"see\" eachother on the map, respectively on a\nlist of friends held by the app.  (This can be done either by configuring all\napps to use the same broker or by what is called  bridging .)  Let's assume for a moment, that a user Jane (user name  jjolie ) has an iPhone 4s (device name  4s ), and that she publishes location data to a topic at  owntracks/jjolie/4s  Let us further assume, that her friend John (user name  john ) has an Android Nexus 4 (device name  nex4 ) and he therefore publishes on the  same broker  to a topic called  owntracks/john/nex4  Let us further assume that access control on the  MQTT broker  allows both users to subscribe to eachother's topics.  Now, if  both  friends subscribe to a topic called  owntracks/+/+  (which the\napps do by default) their devices will effectively receive published location\nmessages to either topic. So when either Jane or John publish their location,\nthe other's device will receive it.  What OwnTracks then does is to list these topic names (e.g.  owntracks/jjolie/4s ) with the last received position and a time stamp. A click on a particular entry will take you to that entry's location on the map. Neat, eh?  Faces  It gets better.  You probably don't want to remember the (sometimes cryptic) topic names of your friends or family members, but you would like to see their names and a matching face. That's no problem: OwnTracks can do that.  Depending on the device you're using, the procedure differs slightly.  Android  The app subscribes to a topic branch  owntracks/+/+  on the broker per default\n(but this can be configured in advanced preferences) to receive locations of\nother people connected to the the same [[MQTT broker|MQTTbroker]] that publish\nto the default topic of  mqttittude/$username/$devicename .  When the app receives a message published by a different user, it looks for a\ncontact with an instant messenger ( IM ) entry of type \" OwnTracks \" (case insensitive)\nwhose entry value is equal to the topic of the received location\npublish. If a contact is found, the contact is shown with its profile picture\nand name instead of the topic in the list and on the map.  Note that if you add an IM entry to a contact via, say, Google, you have to\nsync the contact to your phone (phone preferences/accounts/google/sync untick\nand tick contacts, wait a few seconds) and restart the app. In other words, the\ncontact's data must be on your device.  Add an instant-messaging ( IM ) entry to the contact you want to associate with\na particular MQTT topic name. The tag of the  IM  should be \" OwnTracks \" (case\nindependent), and the value is the topic name.   The  Locations  list will then show you your contact's name and photo:   iOS  The app \"sees\" a friend as soon as it receives a publish to the topic branch subscribed to, which by default is  owntracks/+/+ .  Select the  Friends  button to see a list of friends:   Tapping on one of the friends, performs a reverse geo-coding to show address. Furthermore, a click on the little right-arrow shows the last location and\nall shared waypoints of that friend.", 
            "title": "Friends"
        }, 
        {
            "location": "/features/friends/#who-is-that", 
            "text": "It's difficult to remember which MQTT topic belongs to which friend, so we can associate a topic with an image of the friend as contained in the iOS address book:  Select an entry:   Then click on the  bookmark  icon on top right. The Address book opens.   Select the entry you want to associate with the OwnTracks topic. In this\nexample, I choose Kate Bell.   We're back in OwnTracks, and we see the picture from the addressbook.\nIf you want to release the association, select the wastepaper basket icon in the address book screen. The display\nchanges back from the picture and name of the friend to the mqtt topic (e.g. \"owntracks/kate/nexus4\").    When you zoom the map out (or near to the friend's location), you see a small rendition of the icon directly on the map.   Voila!  Note: this works only with contacts stored locally -- not with corporate address books associated with your iPhone.  To support corporate address books (which usually cannot be updated) the ios\napp Version  =5.1 can be set to store the associations locally rather than in\nthe address book. You find the respective switch in the expert mode settings.\nSwitch it  off  (i.e. disabled) to keep associations between MQTT topics and \nyour contact within OwnTracks.", 
            "title": "Who is that?"
        }, 
        {
            "location": "/features/card/", 
            "text": "Card\n\n\nOwnTracks typically displays the \nTID\n of a \nfriend\n on the map, but you can associate an address book entry to that friend in order to see a friendly face (if you have you friend's photo in your device's address book) and/or a friendly name.\n\n\n\n\nFor \nHosted mode\n we developed a new feature we call a \ncard\n which you can also make use of when in in \nPrivate mode\n. A card is a retained message which contains a \nJSON payload\n which, in absence of an address-book association, will be used to populate your friend on your map. The payload contains a full name (hopefully one you recognize), and an avatar -- a small image. If a card exists it will be used, but you can override its use in OwnTracks by associating your friend with an address book entry of your own device.\n\n\n{\n  \n_type\n: \ncard\n,\n  \nname\n: \nJane Jolie\n\n  \nface\n: \niV1CFEVkMhmCIKBUKh3 ... ghAAAAABJRU5ErkJggg==\n,\n}", 
            "title": "Card"
        }, 
        {
            "location": "/features/card/#card", 
            "text": "OwnTracks typically displays the  TID  of a  friend  on the map, but you can associate an address book entry to that friend in order to see a friendly face (if you have you friend's photo in your device's address book) and/or a friendly name.   For  Hosted mode  we developed a new feature we call a  card  which you can also make use of when in in  Private mode . A card is a retained message which contains a  JSON payload  which, in absence of an address-book association, will be used to populate your friend on your map. The payload contains a full name (hopefully one you recognize), and an avatar -- a small image. If a card exists it will be used, but you can override its use in OwnTracks by associating your friend with an address book entry of your own device.  {\n   _type :  card ,\n   name :  Jane Jolie \n   face :  iV1CFEVkMhmCIKBUKh3 ... ghAAAAABJRU5ErkJggg== ,\n}", 
            "title": "Card"
        }, 
        {
            "location": "/features/waypoints/", 
            "text": "Waypoints\n\n\nThe \nbase topic\n for publishes from the devices (OwnTracks apps) is what you configure it\nto be in the app's preferences/settings. For argument's sake we'll use\n\nowntracks/\nuser\n/\ndevice\n as our example.\n\n\nThis base topic is used for publishes of type \nlocation\n (see \nJSON\n).\nAll messages published to this base topic are retained if you have configured\nthe app to retain them.\n\n\nAdditionally, if you've configured a geo-fence, a \nlocation\n message will\ncontain the elements:\n\n\n\n\nrad\nius (if its value is greater than 0)\n\n\ndesc\nription with the name you set for the waypoint\n\n\nevent\n with a value of \n\"enter\"\n or \n\"leave\"\n, depending on\n   whether the device is entering or leaving a configured region, respectively.\n\n\n\n\nIf you set up a shared waypoint, the app publishes that waypoint (without the retain flag,\nirrespective of your general preference) to the base topic with \n/waypoints\n\ntacked onto the topic (e.g. \nowntracks/\nuser\n/\ndevice\n/waypoints\n) with the\npayload for \n_type=waypoint\n as specified in the \nJSON page\n. For waypoints with disabled sharing, no waypoint message is published. These can be used to note down locations privately. But note that entering or leaving a waypoint will be published as a \nlocation\n message as described above.\n\n\nFor example, If Jane configures a waypoint on her iPhone\n\n\n\n\n\n\nthe app will publish the following payload\n\n\n{\n    \n_type\n: \nwaypoint\n,\n    \ndesc\n: \nParis is lovely\n,\n    \nlat\n: \n48.858330\n,\n    \nlon\n: \n2.295130\n,\n    \nrad\n: \n50\n,\n    \ntst\n: \n1385997757\n\n}\n\n\n\n\nWhen you set up a shared waypoint (with a \ndesc\nription and a \nrad\nius), this\nwaypoint is published to the broker with the current time stamp. If you update\nthe waypoint definition on the device at a later stage, the waypoint is\nre-published, with the \noriginal\n timestamp, but with possibly new\n\ndesc\nription and/or \nrad\nius. To be precise, the \ntst\n timestamp is used as an\nidentifier of the waypoint even if it is later modified on the device. For waypoints that are not shared, the above obviously does not apply. \n\n\n\n\nSubscribers to the broker (our apps and any other program) can avoid getting\nwaypoints by subscribing to, say, \nowntracks/+/+\n; also broker ACLs can\nprohibit access to \nowntracks/+/+/waypoints\n for particular users if so desired.\nConversely, all messages published by the apps (\nlocation\n and \nwaypoint\n) are\navailable with a subscription to \nowntracks/#\n.\n\n\nThe OwnTracks apps may keep track of waypoints, e.g. for displaying to users. \n\n\nFor convenience, waypoints can be loaded remotely: [[Remote-Loading-of-Waypoints]].\n\n\niOS\n\n\nOn iOS you can navigate to the place where you want to put a waypoint, Tap long and edit the Waypoint. The waypoint is always placed at the center of the map (hence it's predefined name \nCenter\n, which you should change to something meaningful). With a bit of practice, you can then drag the waypoint to it's final destination on the map or, and this may be easier, edit the waypoint and specify its exact coordinates.\n\n\nSetting up iBeacons\n\n\nOn iOS you can \nmonitor an iBeacon region\n in addition to circular regions.", 
            "title": "Waypoints"
        }, 
        {
            "location": "/features/waypoints/#waypoints", 
            "text": "The  base topic  for publishes from the devices (OwnTracks apps) is what you configure it\nto be in the app's preferences/settings. For argument's sake we'll use owntracks/ user / device  as our example.  This base topic is used for publishes of type  location  (see  JSON ).\nAll messages published to this base topic are retained if you have configured\nthe app to retain them.  Additionally, if you've configured a geo-fence, a  location  message will\ncontain the elements:   rad ius (if its value is greater than 0)  desc ription with the name you set for the waypoint  event  with a value of  \"enter\"  or  \"leave\" , depending on\n   whether the device is entering or leaving a configured region, respectively.   If you set up a shared waypoint, the app publishes that waypoint (without the retain flag,\nirrespective of your general preference) to the base topic with  /waypoints \ntacked onto the topic (e.g.  owntracks/ user / device /waypoints ) with the\npayload for  _type=waypoint  as specified in the  JSON page . For waypoints with disabled sharing, no waypoint message is published. These can be used to note down locations privately. But note that entering or leaving a waypoint will be published as a  location  message as described above.  For example, If Jane configures a waypoint on her iPhone    the app will publish the following payload  {\n     _type :  waypoint ,\n     desc :  Paris is lovely ,\n     lat :  48.858330 ,\n     lon :  2.295130 ,\n     rad :  50 ,\n     tst :  1385997757 \n}  When you set up a shared waypoint (with a  desc ription and a  rad ius), this\nwaypoint is published to the broker with the current time stamp. If you update\nthe waypoint definition on the device at a later stage, the waypoint is\nre-published, with the  original  timestamp, but with possibly new desc ription and/or  rad ius. To be precise, the  tst  timestamp is used as an\nidentifier of the waypoint even if it is later modified on the device. For waypoints that are not shared, the above obviously does not apply.    Subscribers to the broker (our apps and any other program) can avoid getting\nwaypoints by subscribing to, say,  owntracks/+/+ ; also broker ACLs can\nprohibit access to  owntracks/+/+/waypoints  for particular users if so desired.\nConversely, all messages published by the apps ( location  and  waypoint ) are\navailable with a subscription to  owntracks/# .  The OwnTracks apps may keep track of waypoints, e.g. for displaying to users.   For convenience, waypoints can be loaded remotely: [[Remote-Loading-of-Waypoints]].", 
            "title": "Waypoints"
        }, 
        {
            "location": "/features/waypoints/#ios", 
            "text": "On iOS you can navigate to the place where you want to put a waypoint, Tap long and edit the Waypoint. The waypoint is always placed at the center of the map (hence it's predefined name  Center , which you should change to something meaningful). With a bit of practice, you can then drag the waypoint to it's final destination on the map or, and this may be easier, edit the waypoint and specify its exact coordinates.", 
            "title": "iOS"
        }, 
        {
            "location": "/features/waypoints/#setting-up-ibeacons", 
            "text": "On iOS you can  monitor an iBeacon region  in addition to circular regions.", 
            "title": "Setting up iBeacons"
        }, 
        {
            "location": "/features/beacons/", 
            "text": "iBeacons\n\n\nIf you want to monitor an iBeacon region rather than a circular region set the\nradius to zero (\n0\n), and add the beacon identifier to the description\nseparated by a colon (:).\n\n\n\n\nYou add the UUID of the beacon to the description and may specify the major and\nminor identifier numbers of the beacons in hex.\n\n\nIf the UUID is valid, iBeacon monitoring will start.\n\n\nExamples:\n\n\nmySpecificBeacon:CA271EAE-5FA8-4E80-8F08-2A302A95A959:0001:CAFE\nmyBeacons:CA271EAE-5FA8-4E80-8F08-2A302A95A959", 
            "title": "Beacons"
        }, 
        {
            "location": "/features/beacons/#ibeacons", 
            "text": "If you want to monitor an iBeacon region rather than a circular region set the\nradius to zero ( 0 ), and add the beacon identifier to the description\nseparated by a colon (:).   You add the UUID of the beacon to the description and may specify the major and\nminor identifier numbers of the beacons in hex.  If the UUID is valid, iBeacon monitoring will start.  Examples:  mySpecificBeacon:CA271EAE-5FA8-4E80-8F08-2A302A95A959:0001:CAFE\nmyBeacons:CA271EAE-5FA8-4E80-8F08-2A302A95A959", 
            "title": "iBeacons"
        }, 
        {
            "location": "/features/pedometer/", 
            "text": "Pedometer\n\n\nThe iPhone 5S has a built-in pedometer which we\u2019ve leveraged into OwnTracks (iOS only).\nThe way this works is that the iPhone counts the steps you take, and OwnTracks\ncan report these in a JSON payload upon request.\n\n\nCommand\n\n\nIn order for the app to actually report the steps counted by the device, you\nsend it a specially formatted command:\n\n\nmosquitto_pub -q 2 -t owntracks/jj/5s/cmd -m '{\n_type\n : \ncmd\n, \naction\n: \nreportSteps\n}'\n\n\n\n\nNote how we\u2019re using QoS=2 here: the message is published to the MQTT broker,\nand when the phone next wakes up, which happens every few hundred seconds, it\nwill obtain the message, and publish a [[JSON|JSON]] payload with the counted steps back\nto your MQTT broker.\n\n\n{\n    \n_type\n: \nsteps\n, \n    \nfrom\n: 1400455130, \n    \nsteps\n: 1234, \n    \nto\n: 1400458000, \n    \ntst\n: 1400455130\n}\n\n\n\n\nDaily reports\n\n\nWe use the following small program to issue the JSON needed to request the\nsteps for the 00:00 - 23:59 time-frame of this particular day (or the day before, etc.)\n\n\n#!/usr/bin/env python\n\nimport datetime\nimport time\nimport json\nimport sys\n\ndays = 0\n\ndef unix_epoch(t, delta):\n    dt = t + delta\n\n    # print dt\n    return int(time.mktime(dt.timetuple()))\n\nnow = datetime.datetime.today()\n\nf = now.replace(now.year, now.month, now.day, 0, 0, 1, 0)\nt = now.replace(now.year, now.month, now.day, 23, 59, 59, 0)\n\ndelta = datetime.timedelta(days=days)\n\n\npayload = {\n        '_type' : 'cmd',\n        'action' : 'reportSteps',\n        'from'  : unix_epoch(f, delta),\n        'to'    : unix_epoch(t, delta),\n}\nprint json.dumps(payload)\n\n\n\n\nIn the evening, a \ncron\n entry sends that off to our broker which will, eventually,\ndeliver the message to the the phone.\n\n\n50 22 * * * /usr/local/bin/reportsteps | mosquitto_pub -q 2 -t owntracks/jpm/5s/cmd -l", 
            "title": "Pedometer"
        }, 
        {
            "location": "/features/pedometer/#pedometer", 
            "text": "The iPhone 5S has a built-in pedometer which we\u2019ve leveraged into OwnTracks (iOS only).\nThe way this works is that the iPhone counts the steps you take, and OwnTracks\ncan report these in a JSON payload upon request.", 
            "title": "Pedometer"
        }, 
        {
            "location": "/features/pedometer/#command", 
            "text": "In order for the app to actually report the steps counted by the device, you\nsend it a specially formatted command:  mosquitto_pub -q 2 -t owntracks/jj/5s/cmd -m '{ _type  :  cmd ,  action :  reportSteps }'  Note how we\u2019re using QoS=2 here: the message is published to the MQTT broker,\nand when the phone next wakes up, which happens every few hundred seconds, it\nwill obtain the message, and publish a [[JSON|JSON]] payload with the counted steps back\nto your MQTT broker.  {\n     _type :  steps , \n     from : 1400455130, \n     steps : 1234, \n     to : 1400458000, \n     tst : 1400455130\n}", 
            "title": "Command"
        }, 
        {
            "location": "/features/pedometer/#daily-reports", 
            "text": "We use the following small program to issue the JSON needed to request the\nsteps for the 00:00 - 23:59 time-frame of this particular day (or the day before, etc.)  #!/usr/bin/env python\n\nimport datetime\nimport time\nimport json\nimport sys\n\ndays = 0\n\ndef unix_epoch(t, delta):\n    dt = t + delta\n\n    # print dt\n    return int(time.mktime(dt.timetuple()))\n\nnow = datetime.datetime.today()\n\nf = now.replace(now.year, now.month, now.day, 0, 0, 1, 0)\nt = now.replace(now.year, now.month, now.day, 23, 59, 59, 0)\n\ndelta = datetime.timedelta(days=days)\n\n\npayload = {\n        '_type' : 'cmd',\n        'action' : 'reportSteps',\n        'from'  : unix_epoch(f, delta),\n        'to'    : unix_epoch(t, delta),\n}\nprint json.dumps(payload)  In the evening, a  cron  entry sends that off to our broker which will, eventually,\ndeliver the message to the the phone.  50 22 * * * /usr/local/bin/reportsteps | mosquitto_pub -q 2 -t owntracks/jpm/5s/cmd -l", 
            "title": "Daily reports"
        }, 
        {
            "location": "/features/settings/", 
            "text": "Settings\n\n\nLocation tracking isn't easy, and people's requirements differ. You may be happy with one location report when your device moves a few kilometers, whereas the next person prefers seeing a minute-by-minute report. As described in \nthe introduction\n??? OwnTracks relies on the device's operating system APIs for this information. What our apps do is to tell the operating system that they're willing to get more or fewer updates if possible. For configuring this, as well as the connection parameters to your [MQTT broker] and sundry options, we have quite a large number of settings.\n\n\niOS \n Android\n\n\nUser\n\n\nDevice\n\n\nSubscribe topic\n\n\nPublish topic\n\n\nTID\n\n\niOS only\n\n\n\n\nDepending on the \nmode\n you're configuring, iOS will show you all or fewer possible settings:\n\n\n\n\nIn \nPublic mode\n you can configure the \nTrackerID\n only.\n\n\nIn \nHosted mode\n you configure the username, device, and token you set up on the OwnTracks Hosted Web site, and you may specify a \nTrackerID\n.\n\n\n\n\nAndroid only", 
            "title": "Settings"
        }, 
        {
            "location": "/features/settings/#settings", 
            "text": "Location tracking isn't easy, and people's requirements differ. You may be happy with one location report when your device moves a few kilometers, whereas the next person prefers seeing a minute-by-minute report. As described in  the introduction ??? OwnTracks relies on the device's operating system APIs for this information. What our apps do is to tell the operating system that they're willing to get more or fewer updates if possible. For configuring this, as well as the connection parameters to your [MQTT broker] and sundry options, we have quite a large number of settings.", 
            "title": "Settings"
        }, 
        {
            "location": "/features/settings/#ios-android", 
            "text": "User  Device  Subscribe topic  Publish topic  TID", 
            "title": "iOS  Android"
        }, 
        {
            "location": "/features/settings/#ios-only", 
            "text": "Depending on the  mode  you're configuring, iOS will show you all or fewer possible settings:   In  Public mode  you can configure the  TrackerID  only.  In  Hosted mode  you configure the username, device, and token you set up on the OwnTracks Hosted Web site, and you may specify a  TrackerID .", 
            "title": "iOS only"
        }, 
        {
            "location": "/features/settings/#android-only", 
            "text": "", 
            "title": "Android only"
        }, 
        {
            "location": "/features/debug/", 
            "text": "Debugging\n\n\nDesigning mobile apps is hard. Designing mobile apps which are killed off every once in a while by the underlying OS is harder (iOS). Designing mobile apps which reliable do what they should at all times is hardest. \nChristoph and Alexander\n know this and they've done a hell of a job to get stability and reliability of OwnTracks to where it stands today.\n\n\nBe that as it may, there are things which can be difficult to test, and in this section we give you some things to watch out for.\n\n\nFirst and foremost, and please don't laugh: does your device have either WiFi or 3G connectivity? No data means no location reported, which ought to be self-explanatory.\n\n\n\n\nCheck whether OwnTracks is connected to your broker. On iOS this is the green mushroom symbol on the map; on Android you can check in preferences. If need be, disconnect and reconnect OwnTracks and check your broker's logfile as you do so.\n\n\nIs your broker running and can it be reached by your device? We've \ngiven you tips on configuring your broker\n.\n\n\nMake liberal use of the Mosquitto \nclients\n to test whether your broker is receiving messages, and please ensure your broker ACLs match the settings in OwnTracks.", 
            "title": "Debugging"
        }, 
        {
            "location": "/features/debug/#debugging", 
            "text": "Designing mobile apps is hard. Designing mobile apps which are killed off every once in a while by the underlying OS is harder (iOS). Designing mobile apps which reliable do what they should at all times is hardest.  Christoph and Alexander  know this and they've done a hell of a job to get stability and reliability of OwnTracks to where it stands today.  Be that as it may, there are things which can be difficult to test, and in this section we give you some things to watch out for.  First and foremost, and please don't laugh: does your device have either WiFi or 3G connectivity? No data means no location reported, which ought to be self-explanatory.   Check whether OwnTracks is connected to your broker. On iOS this is the green mushroom symbol on the map; on Android you can check in preferences. If need be, disconnect and reconnect OwnTracks and check your broker's logfile as you do so.  Is your broker running and can it be reached by your device? We've  given you tips on configuring your broker .  Make liberal use of the Mosquitto  clients  to test whether your broker is receiving messages, and please ensure your broker ACLs match the settings in OwnTracks.", 
            "title": "Debugging"
        }, 
        {
            "location": "/tech/json/", 
            "text": "JSON\n\n\nOwnTracks publishes its message payloads in \nJSON\n format. The different payload types are identified by a \n_type\n element. Depending on the app platform, different payload types are supported. \n\n\n\n\n\n\n\n\n_type\n\n\niOS\n\n\nAndroid\n\n\n\n\n\n\n\n\n\n\nlocation\n\n\nY\n\n\nY\n\n\n\n\n\n\nlwt\n\n\nY\n\n\nY\n\n\n\n\n\n\nwaypoint\n\n\nY\n\n\nY\n\n\n\n\n\n\ntransition\n\n\nY\n\n\nY\n\n\n\n\n\n\nbeacon\n\n\nY\n\n\nN\n\n\n\n\n\n\ncmd\n\n\nY\n\n\nY\n\n\n\n\n\n\nsteps\n\n\nY\n\n\nN\n\n\n\n\n\n\nconfiguration\n\n\nY\n\n\nY\n\n\n\n\n\n\n\n\nTopics\n\n\nApps publish to:\n\n\n\n\nowntracks/user/device\n with \n_type=location\n for location updates, and with \n_type=lwt\n\n\nowntracks/user/device/cmd\n with \n_type=cmd\n      for remote commands\n\n\nowntracks/user/device/event\n with \n_type=transition\n for enter/leave events\n\n\n\n\nApps subscribe to:\n\n\n\n\nowntracks/user/device/cmd\n if remote commands are enabled\n\n\nowntracks/+/+\n for seeing other user's locations, depending on broker ACL\n\n\nowntracks/+/+/event\n (singular) for transition messages (\nenter\n/\nleave\n)\n\n\nowntracks/+/+/waypoint\n  (singular) for Waypoint definitions/modifications\n\n\n\n\nIn addition, the iOS app publishes to:\n\n\n\n\nowntracks/user/device/step\n to report step counter\n\n\nowntracks/user/device/beacon\n for beacon ranging\n\n\nowntracks/user/device/dump\n for config dumps\n\n\n\n\n_type=location\n\n\nThis location object describes the location of the device that published it. \nHeads up: as from Android version 0.5.11 and from iOS version 8.0 numeric types are real numeric (\nfloat\n, \nint\n, boolean \ntrue\n/\nfalse\n) and no longer strings.\n\n\n{\n    \n_type\n : \nlocation\n,        \n    \nacc\n   : 75,              \n    \nalt\n   : 13,\n    \nbatt\n  : nnn,              \n    \ncog\n   : 270,\n    \ndesc\n  : \nsssss\n,      \n    \nevent\n : \nsssss\n,      \n    \nlat\n   : x.xxxxxx,       \n    \nlon\n   : y.yyyyyy,        \n    \nrad\n   : nnn,       \n    \nt\n     : \nx\n,\n    \ntid\n   : \nYY\n,\n    \ntst\n   : 1376715317,      \n    \nvacc\n  : 10,\n    \nvel\n   : 54 \n}\n\n\n\n\n\n\nacc\n is accuracy of the reported location in meters without unit. \n\n\nalt\n is the altitude measured in meters above sea level (\nOptional\n)\n\n\nbatt\n is the device's battery level in percent\n\n\ncog\n is the heading (course over ground) in degrees, 0 = North (\nOptional\n)\n\n\ndesc\n is the description of a [[waypoint|Waypoints]] \n\n\nevent\n is one of \n\"enter\"\n or \n\"leave\"\n and tells if the app is entering or leaving a geofence \n\n\nlat\n is latitude as decimal, represented as a string\n\n\nlon\n is longitude as decimal, represented as a string\n\n\nrad\n is the radius in meters around around the geo-fence when entering/leaving a geofence\n\n\nt\n is the trigger for the publish x = \n\n\n\"p\" ping, issued randomly by background task \n\n\n\"c\" circular region enter/leave event \n\n\n\"b\" beacon region enter/leave event\n\n\n\"r\" response to a \"reportLocation\" request\n\n\n\"u\" manual publish requested by the user\n\n\n\"t\" timer based publish in move move\n\n\n\"a\" or missing \nt\n indicates automatic location update\n\n\n\n\n\n\ntid\n is a configurable tracker-ID which is used by the iOS auto-faces feature to display, say, initials of a user. If it isn't explicitly configured, it defaults to the last two characters of the device's publish topic. \n\n\ntst\n is a UNIX \nepoch timestamp\n of the event as it occurs which may be different from the time it is published.\n\n\nvacc\n is the vertical accuracy of the reported altitude in meters (\nOptional\n)\n\n\nvel\n is the velocity (speed) in km/h (\nOptional\n)\n\n\n\n\n(The IOS device can be configured to produce or not produce fields marked as \noptional\n with the Extended Data setting.)\n\n\nGreenwich\n\n\nThe OwnTracks-edition of the \nChoral Greenwich\n device reports the following additional elements in a \n_type=location\n message:\n\n\n{\n    \n_type\n: \nlocation\n,\n    \nalt\n: 160,\n    \ncog\n: 0,\n    \ndist\n: 189,\n    \ntrip\n: 279122,\n    \nlat\n: xx.xxxxxx,\n    \nlon\n: y.yyyyyy,\n    \nvel\n: 12,\n    \nt\n: \nt\n,\n    \ntst\n: 1406803894\n}\n\n\n\n\n\n\nalt\n is altitude in meters. (\nOptional\n)\n\n\nbatt\n is the external battery voltage. (\nOptional\n)\n\n\ncog\n is the course over ground (heading) in degrees. (\nOptional\n)\n\n\ndist\n is the distance travelled in meters since the last location publish. (\nOptional\n)\n\n\ntrip\n is the distance travelled in meters since the last reboot. (\nOptional\n)\n\n\nvel\n is the speed (velocity) in km/h. (\nOptional\n)\n\n\nt\n is the trigger of the published message:\n\n\nf\n first publish after reboot\n\n\nm\n for manually requested locations (e.g. by publishing to \n/cmd\n)\n\n\nt\n (time) for location published because device is moving.\n\n\nT\n (time) for location published because of time passed (\nmaxInterval\n); device is stationary\n\n\nk\n When transitioning from \nmove\n to \nstationary\n an additional publish is sent marked with trigger \nk\n (park)\n\n\nv\n When transitioning from \nstationary\n to \nmove\n additional publish is sent marked with trigger \nv\n (mo-v-e)\n\n\nl\n When device looses GPS fix, an additional publish is sent to transmit the last known position\n\n\nL\n last position before gracefull shutdown\n\n\n\n\n(The device can be configured to produce or not produce fields marked as \noptional\n.)\n\n\n_type=lwt\n\n\nA \nlast will and testament\n is published automatically by the MQTT broker when it looses contact with the app. This typically looks like this:\n\n\n{\n    \n_type\n:\nlwt\n,\n    \ntst\n: 1380738247\n}\n\n\n\n\nThe timestamp is the Unix epoch time at which the app first connected (and \nnot\n the time at which the LWT was published).\n\n\n_type=waypoint\n\n\nWaypoints denote a specific geographical location that you want to keep track of. \n\n\n{\n    \n_type\n  : \nwaypoint\n,\n    \ndesc\n   : \nFree text entered on device\n,\n    \nlat\n    : x.xxxxxx,       \n    \nlon\n    : y.yyyyyy,        \n    \nrad\n    : xxx,\n    \ntst\n    : nnnnn,\n    \nshared\n : true,\n    \ntid\n    : \nXX\n\n}\n\n\n\n\n\n\nshared\n location messages of shared waypoints contain a desc and event attribute. Not shared ones contain an event attribute only\n\n\ntst\n is the timestamp of waypoint \ncreation\n even if it was subsequently modified by the user. (See [[waypoints|Waypoints]].)\n\n\n\n\n_type=configuration\n\n\nThe device configuration can be imported and exported as JSON. The exported configuration can contain an array of waypoints that are defined on the device. \n\n\n{\n    \n_type\n: \nconfiguration\n,\n    \nmode\n: 0,\n    \ndeviceid\n: \nphone\n,\n    \nclientid\n: \njane-phone\n,\n    \ntrackerId\n: \nxx\n,\n    \nsubTopic\n: \nowntracks/#\n,\n    \npubTopicBase\n: \nowntracks/jane/phone\n,\n    \nhost\n: \nbroker.my.net\n,\n    \nusername\n: \njane\n,\n    \npassword\n: \nsecr3t\n,\n    \nwillTopic\n: \n,\n    \nsubQos\n: 1,\n    \npubQos\n: 2,\n    \npubInterval\n : 30,\n    \nport\n: 8883,\n    \nkeepalive\n: 60,\n    \nwillQos\n: 1,\n    \npubRetain\n: true,\n    \ntls\n: true,\n    \ntlsCrtPath\n : \n/foo/bar\n,\n    \nauth\n: true,\n    \ncleanSession\n: false,\n    \nwillRetain\n: false,\n    \nlocatorDisplacement\n: 200,\n    \nlocatorInterval\n: 180,\n    \nlocatorAccuracyBackground\n : 2,\n    \nlocatorAccuracyForeground\n : 0,\n    \nmonitoring\n: 1,\n    \nranging\n: \n,\n    \npositions\n: 50,\n    \nconnectionAdvancedMode\n : false,\n    \nautostartOnBoot\n : false,\n    \npubIncludeBattery\n : false,\n    \nsub\n : false,\n    \npub\n : false,\n    \nupdateAddressBook\n : false,\n    \nnotification\n : false,\n    \nnotificationLocation\n : false,\n    \nnotificationGeocoder\n : false,\n    \nnotificationTickerOnPublish\n : false,\n    \nnotificationTickerOnGeofenceTransition\n : false,\n    \nremoteCommandReportLocation\n : false,\n    \nremoteCommandDump\n : false,\n    \ncmd\n : false,\n    \nallowRemoteLocation\n : false,\n    \nextendedData\n : false,\n    \nremoteConfiguration\n : false,\n    \nwaypoints\n : [\n                    { \n_type\n : \nwaypoint\n,\n                      \ntst\n: nnnnnnnnnn,\n                      \nlat\n: nn.nnn,\n                      \nlon\n: nn.nnn,\n                      \nrad\n: nnn,\n                      \nshared\n: true,\n                      \ndesc\n : \nblabla\n,\n                      \ntransition\n: true,\n                    } \n                  ]\n}\n\n\n\n\n\n\nmode\n                    0 == Own mode, 1 == Hosted mode (for registered users), 2 = Public mode \n\n\nsubTopic\n\n\npubTopicBase\n\n\nusername\n\n\npassword\n\n\nwillTopic\n\n\nsubQos\n\n\npubQos\n\n\nwillQos\n\n\npubRetain\n\n\ntlsCrtPath\n                  not in IOS\n\n\ncleanSession\n\n\nwillRetain\n\n\nlocatorDisplacement\n \n\n\nlocatorInterval\n\n\nlocatorAccuracyBackground\n           0 == high power, 1 == balanced power, 2 == low power, 3 == no power\n\n\nlocatorAccuracyForeground\n           0 == high power, 1 == balanced power, 2 == low power, 3 == no power\n\n\nmonitoring\n                  IOS only, set in UI\n\n\nranging\n                 IOS only, set in UI\n\n\npositions\n                   IOS only, number of positions to keep and display\n\n\nautostartOnBoot\n             Android only\n\n\npubIncludeBattery\n               Android only, in IOS alway on\n\n\nsub\n                     Android only, subscription enabled for contacts, in IOS always subscribed\n\n\npub\n                     Android only, auto publish, in IOS controlled by \nmonitoring\n\n\nupdateAddressBook\n\n\nnotification\n                Android only, show notifications\n\n\nnotificationLocation\n            Android only, show last reported location in notification, off in IOS\n\n\nnotificationGeocoder\n            Android only, resolve location in notification to address, in IOS only resolved when in show details\n\n\nnotificationTickerOnPublish\n         Android only, show a ticker on successful publishes, always off in IOS\", \n\n\nnotificationTickerOnGeofenceTransition\n  Android only, show a ticker when the devices enters or leaves a geofence, always on in IOS\", \n\n\nremoteCommandReportLocation\n         Android only, respond to reportLocation remote command\n\n\nremoteCommandDump\n               Android only, respond to dump remote command\n\n\ncmd\n                     IOS only, respond to remote commands\n\n\nallowRemoteLocation\n             IOS only, respond to remote location request even if monitoring mode is set to manual\n\n\nextendedData\n                IOS only, add altitude, vertical accuracy, velocity and course over ground to published data\n\n\nremoteConfiguration\n             Android only, respond to remote configuration messages\n\n\n\n\n_type=beacon\n\n\n{\n        \n_type\n:\nbeacon\n,\n        \nuuid\n:\nCA271EAE-5FA8-4E80-8F08-2A302A95A959\n,\n        \nmajor\n:1,\n        \nminor\n:1,\n        \ntst\n: 1399028969,\n        \nacc\n:n,\n        \nrssi\n:n,\n        \nprox\n:n,\n}\n\n\n\n\n\n\nacc\n The accuracy of the proximity value, measured in meters from the beacon.\n\n\nrssi\n    The received signal strength of the beacon, measured in decibels. The theoretical relationship between RSSI and distance is something like this: \nRSSI[dbm] = \u2212(10n log10(d) \u2212 A)\n where d is the distance and A is the offset which is the measured RSSI 1 meter point away from the Bluetooth Low Energy device.\n\n\nprox\n    The relative distance to the beacon where n indicates\n\n\n0 = the proximity of the beacon could not be determined.\n\n\n1 = the beacon is in the user\u2019s immediate vicinity.\n\n\n2 = the beacon is relatively close to the user.\n\n\n3 = the beacon is far away.\"\n\n\n\n\n\n\n\n\n_type=cmd\n\n\n{\n_type\n:\ncmd\n,\naction\n:\nreportSteps\n}\n\n\n\n\n\n\naction\n      action to be performed by the device\n\n\n\"reportSteps\" reports steps walked on iPhone 5s devices. \n\n  You may add \"from\":\ntimestamp\n and/or \"to\":\ntimestamp\n\" \n  which defaults to current time, from defaults to current date 00:00 am\n  (see [[pedometer|Pedometer]]).\n\n\n\"reportLocation\" triggers the publish of the current location\n\n\n\"dump\" triggers the publish of a configuration message\n\n\n\n\n\n\n\n\n_type=steps\n\n\n{\n_type\n:\nsteps\n,\ntst\n:1400455130,\nsteps\n:1234,\nfrom\n:1400455130,\nto\n:1400458000}\n\n\n\n\n\n\ntst\n         timestamp of the request\n\n\nsteps\n   the number of steps walked with the device in the specfied time period or\n                -1 if device does not support step counting or specified time period\n                is invalid\n\n\nfrom\n        effective start of time period\n\n\nto\n          effective end of time period\n\n\n\n\n_type=transition\n\n\nAs from XXXXX:\nA transition into or out of a previously configured waypoint is effected by publishing a \ntransition\n to the \n../event\n subtopic. In addition to the coordinates where the event fired (\nlat\n, \nlon\n, and \nacc\n of these), the message contains the timestamp of the waypoint creation (\nwtst\n) as well as the \nevent\n (which can be either \nenter\n or \nleave\n) and, in the case of a shared waypoint, it's description in \ndesc\n. Transition messages are published with \nretain=0\n.\n\n\n{\n  \n_type\n: \ntransition\n,\n  \nwtst\n: 1425042603,           // time of waypoint creation\n  \nlat\n: 12.34,                 // transition coordinates i.e. \nhere\n\n  \nlon\n: 44.5,\n  \ntst\n: 1427634603,            // timestamp of transition (e.g. \nnow\n)\n  \nacc\n: 130,                   // accuracy of lat, lon\n  \ntid\n: \nJP\n,\n  \nevent\n: \nenter\n,\n  \ndesc\n: \nmy Indian restaurant\n\n}", 
            "title": "JSON"
        }, 
        {
            "location": "/tech/json/#json", 
            "text": "OwnTracks publishes its message payloads in  JSON  format. The different payload types are identified by a  _type  element. Depending on the app platform, different payload types are supported.      _type  iOS  Android      location  Y  Y    lwt  Y  Y    waypoint  Y  Y    transition  Y  Y    beacon  Y  N    cmd  Y  Y    steps  Y  N    configuration  Y  Y     Topics  Apps publish to:   owntracks/user/device  with  _type=location  for location updates, and with  _type=lwt  owntracks/user/device/cmd  with  _type=cmd       for remote commands  owntracks/user/device/event  with  _type=transition  for enter/leave events   Apps subscribe to:   owntracks/user/device/cmd  if remote commands are enabled  owntracks/+/+  for seeing other user's locations, depending on broker ACL  owntracks/+/+/event  (singular) for transition messages ( enter / leave )  owntracks/+/+/waypoint   (singular) for Waypoint definitions/modifications   In addition, the iOS app publishes to:   owntracks/user/device/step  to report step counter  owntracks/user/device/beacon  for beacon ranging  owntracks/user/device/dump  for config dumps   _type=location  This location object describes the location of the device that published it.  Heads up: as from Android version 0.5.11 and from iOS version 8.0 numeric types are real numeric ( float ,  int , boolean  true / false ) and no longer strings.  {\n     _type  :  location ,        \n     acc    : 75,              \n     alt    : 13,\n     batt   : nnn,              \n     cog    : 270,\n     desc   :  sssss ,      \n     event  :  sssss ,      \n     lat    : x.xxxxxx,       \n     lon    : y.yyyyyy,        \n     rad    : nnn,       \n     t      :  x ,\n     tid    :  YY ,\n     tst    : 1376715317,      \n     vacc   : 10,\n     vel    : 54 \n}   acc  is accuracy of the reported location in meters without unit.   alt  is the altitude measured in meters above sea level ( Optional )  batt  is the device's battery level in percent  cog  is the heading (course over ground) in degrees, 0 = North ( Optional )  desc  is the description of a [[waypoint|Waypoints]]   event  is one of  \"enter\"  or  \"leave\"  and tells if the app is entering or leaving a geofence   lat  is latitude as decimal, represented as a string  lon  is longitude as decimal, represented as a string  rad  is the radius in meters around around the geo-fence when entering/leaving a geofence  t  is the trigger for the publish x =   \"p\" ping, issued randomly by background task   \"c\" circular region enter/leave event   \"b\" beacon region enter/leave event  \"r\" response to a \"reportLocation\" request  \"u\" manual publish requested by the user  \"t\" timer based publish in move move  \"a\" or missing  t  indicates automatic location update    tid  is a configurable tracker-ID which is used by the iOS auto-faces feature to display, say, initials of a user. If it isn't explicitly configured, it defaults to the last two characters of the device's publish topic.   tst  is a UNIX  epoch timestamp  of the event as it occurs which may be different from the time it is published.  vacc  is the vertical accuracy of the reported altitude in meters ( Optional )  vel  is the velocity (speed) in km/h ( Optional )   (The IOS device can be configured to produce or not produce fields marked as  optional  with the Extended Data setting.)  Greenwich  The OwnTracks-edition of the  Choral Greenwich  device reports the following additional elements in a  _type=location  message:  {\n     _type :  location ,\n     alt : 160,\n     cog : 0,\n     dist : 189,\n     trip : 279122,\n     lat : xx.xxxxxx,\n     lon : y.yyyyyy,\n     vel : 12,\n     t :  t ,\n     tst : 1406803894\n}   alt  is altitude in meters. ( Optional )  batt  is the external battery voltage. ( Optional )  cog  is the course over ground (heading) in degrees. ( Optional )  dist  is the distance travelled in meters since the last location publish. ( Optional )  trip  is the distance travelled in meters since the last reboot. ( Optional )  vel  is the speed (velocity) in km/h. ( Optional )  t  is the trigger of the published message:  f  first publish after reboot  m  for manually requested locations (e.g. by publishing to  /cmd )  t  (time) for location published because device is moving.  T  (time) for location published because of time passed ( maxInterval ); device is stationary  k  When transitioning from  move  to  stationary  an additional publish is sent marked with trigger  k  (park)  v  When transitioning from  stationary  to  move  additional publish is sent marked with trigger  v  (mo-v-e)  l  When device looses GPS fix, an additional publish is sent to transmit the last known position  L  last position before gracefull shutdown   (The device can be configured to produce or not produce fields marked as  optional .)  _type=lwt  A  last will and testament  is published automatically by the MQTT broker when it looses contact with the app. This typically looks like this:  {\n     _type : lwt ,\n     tst : 1380738247\n}  The timestamp is the Unix epoch time at which the app first connected (and  not  the time at which the LWT was published).  _type=waypoint  Waypoints denote a specific geographical location that you want to keep track of.   {\n     _type   :  waypoint ,\n     desc    :  Free text entered on device ,\n     lat     : x.xxxxxx,       \n     lon     : y.yyyyyy,        \n     rad     : xxx,\n     tst     : nnnnn,\n     shared  : true,\n     tid     :  XX \n}   shared  location messages of shared waypoints contain a desc and event attribute. Not shared ones contain an event attribute only  tst  is the timestamp of waypoint  creation  even if it was subsequently modified by the user. (See [[waypoints|Waypoints]].)   _type=configuration  The device configuration can be imported and exported as JSON. The exported configuration can contain an array of waypoints that are defined on the device.   {\n     _type :  configuration ,\n     mode : 0,\n     deviceid :  phone ,\n     clientid :  jane-phone ,\n     trackerId :  xx ,\n     subTopic :  owntracks/# ,\n     pubTopicBase :  owntracks/jane/phone ,\n     host :  broker.my.net ,\n     username :  jane ,\n     password :  secr3t ,\n     willTopic :  ,\n     subQos : 1,\n     pubQos : 2,\n     pubInterval  : 30,\n     port : 8883,\n     keepalive : 60,\n     willQos : 1,\n     pubRetain : true,\n     tls : true,\n     tlsCrtPath  :  /foo/bar ,\n     auth : true,\n     cleanSession : false,\n     willRetain : false,\n     locatorDisplacement : 200,\n     locatorInterval : 180,\n     locatorAccuracyBackground  : 2,\n     locatorAccuracyForeground  : 0,\n     monitoring : 1,\n     ranging :  ,\n     positions : 50,\n     connectionAdvancedMode  : false,\n     autostartOnBoot  : false,\n     pubIncludeBattery  : false,\n     sub  : false,\n     pub  : false,\n     updateAddressBook  : false,\n     notification  : false,\n     notificationLocation  : false,\n     notificationGeocoder  : false,\n     notificationTickerOnPublish  : false,\n     notificationTickerOnGeofenceTransition  : false,\n     remoteCommandReportLocation  : false,\n     remoteCommandDump  : false,\n     cmd  : false,\n     allowRemoteLocation  : false,\n     extendedData  : false,\n     remoteConfiguration  : false,\n     waypoints  : [\n                    {  _type  :  waypoint ,\n                       tst : nnnnnnnnnn,\n                       lat : nn.nnn,\n                       lon : nn.nnn,\n                       rad : nnn,\n                       shared : true,\n                       desc  :  blabla ,\n                       transition : true,\n                    } \n                  ]\n}   mode                     0 == Own mode, 1 == Hosted mode (for registered users), 2 = Public mode   subTopic  pubTopicBase  username  password  willTopic  subQos  pubQos  willQos  pubRetain  tlsCrtPath                   not in IOS  cleanSession  willRetain  locatorDisplacement    locatorInterval  locatorAccuracyBackground            0 == high power, 1 == balanced power, 2 == low power, 3 == no power  locatorAccuracyForeground            0 == high power, 1 == balanced power, 2 == low power, 3 == no power  monitoring                   IOS only, set in UI  ranging                  IOS only, set in UI  positions                    IOS only, number of positions to keep and display  autostartOnBoot              Android only  pubIncludeBattery                Android only, in IOS alway on  sub                      Android only, subscription enabled for contacts, in IOS always subscribed  pub                      Android only, auto publish, in IOS controlled by  monitoring  updateAddressBook  notification                 Android only, show notifications  notificationLocation             Android only, show last reported location in notification, off in IOS  notificationGeocoder             Android only, resolve location in notification to address, in IOS only resolved when in show details  notificationTickerOnPublish          Android only, show a ticker on successful publishes, always off in IOS\",   notificationTickerOnGeofenceTransition   Android only, show a ticker when the devices enters or leaves a geofence, always on in IOS\",   remoteCommandReportLocation          Android only, respond to reportLocation remote command  remoteCommandDump                Android only, respond to dump remote command  cmd                      IOS only, respond to remote commands  allowRemoteLocation              IOS only, respond to remote location request even if monitoring mode is set to manual  extendedData                 IOS only, add altitude, vertical accuracy, velocity and course over ground to published data  remoteConfiguration              Android only, respond to remote configuration messages   _type=beacon  {\n         _type : beacon ,\n         uuid : CA271EAE-5FA8-4E80-8F08-2A302A95A959 ,\n         major :1,\n         minor :1,\n         tst : 1399028969,\n         acc :n,\n         rssi :n,\n         prox :n,\n}   acc  The accuracy of the proximity value, measured in meters from the beacon.  rssi     The received signal strength of the beacon, measured in decibels. The theoretical relationship between RSSI and distance is something like this:  RSSI[dbm] = \u2212(10n log10(d) \u2212 A)  where d is the distance and A is the offset which is the measured RSSI 1 meter point away from the Bluetooth Low Energy device.  prox     The relative distance to the beacon where n indicates  0 = the proximity of the beacon could not be determined.  1 = the beacon is in the user\u2019s immediate vicinity.  2 = the beacon is relatively close to the user.  3 = the beacon is far away.\"     _type=cmd  { _type : cmd , action : reportSteps }   action       action to be performed by the device  \"reportSteps\" reports steps walked on iPhone 5s devices.  \n  You may add \"from\": timestamp  and/or \"to\": timestamp \" \n  which defaults to current time, from defaults to current date 00:00 am\n  (see [[pedometer|Pedometer]]).  \"reportLocation\" triggers the publish of the current location  \"dump\" triggers the publish of a configuration message     _type=steps  { _type : steps , tst :1400455130, steps :1234, from :1400455130, to :1400458000}   tst          timestamp of the request  steps    the number of steps walked with the device in the specfied time period or\n                -1 if device does not support step counting or specified time period\n                is invalid  from         effective start of time period  to           effective end of time period   _type=transition  As from XXXXX:\nA transition into or out of a previously configured waypoint is effected by publishing a  transition  to the  ../event  subtopic. In addition to the coordinates where the event fired ( lat ,  lon , and  acc  of these), the message contains the timestamp of the waypoint creation ( wtst ) as well as the  event  (which can be either  enter  or  leave ) and, in the case of a shared waypoint, it's description in  desc . Transition messages are published with  retain=0 .  {\n   _type :  transition ,\n   wtst : 1425042603,           // time of waypoint creation\n   lat : 12.34,                 // transition coordinates i.e.  here \n   lon : 44.5,\n   tst : 1427634603,            // timestamp of transition (e.g.  now )\n   acc : 130,                   // accuracy of lat, lon\n   tid :  JP ,\n   event :  enter ,\n   desc :  my Indian restaurant \n}", 
            "title": "JSON"
        }, 
        {
            "location": "/tech/program/", 
            "text": "Programming\n\n\nWe've \nshown you some clients which consume OwnTracks data\n, but you may well wish to dip your fingers into programming something of your own. Creating a program to consume OwnTracks data isn't particularly difficult, and we're going to show you what you can do with a bit of \nPython\n together with the \nPaho Python client\n.\n\n\nGetting started: Paho Python\n\n\nWe're assuming you have Python installed, which you can verify by attempting to invoke \npython -V\n; if installed, it tells you the version number. We're also assuming you have \npip\n installed (a Python package manager) which may be called \npip2\n or something on your machine. You may have to install \nsetuptools\n via your distribution's package manager.\n\n\nInstall the \nPaho Python\n module using\n\n\npip install paho-mqtt\n\n\n\n\nProgress reports\n\n\nAssume we want to create a program which should report the location of our friends, as a simple list:\n\n\nTID = n4 is currently at 51.0343863, 9.4763712\nTID = n7 is currently at 52.7343671, 7.8764431\nTID = jp is currently at 53.134404655, 8.1063173\n\n\n\n\nWe need a small utility program which will subscribe to location publishes received by your broker by connecting to it on \nlocalhost\n and subscribing to \nowntracks/+/+\n (a wild-card expression in which each \n+\n means \nanything at this level\n).\n\n\nThe Code\n\n\nFor each received message, the utility attempts to decode the JSON payload and then prints the tracker-ID (\nTID\n) as well as latitude, longitude coordinates. Keep a copy of our \nOwnTracks-JSON\n documentation handy and study the topic names of each possible publish by the apps.\n\n\n#!/usr/bin/env python\n\nimport paho.mqtt.client as mqtt\nimport json\n\n# The callback for when the client successfully connects to the broker\ndef on_connect(client, userdata, rc):\n    ''' We subscribe on_connect() so that if we lose the connection\n        and reconnect, subscriptions will be renewed. '''\n\n    client.subscribe(\nowntracks/+/+\n)\n\n# The callback for when a PUBLISH message is received from the broker\ndef on_message(client, userdata, msg):\n\n    topic = msg.topic\n\n    try:\n        data = json.loads(str(msg.payload))\n\n        print \nTID = {0} is currently at {1}, {2}\n.format(data['tid'], data['lat'], data['lon'])\n    except:\n        print \nCannot decode data on topic {0}\n.format(topic)\n\nclient = mqtt.Client()\nclient.on_connect = on_connect\nclient.on_message = on_message\n\nclient.connect(\nlocalhost\n, 1883, 60)\n\n# Blocking call which processes all network traffic and dispatches\n# callbacks (see on_*() above). It also handles reconnecting.\n\nclient.loop_forever()\n\n\n\n\nMicro Map\n\n\nAssume for a moment that you alter the program above in such a way as that it writes your current location in JSON format to a file called \nme.json\n which could look like this:\n\n\n{\n    \nlat\n: 48.858334,\n    \nlon\n : 2.295134,\n    \ntid\n:\nJJ\n\n}\n\n\n\n\nWe could then create a Web page which would load that JSON and display a marker on a map.\n\n\n\n\nindex.html\n\n\n!DOCTYPE html\n\n\nhtml\n\n  \nhead\n\n    \ntitle\nMicromap\n/title\n\n    \nmeta name=\nviewport\n content=\nwidth=device-width, height=device-height, user-scalable=no, initial-scale=1.0\n /\n\n\n    \nmeta name=\nmobile-web-app-capable\n content=\nyes\n\n    \nmeta name=\napple-mobile-web-app-capable\n content=\nyes\n\n    \nstyle type=\ntext/css\n\n      body {  font-size: 80%; }\n\n      td { border-bottom: 1px solid; border-right: 1px dotted;}\n\n      #map-canvas { height: 100% }\n\n    \n/style\n\n     \nscript src=\nhttps://maps.googleapis.com/maps/api/js?v=3.exp\nsensor=false\n/script\n\n     \nscript src=\nhttp://code.jquery.com/jquery-1.9.1.min.js\n/script\n\n     \nscript src=\nhttp://code.jquery.com/jquery-migrate-1.1.1.min.js\n/script\n\n    \nscript src=\nfunctions.js\n/script\n\n  \n/head\n\n  \nbody\n\n    \ndiv\n\n      \ndiv id=\nmap-canvas\n style='width: 100%; height: 400px;'/\n/div\n\n    \n/div\n\n  \n/body\n\n\n/html\n\n\n\n\n\nfunctions.js\n\n\nfunction initialize() {\n    var json = (function () {\n        var json = null; \n        $.ajax({ \n            'type' : 'GET',\n            'async': false, \n            'cache' : false,\n            'global': true, \n            'url'   : 'me.json',  // URI of JSON file we create\n            'dataType': \njson\n, \n            'success': function (data) {\n                json = data;\n                return json;\n             }\n        });\n    return json;\n    })();\n\n    var data = json;\n    console.log(JSON.stringify(data));\n\n    var center = new google.maps.LatLng(data.lat, data.lon);\n    mapOptions = {\n        center: center,\n        zoom: 12,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        scrollwheel: false,\n        disableDefaultUI: false,\n        panControl: false,\n        scaleControl: false,\n        streetViewControl: false,\n        overviewMapControl: false,\n    };\n\n    map = new google.maps.Map(document.getElementById(\nmap-canvas\n), mapOptions);\n\n    var LatLng = new google.maps.LatLng(data.lat, data.lon); \n    var m = new google.maps.Marker({\n        position: LatLng,\n        map: map,\n        title: data.tid,\n    });\n}\ngoogle.maps.event.addDomListener(window, 'load', initialize);\n\n\n\n\nwould result in a map being displayed in your Web browser with a marker at the last location received by your MQTT broker. Note: the marker won't move; we leave that as an exercise to you, or just head over and look \nat some clients\n which do that for you.\n\n\nTesting\n\n\nTesting location-based apps is a bit of a, well, pain, but remember there are a few simple tricks you can apply:\n\n\n\n\nUse the \npublish now\n button in OwnTracks to fire a location update. The smart phone won't really \nmove\n much of course, but it'll allow you to test your program a bit.\n\n\nPublish your own \nOwnTracks-JSON\n payload to the broker with \nmosquitto_pub\n or similar.\n\n\n\n\nLast words\n\n\nConsuming OwnTracks messages from your MQTT broker isn't particularly difficult, and people have built nice programs doing so.", 
            "title": "Code"
        }, 
        {
            "location": "/tech/program/#programming", 
            "text": "We've  shown you some clients which consume OwnTracks data , but you may well wish to dip your fingers into programming something of your own. Creating a program to consume OwnTracks data isn't particularly difficult, and we're going to show you what you can do with a bit of  Python  together with the  Paho Python client .", 
            "title": "Programming"
        }, 
        {
            "location": "/tech/program/#getting-started-paho-python", 
            "text": "We're assuming you have Python installed, which you can verify by attempting to invoke  python -V ; if installed, it tells you the version number. We're also assuming you have  pip  installed (a Python package manager) which may be called  pip2  or something on your machine. You may have to install  setuptools  via your distribution's package manager.  Install the  Paho Python  module using  pip install paho-mqtt", 
            "title": "Getting started: Paho Python"
        }, 
        {
            "location": "/tech/program/#progress-reports", 
            "text": "Assume we want to create a program which should report the location of our friends, as a simple list:  TID = n4 is currently at 51.0343863, 9.4763712\nTID = n7 is currently at 52.7343671, 7.8764431\nTID = jp is currently at 53.134404655, 8.1063173  We need a small utility program which will subscribe to location publishes received by your broker by connecting to it on  localhost  and subscribing to  owntracks/+/+  (a wild-card expression in which each  +  means  anything at this level ).  The Code  For each received message, the utility attempts to decode the JSON payload and then prints the tracker-ID ( TID ) as well as latitude, longitude coordinates. Keep a copy of our  OwnTracks-JSON  documentation handy and study the topic names of each possible publish by the apps.  #!/usr/bin/env python\n\nimport paho.mqtt.client as mqtt\nimport json\n\n# The callback for when the client successfully connects to the broker\ndef on_connect(client, userdata, rc):\n    ''' We subscribe on_connect() so that if we lose the connection\n        and reconnect, subscriptions will be renewed. '''\n\n    client.subscribe( owntracks/+/+ )\n\n# The callback for when a PUBLISH message is received from the broker\ndef on_message(client, userdata, msg):\n\n    topic = msg.topic\n\n    try:\n        data = json.loads(str(msg.payload))\n\n        print  TID = {0} is currently at {1}, {2} .format(data['tid'], data['lat'], data['lon'])\n    except:\n        print  Cannot decode data on topic {0} .format(topic)\n\nclient = mqtt.Client()\nclient.on_connect = on_connect\nclient.on_message = on_message\n\nclient.connect( localhost , 1883, 60)\n\n# Blocking call which processes all network traffic and dispatches\n# callbacks (see on_*() above). It also handles reconnecting.\n\nclient.loop_forever()", 
            "title": "Progress reports"
        }, 
        {
            "location": "/tech/program/#micro-map", 
            "text": "Assume for a moment that you alter the program above in such a way as that it writes your current location in JSON format to a file called  me.json  which could look like this:  {\n     lat : 48.858334,\n     lon  : 2.295134,\n     tid : JJ \n}  We could then create a Web page which would load that JSON and display a marker on a map.   index.html  !DOCTYPE html  html \n   head \n     title Micromap /title \n     meta name= viewport  content= width=device-width, height=device-height, user-scalable=no, initial-scale=1.0  / \n\n     meta name= mobile-web-app-capable  content= yes \n     meta name= apple-mobile-web-app-capable  content= yes \n     style type= text/css \n      body {  font-size: 80%; }\n\n      td { border-bottom: 1px solid; border-right: 1px dotted;}\n\n      #map-canvas { height: 100% }\n\n     /style \n      script src= https://maps.googleapis.com/maps/api/js?v=3.exp sensor=false /script \n      script src= http://code.jquery.com/jquery-1.9.1.min.js /script \n      script src= http://code.jquery.com/jquery-migrate-1.1.1.min.js /script \n     script src= functions.js /script \n   /head \n   body \n     div \n       div id= map-canvas  style='width: 100%; height: 400px;'/ /div \n     /div \n   /body  /html   functions.js  function initialize() {\n    var json = (function () {\n        var json = null; \n        $.ajax({ \n            'type' : 'GET',\n            'async': false, \n            'cache' : false,\n            'global': true, \n            'url'   : 'me.json',  // URI of JSON file we create\n            'dataType':  json , \n            'success': function (data) {\n                json = data;\n                return json;\n             }\n        });\n    return json;\n    })();\n\n    var data = json;\n    console.log(JSON.stringify(data));\n\n    var center = new google.maps.LatLng(data.lat, data.lon);\n    mapOptions = {\n        center: center,\n        zoom: 12,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        scrollwheel: false,\n        disableDefaultUI: false,\n        panControl: false,\n        scaleControl: false,\n        streetViewControl: false,\n        overviewMapControl: false,\n    };\n\n    map = new google.maps.Map(document.getElementById( map-canvas ), mapOptions);\n\n    var LatLng = new google.maps.LatLng(data.lat, data.lon); \n    var m = new google.maps.Marker({\n        position: LatLng,\n        map: map,\n        title: data.tid,\n    });\n}\ngoogle.maps.event.addDomListener(window, 'load', initialize);  would result in a map being displayed in your Web browser with a marker at the last location received by your MQTT broker. Note: the marker won't move; we leave that as an exercise to you, or just head over and look  at some clients  which do that for you.", 
            "title": "Micro Map"
        }, 
        {
            "location": "/tech/program/#testing", 
            "text": "Testing location-based apps is a bit of a, well, pain, but remember there are a few simple tricks you can apply:   Use the  publish now  button in OwnTracks to fire a location update. The smart phone won't really  move  much of course, but it'll allow you to test your program a bit.  Publish your own  OwnTracks-JSON  payload to the broker with  mosquitto_pub  or similar.", 
            "title": "Testing"
        }, 
        {
            "location": "/tech/program/#last-words", 
            "text": "Consuming OwnTracks messages from your MQTT broker isn't particularly difficult, and people have built nice programs doing so.", 
            "title": "Last words"
        }, 
        {
            "location": "/terminology/", 
            "text": "Terminology\n\n\nSome of the terms we use can be a little confusing at times, so here's a list of terms you should be familiar with.\n\n\nMQTT\n\n\nMQTT is a lightweight publish-subscribe message-bus over which messages can be exchanged between several clients. \n\n\nbroker\n\n\nA MQTT \nbroker\n is a server that enables the communication between clients. The broker is responsible for distributing messages to interested clients based on the topic of a message. \n\n\npublish\n\n\nThe act of sending a message to a broker. \n\n\ntopic\n\n\nEach message that is published by a client is send to a specific topic on the broker. Clients can opt to receive only certain or all messages depending on which topic they subscribe to. \n\n\nsubscribe\n\n\nClients can specify to receive messages that are published to specific topics by subscribing to them. A client that is subscribed to the topic \nowntracks/jane/iphone\n will, for example, not receive a message that is published to \nowntracks/john/nexus\n.\n\n\nQoS\n\n\nQoS\n or \nQuality of Service\n, specifies how the app should attempt to publish messages to an MQTT broker.\n\n\n\n\nQoS=0. The message is delivered at most once, or it is not delivered at all. Its delivery across the network is not acknowledged.\n\n\nQoS=1. The message is always delivered at least once. If the sender does not receive an acknowledgment, the message is sent again with the DUP flag set until an acknowledgment is received. As a result receiver can be sent the same message multiple times, and might process it multiple times.\n\n\nQoS=2. The message is always delivered exactly once. This is the safest but slowest method of transfer.\n\n\n\n\nRetain\n\n\nWhen a message is published to a \nbroker\n with the \ndurable\n or \nretain\n flat\nset, it means that the MQTT broker will attempt to store the last published\nmessage on a particular topic.\n\n\nA client which subscribes to that topic will receive that last retained message once it\nconnects to the broker.\n\n\nGeocoding\n\n\nReverse geocoding\n is the act of looking up the address for a pair of coordinates.\n\n\nGeofence\n\n\nA \ngeofence\n is an area around a particular coordinate. Geofences will trigger certain actions once the device enters or leaves the setup area.", 
            "title": "Terminology"
        }, 
        {
            "location": "/terminology/#terminology", 
            "text": "Some of the terms we use can be a little confusing at times, so here's a list of terms you should be familiar with.  MQTT  MQTT is a lightweight publish-subscribe message-bus over which messages can be exchanged between several clients.   broker  A MQTT  broker  is a server that enables the communication between clients. The broker is responsible for distributing messages to interested clients based on the topic of a message.   publish  The act of sending a message to a broker.   topic  Each message that is published by a client is send to a specific topic on the broker. Clients can opt to receive only certain or all messages depending on which topic they subscribe to.   subscribe  Clients can specify to receive messages that are published to specific topics by subscribing to them. A client that is subscribed to the topic  owntracks/jane/iphone  will, for example, not receive a message that is published to  owntracks/john/nexus .  QoS  QoS  or  Quality of Service , specifies how the app should attempt to publish messages to an MQTT broker.   QoS=0. The message is delivered at most once, or it is not delivered at all. Its delivery across the network is not acknowledged.  QoS=1. The message is always delivered at least once. If the sender does not receive an acknowledgment, the message is sent again with the DUP flag set until an acknowledgment is received. As a result receiver can be sent the same message multiple times, and might process it multiple times.  QoS=2. The message is always delivered exactly once. This is the safest but slowest method of transfer.   Retain  When a message is published to a  broker  with the  durable  or  retain  flat\nset, it means that the MQTT broker will attempt to store the last published\nmessage on a particular topic.  A client which subscribes to that topic will receive that last retained message once it\nconnects to the broker.  Geocoding  Reverse geocoding  is the act of looking up the address for a pair of coordinates.  Geofence  A  geofence  is an area around a particular coordinate. Geofences will trigger certain actions once the device enters or leaves the setup area.", 
            "title": "Terminology"
        }, 
        {
            "location": "/people/", 
            "text": "People\n\n\nAlexander Rust\n created the first proof-of-concept for the Android app which started out under the very geeky name \nMQTTitude\n, a term coined from our use of MQTT and the then obsolete Latitude app, which Google took out of service in 2013.\n\n\nOnly a few days later, \nChristoph Krey\n implemented a rough prototype on iOS, and didn't stop implementing new and exciting features on the iOS version of OwnTracks until his coffee machine burned out.\n\n\nJan-Piet Mens\n had the \noriginal crazy idea of combining location updates and MQTT\n and tries to keep abreast on what Christoph and Alexander do. As \nBen\n once said: \"JP just sits back and cracks the whips\". So these three could be called the \"core team\", if we were in the market for cool-sounding titles.\n\n\nIncidentally, \nBen Jones\n, who works closely with us, has given us loads of invaluable feedback and he's the chap who created the \nmqttitude binding\n for the wonderful \nopenHAB\n Home Automation project.\n\n\nContributors\n\n\nMany good people have assisted us, be it by testing, by contributing bits of code or documentation, or just by complaining loudly, and we want to acknowledge the following contributions. (If you think your name should be on this list, tell us, or forever hold your peace. :-)\n\n\n\n\nBrad Pillatsch (\nbpillatsch\n) wrote the initial implementation of PKCS#12 import for Android.\n\n\nbrunk\n\n\nmatt\n\n\nStefano Costa", 
            "title": "People"
        }, 
        {
            "location": "/people/#people", 
            "text": "Alexander Rust  created the first proof-of-concept for the Android app which started out under the very geeky name  MQTTitude , a term coined from our use of MQTT and the then obsolete Latitude app, which Google took out of service in 2013.  Only a few days later,  Christoph Krey  implemented a rough prototype on iOS, and didn't stop implementing new and exciting features on the iOS version of OwnTracks until his coffee machine burned out.  Jan-Piet Mens  had the  original crazy idea of combining location updates and MQTT  and tries to keep abreast on what Christoph and Alexander do. As  Ben  once said: \"JP just sits back and cracks the whips\". So these three could be called the \"core team\", if we were in the market for cool-sounding titles.  Incidentally,  Ben Jones , who works closely with us, has given us loads of invaluable feedback and he's the chap who created the  mqttitude binding  for the wonderful  openHAB  Home Automation project.", 
            "title": "People"
        }, 
        {
            "location": "/people/#contributors", 
            "text": "Many good people have assisted us, be it by testing, by contributing bits of code or documentation, or just by complaining loudly, and we want to acknowledge the following contributions. (If you think your name should be on this list, tell us, or forever hold your peace. :-)   Brad Pillatsch ( bpillatsch ) wrote the initial implementation of PKCS#12 import for Android.  brunk  matt  Stefano Costa", 
            "title": "Contributors"
        }, 
        {
            "location": "/ideas/", 
            "text": "Ideas\n\n\nOver the course of time, we've had people propose a number of ideas for OwnTracks. Some of these we thought excellent, others we thought would maybe sometime be nice to have, and others, well, see for yourself. Be that as it may, this page lists a few of these in the hope that you'll see we know of them and if you dream up something new, that you'll first check wether we've heard of it already.\n\n\n\n\nAllow KML, GPX export. This we do enable in the back-end.\n\n\nPublish \ncharging\n alongside battery level. No.\n\n\nAdd temperature to the JSON payload. No.\n\n\nHave the device track a route; we do this in the back-end.\n\n\n\n\nShort term\n\n\n\n\nStability\n\n\nReliability \n#38\n\n\nBattery consumption \n#68\n\n\nEnsure UI has \nCredits\n with URL to Web site \n#41\n\n\nDisable all location services (unload app) \n#74\n\n\nLWT \n#55\n\n\n\n\nMid-term\n\n\n\n\nAdd \"traffic light\" \n#73\n\n\nAdd live \"info\" pane to Apps \n#47\n\n\nRemote-control \n#71\n\n\nAnnotations.\n\n\nClick on pin\n\n\nEnter text string \n\"Restaurante La Comida; wonderful gambas al ajillo\"\n\n\nPUBlish with full \n_location\n and additional \n\"note\" : \"....\"\n (see \nwaypoints\n below)\n\n\n2013-11-22: @mrose has some interesting things to say about Messages on iOS \n#199\n. In particular, screen real-estate should be better organized.\n\n\n\n\nLong-term\n\n\n\n\nAdd presence. Are my friends in the area?\n\n\nNeeds friends/family on same broker\n\n\nNeeds 'standardized' topic names (maybe with Twitter id in topic?)\n\n\nQueue updates on device (with \ntst\n etc) to be PUBlished upon available connection\n\n\nCorner-pegging \n#94\n\n\n\n\nVery-long term, a.k.a. \"Neat ideas\"\n\n\n\n\nPublish incoming phone call (caller-id), \nsubmitted by @bordingnon\n. JPM: Also SMS? Have to force TLS then, at least.\n\n\nRequested in #86: \"app should register a subscriprion (configurable topic) a) if someone sends a text message it should be displayed as popup window b) if someone sends an HTML message it should be opened in a embedded browser\"\n\n\nGeneralized messaging app (see \n#205\n )\n\n\nFind my friends \n#290\n\n\nIndoors edition with iBeacons as requested in \n#296\n\n\n\n\nWaypoints\n\n\nJPM added 2013-11-22: We currently have \"Annotations\" on iOS (see above). I'd like to be able to have an annotation PUBlished to the broker so that m2s (or other processors) can pick it up. I propose the following payload: \n{ \"_type\": \"_waypoint\", \"tst\":\"xx\", \"lat\":\"\ncurrent\n\", \"lon\":\ncurrent\n\", \"text\":\"utf-8 text\" }\n\n\nRemote control\n\n\n\n\nMaybe add remote-control for enabling \"move-mode\" on iOS (https://github.com/binarybucks/mqttitude/issues/139)\n\n\nInteresting idea in \n#227\n: device can change mode (e.g. \nsilent\n, \nairplane mode\n, etc.) depending on location and by listening to a remote-control topic with which it is instructed to switch modes.\n\n\nAdd remote-control for setting waypoints via MQTT", 
            "title": "Ideas"
        }, 
        {
            "location": "/ideas/#ideas", 
            "text": "Over the course of time, we've had people propose a number of ideas for OwnTracks. Some of these we thought excellent, others we thought would maybe sometime be nice to have, and others, well, see for yourself. Be that as it may, this page lists a few of these in the hope that you'll see we know of them and if you dream up something new, that you'll first check wether we've heard of it already.   Allow KML, GPX export. This we do enable in the back-end.  Publish  charging  alongside battery level. No.  Add temperature to the JSON payload. No.  Have the device track a route; we do this in the back-end.", 
            "title": "Ideas"
        }, 
        {
            "location": "/ideas/#short-term", 
            "text": "Stability  Reliability  #38  Battery consumption  #68  Ensure UI has  Credits  with URL to Web site  #41  Disable all location services (unload app)  #74  LWT  #55", 
            "title": "Short term"
        }, 
        {
            "location": "/ideas/#mid-term", 
            "text": "Add \"traffic light\"  #73  Add live \"info\" pane to Apps  #47  Remote-control  #71  Annotations.  Click on pin  Enter text string  \"Restaurante La Comida; wonderful gambas al ajillo\"  PUBlish with full  _location  and additional  \"note\" : \"....\"  (see  waypoints  below)  2013-11-22: @mrose has some interesting things to say about Messages on iOS  #199 . In particular, screen real-estate should be better organized.", 
            "title": "Mid-term"
        }, 
        {
            "location": "/ideas/#long-term", 
            "text": "Add presence. Are my friends in the area?  Needs friends/family on same broker  Needs 'standardized' topic names (maybe with Twitter id in topic?)  Queue updates on device (with  tst  etc) to be PUBlished upon available connection  Corner-pegging  #94", 
            "title": "Long-term"
        }, 
        {
            "location": "/ideas/#very-long-term-aka-neat-ideas", 
            "text": "Publish incoming phone call (caller-id),  submitted by @bordingnon . JPM: Also SMS? Have to force TLS then, at least.  Requested in #86: \"app should register a subscriprion (configurable topic) a) if someone sends a text message it should be displayed as popup window b) if someone sends an HTML message it should be opened in a embedded browser\"  Generalized messaging app (see  #205  )  Find my friends  #290  Indoors edition with iBeacons as requested in  #296   Waypoints  JPM added 2013-11-22: We currently have \"Annotations\" on iOS (see above). I'd like to be able to have an annotation PUBlished to the broker so that m2s (or other processors) can pick it up. I propose the following payload:  { \"_type\": \"_waypoint\", \"tst\":\"xx\", \"lat\":\" current \", \"lon\": current \", \"text\":\"utf-8 text\" }  Remote control   Maybe add remote-control for enabling \"move-mode\" on iOS (https://github.com/binarybucks/mqttitude/issues/139)  Interesting idea in  #227 : device can change mode (e.g.  silent ,  airplane mode , etc.) depending on location and by listening to a remote-control topic with which it is instructed to switch modes.  Add remote-control for setting waypoints via MQTT", 
            "title": "Very-long term, a.k.a. \"Neat ideas\""
        }, 
        {
            "location": "/faq/", 
            "text": "Answers\n\n\nThis is a list of question we really get asked a lot and some answers to these questions.\n\n\n\n\n\n\nCan I have OwnTracks not publish location for a specific period of time?\n\n\nset to manual\n\n\n\n\n\n\nHow can I restart OwnTracks?\n\n\n\n\n\n\nI've moved, but OwnTracks is not reporting my location\n\n\n\n\n\n\nHow do I enable region monitoring? (Waypoints)\n\n\n\n\n\n\nI'm sure I've moved into (or out of) a region, but OwnTracks isn't reporting that.\n\n\n\n\n\n\nWhy are transition events delayed?\n\n\n\n\n\n\nHow can I increase reporting frequency and does that have any negative impact?\n\n\nbattery, data plan\n\n\n\n\n\n\nI have a question\n\n\nWe love questions. Well, sometimes. :-)\nIf you want to ask us a question or desire feedback from other OwnTracks users, visit us at the \nOwnTracks Community\n.\n\n\n\n\n\n\nHow can I report an issue?\n    If you think you've found a bug, please report it on our respective [android] or [ios] issue tracker on Github.", 
            "title": "Answers"
        }, 
        {
            "location": "/faq/#answers", 
            "text": "This is a list of question we really get asked a lot and some answers to these questions.    Can I have OwnTracks not publish location for a specific period of time?  set to manual    How can I restart OwnTracks?    I've moved, but OwnTracks is not reporting my location    How do I enable region monitoring? (Waypoints)    I'm sure I've moved into (or out of) a region, but OwnTracks isn't reporting that.    Why are transition events delayed?    How can I increase reporting frequency and does that have any negative impact?  battery, data plan    I have a question  We love questions. Well, sometimes. :-)\nIf you want to ask us a question or desire feedback from other OwnTracks users, visit us at the  OwnTracks Community .    How can I report an issue?\n    If you think you've found a bug, please report it on our respective [android] or [ios] issue tracker on Github.", 
            "title": "Answers"
        }, 
        {
            "location": "/press/", 
            "text": "Press\n\n\nEnglish\n\n\nGerman\n\n\n\n\nAnwesenheitserkennung reloaded\n\n\nownTracks \n Mosquitto \u2013 Google Latitude-Clon im Eigenbau\n\n\nLatitude im Eigenbau \u2013 volle Kontrolle\n\n\nopenHAB f\u00fcr mehr Datenschutz in der Heimautomatisierung\n mentions OwnTracks\n\n\nopenHAB 1.4: Offenheit und Datenschutz im Fokus des Smart-Home-Projekts", 
            "title": "Press"
        }, 
        {
            "location": "/press/#press", 
            "text": "", 
            "title": "Press"
        }, 
        {
            "location": "/press/#english", 
            "text": "", 
            "title": "English"
        }, 
        {
            "location": "/press/#german", 
            "text": "Anwesenheitserkennung reloaded  ownTracks   Mosquitto \u2013 Google Latitude-Clon im Eigenbau  Latitude im Eigenbau \u2013 volle Kontrolle  openHAB f\u00fcr mehr Datenschutz in der Heimautomatisierung  mentions OwnTracks  openHAB 1.4: Offenheit und Datenschutz im Fokus des Smart-Home-Projekts", 
            "title": "German"
        }
    ]
}