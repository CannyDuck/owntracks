{
    "docs": [
        {
            "location": "/", 
            "text": "OwnTracks\n\n\n\n\n\nOwnTracks is an Open Source project which provides an iOS and an Android app with which your smartphone records its current location. While there are many smartphone apps available which can do that, we think OwnTracks is special.\n\n\n\n\nWhether you want your young child to know where you currently are, or you want to keep track of where you spent your last vacation, or you and a group of friends want to see each other on a map, OwnTracks does that. It consists of an app which runs on your smart phone, and which periodically, publishes a small chunk of data which other OwnTracks users you authorize may see. The big deal here is \nwhich you authorize\n: we are extremely picky about \nthe security features of OwnTracks\n.\n\n\nFrom this point onwards, it gets a bit complicated, but we'll try and ease your way into the world of OwnTracks so you may enjoy it. If you are unsure of something, would like to chat to us or ask questions, join \nour community\n; please feel free to bring any questions or conversation relating to OwnTracks, its usage, or location awareness to that group.\n\n\nWe've made OwnTracks very easy to try out without you having to do very much: our \nPublic\n mode gets you running right away for demonstration purposes. In \nHTTP\n mode, the apps will publish to a HTTP endpoint of your chosing. And next to these two, the full power of OwnTracks is at your disposal if you want to personalize your setup.\n\n\nWe think the best way to get started using OwnTracks is to follow this guide, chapter by chapter, but you certainly may fast-forward or even skip sections you're familiar with. Pressing \nNext\n on each page will guide you (pun!) through the guide.\n\n\nWe'll now move on to explain \nwhat OwnTracks does and how it works\n.", 
            "title": "Intro"
        }, 
        {
            "location": "/guide/whathow/", 
            "text": "What OwnTracks does\n\n\nThe OwnTracks app runs in the background on your Android or iOS device and waits for the smart phone to tell it that the device has moved, whereupon OwnTracks sends out a message with its current coordinates (and a few other things we'll discuss in a moment).\n\n\nWe'd like you to read this bit again:\n\n\n\n\nwaits for the smart phone to tell it that the device has moved\n\n\n\n\nIt is very important to understand that OwnTracks literally waits for the device's operating system to inform it of a movement; only then can OwnTracks react and do something. To make matters even more complicated\n1\n, OwnTracks on Android runs in the background, all the time, whereas on iOS it is \"killed off\" by the operating system and woken up every several hundred seconds, in which it gets a teeny tiny time slot to do its thing.\n\n\nThat's basically all OwnTracks does.\n\n\nMore\n\n\nThat last sentence isn't true. Strike it.\n\n\nOwnTracks does quite a bit more. It shows your location on a map. Wow: big deal, huh? Well, it shows your location and \nthat of your friends\n on a map. Ah: better. It can also detect when you enter or leave a particular region for which \nyou set a so-called waypoint\n. People use this, say, to control some aspect of their home-automation system. (Everybody left home? We can turn the lights off.)\n\n\nOwnTracks also has a pedometer, a.k.a. step counter (on iPhone 5S, 6) which you can query remotely. OwnTracks has support for \niBeacons\n, and it gives you neat notifications when one of your friends gets home so you can phone them over a land-line to plan a get-together.\n\n\nOwnTracks reports the device's battery level remotely so you can add that to your monitoring setup, if you have one. (No worries if you don't -- you probably don't need it then.)\n\n\nAnd finally, though for us this is \nvery\n important, OwnTracks does all this securely.\n\n\nHow OwnTracks works\n\n\nThe OwnTracks apps run on your smart phone (but we've already mentioned that at least once, haven't we?). When the device determines that it's \nmoved\n a significant distance\n1\n, it contacts a server via 3G or WiFi (hopefully one of those is available) and says \"\nhey, I'm here\n\", whereby \"\nhere\n\" is specified with a bit more precision. This server is called a \nbroker\n and the contact is made with an open, lightweight, \nstandardized protocol called MQTT\n. (If you think that's bad it isn't: the protocol you use to surf the Web is called HTTP; does that sound much better?) So the smart phone sends your location (this operation is called \npublish\n in MQTT-speak) to the broker and goes back to sleep until it realizes you've again moved a significant distance whereupon the whole procedure starts anew. This broker is ideally something you provide, but we can help you out to start with by lending you the use of ours, free of charge for a while.\n\n\n\n\nAbove: the general architecture of OwnTracks\n\n\nThe broker receives the data, and then? Well, it can re-distribute it, at your wish. What this basically means is it can forward your location to a friend, \nto a program\n which stores your location in, say, a database, etc. There are plenty of things you can do, and we'll show you some of them later.\n\n\nThe important message here, and we can't repeat this often enough: OwnTracks is designed in such a way as that you can chose what you do with your data. It's \nyours\n.\n\n\nBasic setup\n\n\nOwnTracks used to be difficult to set up particularly because you had to provide the server (called a \nbroker\n, remember?) yourself, but we've gone to great lengths to make it easy for you to try before you'll want to take it upon yourself to do all the setup work.\n\n\nWe'll now cover the \nthree basic scenarios\n.\n\n\n\n\n\n\n\n\n\n\nThis is a relative amount, but you can tune it a bit.", 
            "title": "What it does"
        }, 
        {
            "location": "/guide/whathow/#what-owntracks-does", 
            "text": "The OwnTracks app runs in the background on your Android or iOS device and waits for the smart phone to tell it that the device has moved, whereupon OwnTracks sends out a message with its current coordinates (and a few other things we'll discuss in a moment).  We'd like you to read this bit again:   waits for the smart phone to tell it that the device has moved   It is very important to understand that OwnTracks literally waits for the device's operating system to inform it of a movement; only then can OwnTracks react and do something. To make matters even more complicated 1 , OwnTracks on Android runs in the background, all the time, whereas on iOS it is \"killed off\" by the operating system and woken up every several hundred seconds, in which it gets a teeny tiny time slot to do its thing.  That's basically all OwnTracks does.", 
            "title": "What OwnTracks does"
        }, 
        {
            "location": "/guide/whathow/#more", 
            "text": "That last sentence isn't true. Strike it.  OwnTracks does quite a bit more. It shows your location on a map. Wow: big deal, huh? Well, it shows your location and  that of your friends  on a map. Ah: better. It can also detect when you enter or leave a particular region for which  you set a so-called waypoint . People use this, say, to control some aspect of their home-automation system. (Everybody left home? We can turn the lights off.)  OwnTracks also has a pedometer, a.k.a. step counter (on iPhone 5S, 6) which you can query remotely. OwnTracks has support for  iBeacons , and it gives you neat notifications when one of your friends gets home so you can phone them over a land-line to plan a get-together.  OwnTracks reports the device's battery level remotely so you can add that to your monitoring setup, if you have one. (No worries if you don't -- you probably don't need it then.)  And finally, though for us this is  very  important, OwnTracks does all this securely.", 
            "title": "More"
        }, 
        {
            "location": "/guide/whathow/#how-owntracks-works", 
            "text": "The OwnTracks apps run on your smart phone (but we've already mentioned that at least once, haven't we?). When the device determines that it's  moved  a significant distance 1 , it contacts a server via 3G or WiFi (hopefully one of those is available) and says \" hey, I'm here \", whereby \" here \" is specified with a bit more precision. This server is called a  broker  and the contact is made with an open, lightweight,  standardized protocol called MQTT . (If you think that's bad it isn't: the protocol you use to surf the Web is called HTTP; does that sound much better?) So the smart phone sends your location (this operation is called  publish  in MQTT-speak) to the broker and goes back to sleep until it realizes you've again moved a significant distance whereupon the whole procedure starts anew. This broker is ideally something you provide, but we can help you out to start with by lending you the use of ours, free of charge for a while.   Above: the general architecture of OwnTracks  The broker receives the data, and then? Well, it can re-distribute it, at your wish. What this basically means is it can forward your location to a friend,  to a program  which stores your location in, say, a database, etc. There are plenty of things you can do, and we'll show you some of them later.  The important message here, and we can't repeat this often enough: OwnTracks is designed in such a way as that you can chose what you do with your data. It's  yours .", 
            "title": "How OwnTracks works"
        }, 
        {
            "location": "/guide/whathow/#basic-setup", 
            "text": "OwnTracks used to be difficult to set up particularly because you had to provide the server (called a  broker , remember?) yourself, but we've gone to great lengths to make it easy for you to try before you'll want to take it upon yourself to do all the setup work.  We'll now cover the  three basic scenarios .      This is a relative amount, but you can tune it a bit.", 
            "title": "Basic setup"
        }, 
        {
            "location": "/guide/ui/", 
            "text": "User interface\n\n\nWhile we've gone to a lot of work to get the basic features of OwnTracks on iOS and Android on par, there are quite a number of differences in the user interface as well as in the settings or preferences of the apps on Android and iOS respectively. We won't describe every minute detail here, instead we'll point out certain features of both.\n\n\nMap\n\n\nshot. point out major differences and UI controls\n\n\nPreferences\n\n\nshots\n\n\npublish now\n\n\nshow how to 'publish now' on each", 
            "title": "User interface"
        }, 
        {
            "location": "/guide/ui/#user-interface", 
            "text": "While we've gone to a lot of work to get the basic features of OwnTracks on iOS and Android on par, there are quite a number of differences in the user interface as well as in the settings or preferences of the apps on Android and iOS respectively. We won't describe every minute detail here, instead we'll point out certain features of both.", 
            "title": "User interface"
        }, 
        {
            "location": "/guide/ui/#map", 
            "text": "shot. point out major differences and UI controls", 
            "title": "Map"
        }, 
        {
            "location": "/guide/ui/#preferences", 
            "text": "shots", 
            "title": "Preferences"
        }, 
        {
            "location": "/guide/ui/#publish-now", 
            "text": "show how to 'publish now' on each", 
            "title": "publish now"
        }, 
        {
            "location": "/guide/scenarios/", 
            "text": "Scenarios\n\n\nThere are three basic scenarios we have for you depending on your needs. It'll help if you keep a copy of the \ntechnical terminology\n handy.\n\n\nPublic\n\n\nThe very first time you install OwnTracks it will be configured in \npublic mode\n, and you'll be warned about this when you launch the app. In this mode, the app \"just works\". It connects to our public MQTT broker, and your location is published there anonymously. In the app you'll also see any other public users, although you won't be able to identify them (nor they you): there are, other than the location data, no personal details of any user. The one exception is a couple of pseudo-users we publish magically so that you have something nice to look at.\n\n\n\n\nWe mentioned earlier that this is not a mode in which you want to run OwnTracks; it's basically just a demonstration mode for you to get a feeling for how OwnTracks looks and works. The data published by OwnTracks in this mode is not retained, and we don't store it.\n\n\nUsing \nPublic\n mode means you don't \nhave\n to learn about \nMQTT brokers\n, \ntopics\n, and all the rest of the stuff, but the downside is that you don't get to use any of the neat features \nPrivate\n mode comes with. For example, you can't set up \nfriends\n or configure \nclients to use your data\n for the sole reason that we don't tell you the address or the authentication credentials for \nPublic\n mode. Yep, it's as they say: \nyou get what you pay for\n. :-)\n\n\nWe think it's best you forget about this as quickly as possible and chose one of the other modes.\n\n\nHTTP mode\n\n\nIf you don't want to go to the trouble of \nhosting your own MQTT setup\n, you can use \nHTTP\n mode to publish location data to a \nHTTP server of your chosing\n.\n\n\nPrivate\n\n\nThis is where you say \nadios!\n (or whatever you say in your language when you leave) to us, continue to use our app (still free of charge of course -- it's Open Source), and host everything yourself. And to be honest, that's \nprecisely what we think you should do\n so that you only (and the people you authorize) see where you are. That is the \nOwn\n in OwnTracks: it's \nyour own data\n and you only should see it.\n\n\nIn private mode you're on your own: you \nset up and configure your MQTT broker\n, you configure authentication, and then you configure your OwnTracks apps to connect to your broker. It's not particularly difficult to do, and you have full control over everything you set up.\n\n\nWhat you basically have to do is to\n\n\n\n\nset up an MQTT broker\n\n\nOptionally \nuse existing clients\n to consume OwnTracks data\n\n\nPossibly dig in and \nwrite your own client\n and do really cool stuff!\n\n\n\n\nWe urge you to resist the temptation of using \nprivate mode\n with one of the many public brokers hosted by different organizations. While it \nis\n an easy way out those brokers are publically accessible which means anybody can see where you are if they can identify you. Furthermore, public brokers often don't implement access control, so basically anybody can create a \"location\" update which looks as though it may be yours. Believe us: it'll drive you crazy.\n\n\nIf you need assistance, we may be able to help you on our \nCommunity site\n.\n\n\nYou will now want to \nconfigure a client\n with which you consume the data which is published by OwnTracks, or if you're feeling very brave, why not \nwrite your own client\n?\n\n\nNow it's time to \ndiscuss topics\n.", 
            "title": "Scenarios"
        }, 
        {
            "location": "/guide/scenarios/#scenarios", 
            "text": "There are three basic scenarios we have for you depending on your needs. It'll help if you keep a copy of the  technical terminology  handy.", 
            "title": "Scenarios"
        }, 
        {
            "location": "/guide/scenarios/#public", 
            "text": "The very first time you install OwnTracks it will be configured in  public mode , and you'll be warned about this when you launch the app. In this mode, the app \"just works\". It connects to our public MQTT broker, and your location is published there anonymously. In the app you'll also see any other public users, although you won't be able to identify them (nor they you): there are, other than the location data, no personal details of any user. The one exception is a couple of pseudo-users we publish magically so that you have something nice to look at.   We mentioned earlier that this is not a mode in which you want to run OwnTracks; it's basically just a demonstration mode for you to get a feeling for how OwnTracks looks and works. The data published by OwnTracks in this mode is not retained, and we don't store it.  Using  Public  mode means you don't  have  to learn about  MQTT brokers ,  topics , and all the rest of the stuff, but the downside is that you don't get to use any of the neat features  Private  mode comes with. For example, you can't set up  friends  or configure  clients to use your data  for the sole reason that we don't tell you the address or the authentication credentials for  Public  mode. Yep, it's as they say:  you get what you pay for . :-)  We think it's best you forget about this as quickly as possible and chose one of the other modes.", 
            "title": "Public"
        }, 
        {
            "location": "/guide/scenarios/#http-mode", 
            "text": "If you don't want to go to the trouble of  hosting your own MQTT setup , you can use  HTTP  mode to publish location data to a  HTTP server of your chosing .", 
            "title": "HTTP mode"
        }, 
        {
            "location": "/guide/scenarios/#private", 
            "text": "This is where you say  adios!  (or whatever you say in your language when you leave) to us, continue to use our app (still free of charge of course -- it's Open Source), and host everything yourself. And to be honest, that's  precisely what we think you should do  so that you only (and the people you authorize) see where you are. That is the  Own  in OwnTracks: it's  your own data  and you only should see it.  In private mode you're on your own: you  set up and configure your MQTT broker , you configure authentication, and then you configure your OwnTracks apps to connect to your broker. It's not particularly difficult to do, and you have full control over everything you set up.  What you basically have to do is to   set up an MQTT broker  Optionally  use existing clients  to consume OwnTracks data  Possibly dig in and  write your own client  and do really cool stuff!   We urge you to resist the temptation of using  private mode  with one of the many public brokers hosted by different organizations. While it  is  an easy way out those brokers are publically accessible which means anybody can see where you are if they can identify you. Furthermore, public brokers often don't implement access control, so basically anybody can create a \"location\" update which looks as though it may be yours. Believe us: it'll drive you crazy.  If you need assistance, we may be able to help you on our  Community site .  You will now want to  configure a client  with which you consume the data which is published by OwnTracks, or if you're feeling very brave, why not  write your own client ?  Now it's time to  discuss topics .", 
            "title": "Private"
        }, 
        {
            "location": "/tech/http/", 
            "text": "HTTP\n\n\nAn optional HTTP mode is being implemented. This mode, which is like Private, uses HTTP POST requests to a configurable HTTP endpoint which can bei either HTTP or HTTPS. In this mode:\n\n\n\n\nThe device publishes location data. \"friends\" and their \ncard\ns are a hack which is supported by the Recorder.\n\n\n\n\nFor use with the \nOwnTracks Recorder\n the URL you specify must include parameters for \nusername\n and \ndevicename\n (\n?u=user\nd=device\n), alternatively using the \nX-Limit-U\n and \nX-Limit-D\n headers.\n\n\nThe syntax for the URL is:\n\n\nhttp[s]://[user[:password]@]host[:port]/path\n\n\n\n\nAuthentication to the endpoint is performed with HTTP Basic authentication and, as such, we very strongly recommend the use of TLS (\nhttps://\n scheme).\n\n\nAll publishes which are currently done with MQTT will then be POSTed to the endpoint with exactly the same [JSON][json.md] payload formats.\n\n\nIf the HTTP endpoint is reachable (i.e. it responds with \nany\n status code -- even 5xx), the payload is considered POSTed. In the event that the endpoint is unreachable (e.g. no connectivity), the payload will be queued and posted at a later time.\n\n\nEncryption\n are supported and can be used with HTTP endpoints.\n\n\nIf the endpoint returns a status code 200 it will typically return an empty JSON payload array \n[]\n. The HTTP endpoint may, however, return an array of JSON objects to the OwnTracks device, each of which must be a valid \n_type\n as described in \nJSON\n.\n\n\nThe OwnTracks Recorder supports \nHTTP mode\n out of the box.\n\n\n\n\n\n\n\n\nElement\n\n\nAndroid\n\n\niOS\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nLocation reporting\n\n\nY\n\n\nY\n\n\nThe quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog.\n\n\n\n\n\n\nAnother feature\n\n\nY\n\n\n\n\nLorem ipsum dolor\n\n\n\n\n\n\n\n\nPHP example\n\n\nUsing a simple PHP script which you host, say, on an Apache or nginx server, you can quite easily record locations POSTed from the OwnTracks apps. The following very simple example will fill a database table:\n\n\nmysql\n select * from locations;\n+---------------------+------+-----------+----------+\n| dt                  | tid  | lat       | lon      |\n+---------------------+------+-----------+----------+\n| 2016-02-20 09:16:05 | JJ   | 48.858330 | 2.295130 |\n| 2016-02-20 09:19:49 | JJ   | 48.860430 | 2.294010 |\n+---------------------+------+-----------+----------+\n\n\n\n\n?php\n    # Obtain the JSON payload from an OwnTracks app POSTed via HTTP\n    # and insert into database table.\n\n    header(\nContent-type: application/json\n);\n\n    $payload = file_get_contents(\nphp://input\n);\n    $data =  @json_decode($payload, true);\n\n    if ($data['_type'] == 'location') {\n\n        # CREATE TABLE locations (dt TIMESTAMP, tid CHAR(2), lat DECIMAL(9,6), lon DECIMAL(9,6));\n        $mysqli = new mysqli(\n127.0.0.1\n, \nuser\n, \npassword\n, \ndatabase\n);\n\n        $lat = $data['lat'];\n        $lon = $data['lon'];\n        $tid = $data['tid'];\n\n        $sql = \nINSERT INTO locations (tid, lat, lon) VALUES (?, ?, ?)\n;\n        $stmt = $mysqli-\nprepare($sql);\n        # bind parameters (s = string, i = integer, d = double,  b = blob)\n        $stmt-\nbind_param('sdd', $tid, $lat, $lon);\n        $stmt-\nexecute();\n        $stmt-\nclose();\n    }\n\n    $response = array();\n    print json_encode($response);\n?\n\n\n\n\n\nAssuming the Web server hosting this example is called \nexample.com\n, and assuming the above script is in Jane's home directory's \npublic_html\n saved as \nloc.php\n, the URL you configure in the OwnTracks app would be \nhttp://example.com/~jane/loc.php\n. We \nurge\n you to consider transmitting your data to your Web server securely using TLS and authentication, in which case the URL you use will be along the lines of \nhttps://user:password@example.com/~jane/loc.php\n.\n\n\nThere's lots of other data in the JSON payload from the OwnTracks apps you may be interested in; we urge you to \nstudy the API documentation\n.", 
            "title": "HTTP mode"
        }, 
        {
            "location": "/tech/http/#http", 
            "text": "An optional HTTP mode is being implemented. This mode, which is like Private, uses HTTP POST requests to a configurable HTTP endpoint which can bei either HTTP or HTTPS. In this mode:   The device publishes location data. \"friends\" and their  card s are a hack which is supported by the Recorder.   For use with the  OwnTracks Recorder  the URL you specify must include parameters for  username  and  devicename  ( ?u=user d=device ), alternatively using the  X-Limit-U  and  X-Limit-D  headers.  The syntax for the URL is:  http[s]://[user[:password]@]host[:port]/path  Authentication to the endpoint is performed with HTTP Basic authentication and, as such, we very strongly recommend the use of TLS ( https://  scheme).  All publishes which are currently done with MQTT will then be POSTed to the endpoint with exactly the same [JSON][json.md] payload formats.  If the HTTP endpoint is reachable (i.e. it responds with  any  status code -- even 5xx), the payload is considered POSTed. In the event that the endpoint is unreachable (e.g. no connectivity), the payload will be queued and posted at a later time.  Encryption  are supported and can be used with HTTP endpoints.  If the endpoint returns a status code 200 it will typically return an empty JSON payload array  [] . The HTTP endpoint may, however, return an array of JSON objects to the OwnTracks device, each of which must be a valid  _type  as described in  JSON .  The OwnTracks Recorder supports  HTTP mode  out of the box.     Element  Android  iOS  Meaning      Location reporting  Y  Y  The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy dog.    Another feature  Y   Lorem ipsum dolor     PHP example  Using a simple PHP script which you host, say, on an Apache or nginx server, you can quite easily record locations POSTed from the OwnTracks apps. The following very simple example will fill a database table:  mysql  select * from locations;\n+---------------------+------+-----------+----------+\n| dt                  | tid  | lat       | lon      |\n+---------------------+------+-----------+----------+\n| 2016-02-20 09:16:05 | JJ   | 48.858330 | 2.295130 |\n| 2016-02-20 09:19:49 | JJ   | 48.860430 | 2.294010 |\n+---------------------+------+-----------+----------+  ?php\n    # Obtain the JSON payload from an OwnTracks app POSTed via HTTP\n    # and insert into database table.\n\n    header( Content-type: application/json );\n\n    $payload = file_get_contents( php://input );\n    $data =  @json_decode($payload, true);\n\n    if ($data['_type'] == 'location') {\n\n        # CREATE TABLE locations (dt TIMESTAMP, tid CHAR(2), lat DECIMAL(9,6), lon DECIMAL(9,6));\n        $mysqli = new mysqli( 127.0.0.1 ,  user ,  password ,  database );\n\n        $lat = $data['lat'];\n        $lon = $data['lon'];\n        $tid = $data['tid'];\n\n        $sql =  INSERT INTO locations (tid, lat, lon) VALUES (?, ?, ?) ;\n        $stmt = $mysqli- prepare($sql);\n        # bind parameters (s = string, i = integer, d = double,  b = blob)\n        $stmt- bind_param('sdd', $tid, $lat, $lon);\n        $stmt- execute();\n        $stmt- close();\n    }\n\n    $response = array();\n    print json_encode($response);\n?   Assuming the Web server hosting this example is called  example.com , and assuming the above script is in Jane's home directory's  public_html  saved as  loc.php , the URL you configure in the OwnTracks app would be  http://example.com/~jane/loc.php . We  urge  you to consider transmitting your data to your Web server securely using TLS and authentication, in which case the URL you use will be along the lines of  https://user:password@example.com/~jane/loc.php .  There's lots of other data in the JSON payload from the OwnTracks apps you may be interested in; we urge you to  study the API documentation .", 
            "title": "HTTP"
        }, 
        {
            "location": "/guide/mqtt/", 
            "text": "MQTT\n\n\nSo what's this MQTT thing? Quoting directly \nfrom the horse's mouth\n:\n\n\n\n\nMQTT is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport. It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium. For example, it has been used in sensors communicating to a broker via satellite link, over occasional dial-up connections with healthcare providers, and in a range of home automation and small device scenarios. It is also ideal for mobile applications because of its small size, low power usage, minimised data packets, and efficient distribution of information to one or many receivers\n\n\n\n\nWe've tried, but we couldn't have phrased this better.\n\n\nIt's lightweight. It's easy on a battery. It has a low overhead (important to save on your phone's data plan). And it distributes information to one or more receivers.\n\n\nPub/Sub\n\n\nIn MQTT-speak, clients publish messages, which means they send or transmit them, and other clients subscribe to messages, meaning they receive them. Messages are published on \ntopics\n, and the MQTT server, which is called a \nbroker\n is configured to permit or deny clients doing so.\n\n\nCauldron\n\n\nWe like to imagine that MQTT makes something reminiscent of a large \ncauldron\n available to publishing and subscribing clients. Publishers drop messages which are tagged \nwith topic names\n into the pot, and subscribers can, access-control permitting, slurp these out, store them, create new messages and ladle them back into the pot or simply throw them away after peeking at them. As a small example, assume a client periodically publishes a Celsius temperature measurement to a particular topic, but you want Fahrenheit (incomprehensible that you would, but anyway). You could \ncreate a small client\n which subscribed to the Celsius reading (from the topic, say, \ntemp/celsius\n in the cauldron), converted to Fahrenheit or Kelvin or whatever, and republished the new value to a different topic, say, \ntemp/fahrenheit\n back into the cauldron. It's important to understand that subscribing and receiving an MQTT message does \nnot remove\n it from the broker; the same message is available to all clients which are subscribed at the time the message was published. (So you could have one client doing Fahrenheit conversion and another doing Kelvin.)\n\n\nAnd what does OwnTracks have to do with all of this? Well, the OwnTracks apps are MQTT clients which publish messages (your location) and subscribe to and consume messages (e.g. the locations of \nyour friends\n). OwnTracks' location updates land in the cauldron when the app publishes a location message from which it can be consumed by any number of subscribers to the same \nMQTT broker\n.\n\n\nThere are \na number of clients\n which do that already, and we're even going to show you how you can \ncreate your own client\n for specific purposes.", 
            "title": "MQTT"
        }, 
        {
            "location": "/guide/mqtt/#mqtt", 
            "text": "So what's this MQTT thing? Quoting directly  from the horse's mouth :   MQTT is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport. It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium. For example, it has been used in sensors communicating to a broker via satellite link, over occasional dial-up connections with healthcare providers, and in a range of home automation and small device scenarios. It is also ideal for mobile applications because of its small size, low power usage, minimised data packets, and efficient distribution of information to one or many receivers   We've tried, but we couldn't have phrased this better.  It's lightweight. It's easy on a battery. It has a low overhead (important to save on your phone's data plan). And it distributes information to one or more receivers.", 
            "title": "MQTT"
        }, 
        {
            "location": "/guide/mqtt/#pubsub", 
            "text": "In MQTT-speak, clients publish messages, which means they send or transmit them, and other clients subscribe to messages, meaning they receive them. Messages are published on  topics , and the MQTT server, which is called a  broker  is configured to permit or deny clients doing so.", 
            "title": "Pub/Sub"
        }, 
        {
            "location": "/guide/mqtt/#cauldron", 
            "text": "We like to imagine that MQTT makes something reminiscent of a large  cauldron  available to publishing and subscribing clients. Publishers drop messages which are tagged  with topic names  into the pot, and subscribers can, access-control permitting, slurp these out, store them, create new messages and ladle them back into the pot or simply throw them away after peeking at them. As a small example, assume a client periodically publishes a Celsius temperature measurement to a particular topic, but you want Fahrenheit (incomprehensible that you would, but anyway). You could  create a small client  which subscribed to the Celsius reading (from the topic, say,  temp/celsius  in the cauldron), converted to Fahrenheit or Kelvin or whatever, and republished the new value to a different topic, say,  temp/fahrenheit  back into the cauldron. It's important to understand that subscribing and receiving an MQTT message does  not remove  it from the broker; the same message is available to all clients which are subscribed at the time the message was published. (So you could have one client doing Fahrenheit conversion and another doing Kelvin.)  And what does OwnTracks have to do with all of this? Well, the OwnTracks apps are MQTT clients which publish messages (your location) and subscribe to and consume messages (e.g. the locations of  your friends ). OwnTracks' location updates land in the cauldron when the app publishes a location message from which it can be consumed by any number of subscribers to the same  MQTT broker .  There are  a number of clients  which do that already, and we're even going to show you how you can  create your own client  for specific purposes.", 
            "title": "Cauldron"
        }, 
        {
            "location": "/guide/topics/", 
            "text": "Topics\n\n\nYou now know that \nMQTT\n is a messaging protocol, and that it uses\ntopic names to label messages.  topic names can be structured into multiple\ntopic levels by separating them with a forward slash (\n/\n). topic levels are\nUTF-8 text strings, and almost any character is valid except \n/\n, \n*\n, and \n+\n.\nThe last two are used to address sets of topic names.\n\n\nThe principles during the design of the OwnTracks topic-naming scheme were\n\n\n\n\nhuman readability\n\n\ntraffic minimization\n\n\ngranular access control\n\n\n\n\ntopic name Root\n\n\nTypically an MQTT broker hosts multiple applications. To create a separate name space\nfor OwnTracks we use a topic name root as the beginning of a topic name. Per default\nthis is \nowntracks/\n, but you may choose any other root (e.g. \npeters/locations/\n) or,\nif you prefer, the empty string. In order to change the default behaviour of \nowntracks/\n\ncreate a \npersonalized configuration\n from scratch or, export\nyour current configuration, edit that and re-import to your device. On Android you trigger\nthe import function by opening the \n.otrc\n file in a file manager; on iOS by, say, opening\nthe file in Mail, Dropbox or similar app. The settings which have to be changed are\n\n\npubTopicBase\nsubTopic\n\n\n\n\nDevice name\n\n\nLocations are captured in OwnTracks by devices (e.g. your Smartphone). The\ndevice name forms the second component of the topic name. In order to avoid\nclashes in naming and to simplify subscription and authorization we decided to\nuse two topic levels\n\n\n\n\nThe user name or identifier (e.g. \npeter\n)\n\n\nThe device name (e.g. \niPhone\n)\n\n\n\n\nA typical topic name for a device would therefore be \npeter/iPhone\n. Other\ndevice naming schemes are possible and transparent to OwnTracks (e.g. using\njust one level \npeters-iPhone\n or multiple levels \naFamily/father/iPhone\n), but\nunder any one OwnTracks name root the number of levels used for device names\nhave to the same.\n\n\nBase topic name\n\n\nCombining the topic name root and the device name result in what we call \nbase\ntopic name\n for each device (e.g. \nowntracks/peter/iPhone\n).  The devices label\ntheir location messages with the \nbase topic name\n when publishing to the MQTT\nbroker.\n\n\nSubscribing to location Messages\n\n\nGiven the structure explained above, the topic filter you can use to subscribe to the\nlocation messages of all devices is \nowntracks/+/+\n (the topic name root plus a so-called\nwild card (\n+\n) for each level of the device name.\n\n\nAdditional topic names\n\n\nFor additional communication from and to devices, OwnTracks uses topic names relative\nto the base topic name.\n\n\nDevices listen to the relative topic name \ncmd\n for commands you can publish to\nOwnTracks devices (i.e. \nowntracks/peter/iPhone/cmd\n). For example, if\nauthorized, you could request a location update from a friend's device by\npublishing an \nappropriate payload\n to said topic.\n\n\nThe output of specific OwnTracks commands is published by the device to the\nrelative topic names \nstep\n, \ndump\n, etc.\n\n\nIn addition, devices subscribe to the relative topic name \ninfo\n for information about \nother devices. Messages published with the relative topic name \ninfo\n\n(e.g. \nowntracks/peter/iPhone/info\n) contain a \ncard\n payload -- the name and\navatar of a user with which authorized users can identify, say, Peter within their OwnTracks app.\n\n\nDevices publish their \nwaypoints\n to the relative topic name\n\nwaypoint\n and the corresponding events the transition into or out of a\nwaypoint triggers, to the relative topic name \nevent\n.\n\n\nSummary\n\n\nA device (named \npeter/iPhone\n in this example) is connected to an \nMQTT\nBroker\n with the OwnTracks name Root \nowntracks\n. It publishes\nlocation messages labeled with the topic name \nowntracks/peter/iPhone\n. The\nsame device publishes \nwaypoints\n labeled as\n\nowntracks/peter/iPhone/waypoint\nand publishes to\n\nowntracks/peter/iPhone/event\n when entering or leaving a waypoint (i.e. a monitored region).\n\n\nThe same device subscribes to \nowntracks/+/+\n to receive location messages of all \nother devices it is authorized for which are connected to the same MQTT broker.\nIn addition, the device may listen to \nowntracks/+/+/event\nif the user of the devices\nwants to be informed about other users entering or leaving monitored regions. Subscribing\nto \nowntracks/+/+/info\ngives the device access to additional information about the other\ndevices.\n\n\nIf a device's owner allows other users to ad-hoc request messages from his device,\nthe device will subscribe to \nowntracks/peter/iPhone/cmd\n as well, and it will listen for OwnTracks\ncommands; responses to these commands will be published and labeled \nowntracks/peter/iPhone/dump\n,\n\nowntracks/peter/iPhone/step\n, etc.\n\n\nA full set of supported topic names and expected payloads is documented in \nour JSON API\n.\n\n\nTerms used\n\n\n\n\ntopic name\n\n\nOwnTracks topic name root\n\n\nOwnTracks device name\n\n\nOwnTracks base topic name\n\n\nrelative topic names\n\n\nOwnTracks device\n\n\nOwnTracks user\n\n\nOwnTracks command", 
            "title": "Topics"
        }, 
        {
            "location": "/guide/topics/#topics", 
            "text": "You now know that  MQTT  is a messaging protocol, and that it uses\ntopic names to label messages.  topic names can be structured into multiple\ntopic levels by separating them with a forward slash ( / ). topic levels are\nUTF-8 text strings, and almost any character is valid except  / ,  * , and  + .\nThe last two are used to address sets of topic names.  The principles during the design of the OwnTracks topic-naming scheme were   human readability  traffic minimization  granular access control", 
            "title": "Topics"
        }, 
        {
            "location": "/guide/topics/#topic-name-root", 
            "text": "Typically an MQTT broker hosts multiple applications. To create a separate name space\nfor OwnTracks we use a topic name root as the beginning of a topic name. Per default\nthis is  owntracks/ , but you may choose any other root (e.g.  peters/locations/ ) or,\nif you prefer, the empty string. In order to change the default behaviour of  owntracks/ \ncreate a  personalized configuration  from scratch or, export\nyour current configuration, edit that and re-import to your device. On Android you trigger\nthe import function by opening the  .otrc  file in a file manager; on iOS by, say, opening\nthe file in Mail, Dropbox or similar app. The settings which have to be changed are  pubTopicBase\nsubTopic", 
            "title": "topic name Root"
        }, 
        {
            "location": "/guide/topics/#device-name", 
            "text": "Locations are captured in OwnTracks by devices (e.g. your Smartphone). The\ndevice name forms the second component of the topic name. In order to avoid\nclashes in naming and to simplify subscription and authorization we decided to\nuse two topic levels   The user name or identifier (e.g.  peter )  The device name (e.g.  iPhone )   A typical topic name for a device would therefore be  peter/iPhone . Other\ndevice naming schemes are possible and transparent to OwnTracks (e.g. using\njust one level  peters-iPhone  or multiple levels  aFamily/father/iPhone ), but\nunder any one OwnTracks name root the number of levels used for device names\nhave to the same.", 
            "title": "Device name"
        }, 
        {
            "location": "/guide/topics/#base-topic-name", 
            "text": "Combining the topic name root and the device name result in what we call  base\ntopic name  for each device (e.g.  owntracks/peter/iPhone ).  The devices label\ntheir location messages with the  base topic name  when publishing to the MQTT\nbroker.", 
            "title": "Base topic name"
        }, 
        {
            "location": "/guide/topics/#subscribing-to-location-messages", 
            "text": "Given the structure explained above, the topic filter you can use to subscribe to the\nlocation messages of all devices is  owntracks/+/+  (the topic name root plus a so-called\nwild card ( + ) for each level of the device name.", 
            "title": "Subscribing to location Messages"
        }, 
        {
            "location": "/guide/topics/#additional-topic-names", 
            "text": "For additional communication from and to devices, OwnTracks uses topic names relative\nto the base topic name.  Devices listen to the relative topic name  cmd  for commands you can publish to\nOwnTracks devices (i.e.  owntracks/peter/iPhone/cmd ). For example, if\nauthorized, you could request a location update from a friend's device by\npublishing an  appropriate payload  to said topic.  The output of specific OwnTracks commands is published by the device to the\nrelative topic names  step ,  dump , etc.  In addition, devices subscribe to the relative topic name  info  for information about \nother devices. Messages published with the relative topic name  info \n(e.g.  owntracks/peter/iPhone/info ) contain a  card  payload -- the name and\navatar of a user with which authorized users can identify, say, Peter within their OwnTracks app.  Devices publish their  waypoints  to the relative topic name waypoint  and the corresponding events the transition into or out of a\nwaypoint triggers, to the relative topic name  event .", 
            "title": "Additional topic names"
        }, 
        {
            "location": "/guide/topics/#summary", 
            "text": "A device (named  peter/iPhone  in this example) is connected to an  MQTT\nBroker  with the OwnTracks name Root  owntracks . It publishes\nlocation messages labeled with the topic name  owntracks/peter/iPhone . The\nsame device publishes  waypoints  labeled as owntracks/peter/iPhone/waypoint and publishes to owntracks/peter/iPhone/event  when entering or leaving a waypoint (i.e. a monitored region).  The same device subscribes to  owntracks/+/+  to receive location messages of all \nother devices it is authorized for which are connected to the same MQTT broker.\nIn addition, the device may listen to  owntracks/+/+/event if the user of the devices\nwants to be informed about other users entering or leaving monitored regions. Subscribing\nto  owntracks/+/+/info gives the device access to additional information about the other\ndevices.  If a device's owner allows other users to ad-hoc request messages from his device,\nthe device will subscribe to  owntracks/peter/iPhone/cmd  as well, and it will listen for OwnTracks\ncommands; responses to these commands will be published and labeled  owntracks/peter/iPhone/dump , owntracks/peter/iPhone/step , etc.  A full set of supported topic names and expected payloads is documented in  our JSON API .", 
            "title": "Summary"
        }, 
        {
            "location": "/guide/topics/#terms-used", 
            "text": "topic name  OwnTracks topic name root  OwnTracks device name  OwnTracks base topic name  relative topic names  OwnTracks device  OwnTracks user  OwnTracks command", 
            "title": "Terms used"
        }, 
        {
            "location": "/guide/broker/", 
            "text": "MQTT broker\n\n\nAn MQTT broker is a service to which MQTT clients connect. These clients publish\ndata to specific \ntopics\n and they can subscribe to one or more \ntopics\n to receive\nmessages. A \ntopic\n is like an \"address\" for a particular message. For example,\na topic for a device that publishes a temperature reading of your living room\nmay be \ntemperature/indoors/living\n, whereas a device which publishes weather\ndata could do so to \nweather/germany/frankfurt\n. In the particular case of OwnTracks, we\nuse a topic branch called \nowntracks/username/device\n, but you can override that\nname if you prefer to. The reason we've chosen that structure is to accomodate\nfriends and family on a single broker, taking into consideration that a particular\nuser might have more than one device.\n\n\nPrivate broker\n\n\nIdeally, you set up a private broker under your control. This sounds more difficult\nthan it actually is, and there are some very nice brokers you can use free of charge\non your own infrastructure. As an example, we've written up how to install\nMosquitto on a Raspberry Pi.\n\n\nRasPi\n\n\n\n\nThe hardest bit is installing an OS, say, \nRaspbian Wheezy\n, onto an SD card, but there are many tutorials on how to do that. (Here's an example \nusing Mac OS X\n.) A basic install will suffice, and after logging in with Raspbian's default username and password, we'll get started from there. Note that the current Raspbian Wheezy mosquitto package does NOT contain the \nmosquitto_passwd\n tool. If you want to use it, make sure you install the package from a mosquitto repo:\n\n\nRoger Light, \nMosquitto\n's creator has thankfully (!) set up a few \nMosquitto repositories\n we can use to obtain the latest and greatest version, so we'll do just that. We first perform the required steps to add and activate the repository. The last step in particular can take a few moments.\n\n\ncurl -O http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key\nsudo apt-key add mosquitto-repo.gpg.key\nrm mosquitto-repo.gpg.key\ncd /etc/apt/sources.list.d/\nsudo curl -O http://repo.mosquitto.org/debian/mosquitto-$(awk -F\n[)(]+\n '/VERSION=/ {print $2}' /etc/os-release).list\nsudo apt-get update\n\n\n\n\nNow we can go ahead and install \nMosquitto\n proper. There are three packages:\n\n\n\n\nmosquitto\n is the MQTT broker (i.e. server)\n\n\nmosquitto-clients\n are the command-line clients, which I recommend you install\n\n\nDon't install \npython-mosquitto\n; if you want to do programming with Python and MQTT, we \nshow you how to do so with the Paho Python module\n.\n\n\n\n\nsudo apt-get install mosquitto mosquitto-clients\n\n\n\n\nRegrettably, as with most Debian packages, the broker is immediately started; stop it.\n\n\nsudo /etc/init.d/mosquitto stop\n\n\n\n\nThat concludes the installation of the \nMosquitto\n MQTT broker, and we'll now proceed to\nits configuration. This section is geared towards a configuration of \nMosquitto\n which will\nwork well with OwnTracks. In particular we want the following features enabled\nby default:\n\n\n\n\nConnections to the broker must be authenticated either against user/password or using client certificates.\n\n\nConnections to the broker shall also be \nTLS\n protected. This requires a (server-side) TLS certificate and key which will be configured automatically.\n\n\nACLs will restrict who may access what.\n\n\n\n\nTo create a \nmosquitto\n user database, use \nsudo mosquitto_passwd -c /etc/mosquitto/passwd \nusername\n.\n\n\nYou will be prompted to enter a password. That will be the password required to connect to the server (with the username you chose). If you want to add more users, repeat the command without \n-c\n as that will create (i.e. overwrite) the passwd file.\nAdd a config line \npassword_file /etc/mosquitto/passwd\n to \n/etc/mosquitto/mosquitto.conf\n.\n\n\nIf you want to use certificates to identify yourself to the broker and/or to TLS-encrypt the TCP session, we've got some utilities over at the \nOwnTracks repository\n which are going to automate this process for you. It's a work-in-progress (of course), but this is what \nsudo ./mosquitto-setup.sh\n looks like at the moment:\n\n\nSaving previous configuration as mosquitto.conf-20130901-133525\nGenerating a 2048 bit RSA private key\n.................................................................................................+++\n...............................+++\nwriting new private key to '/etc/mosquitto/ca.key'\n-----\nCreated CA certificate in /etc/mosquitto/ca.crt\nsubject=\n    commonName                = An MQTT broker\n    organizationName          = MQTTitude.org\n    emailAddress              = nobody@example.net\n--- Creating server key and signing request\nGenerating RSA private key, 2048 bit long modulus\n............+++\n..............+++\ne is 65537 (0x10001)\n--- Creating and signing server certificate\nSignature ok\nsubject=/CN=raspberrypi/O=MQTTitude.org/emailAddress=nobody@example.net\nGetting CA Private Key\n\n\n\n\nA CA is created together with a server key-pair with a whole bunch of \nsubjAltName\n\nsettings:\n\n\n    X509v3 Subject Alternative Name:\n        IP Address:192.168.1.189, IP Address:127.0.0.1, IP Address:0:0:0:0:0:0:0:1, DNS:broker.example.com, DNS:foo.example.de, DNS:localhost\n\n\n\n\nCheck for a couple of broker settings in \n/etc/mosquitto/mosquitto.conf\n.\nYour mileage may vary, but you might want to set the following parameters:\n\n\nlistener 8883 \nyourIP\n\npersistence_file mosquitto.db\nlog_dest syslog\nlog_dest stdout\nlog_dest topic\nlog_type error\nlog_type warning\nlog_type notice\nlog_type information\nconnection_messages true\nlog_timestamp true\nallow_anonymous false\npassword_file /etc/mosquitto/passwd\n\n\n\n\nWill it work? Let's start the broker manually to see what it says:\n\n\nsudo /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf\n1378042632: mosquitto version 1.2 (build date 2013-08-09 21:49:03+0100) starting\n1378042632: Config loaded from /etc/mosquitto/mosquitto.conf.\n1378042632: Opening ipv4 listen socket on port 1883.\n1378042632: Opening ipv4 listen socket on port 8883.\n1378042632: Opening ipv6 listen socket on port 8883.\n1378042632: Warning: Address family not supported by protocol\n...^C\n1378042634: mosquitto version 1.2 terminating\n1378042634: Saving in-memory database to /tmp/mosquitto.db.\n\n\n\n\nThe Mosquitto clients need to have access to a copy of the CA certificate (\nca.crt\n) and you can transport that insecurely to your clients (it's a public certificate).\n\n\nmosquitto_pub  --cafile ca.crt -h 127.0.0.1 -p 8883  ...\n\n\n\n\nThat's it for the moment. \n\n\nTesting\n\n\nOnce you've chosen an MQTT broker, make sure you feel comfortable with the\nutilities it provides to subscribe and publish to topics. We recommend the\n\nMosquitto\n utilities for doing so.\n\n\nFor example, to subscribe to all topics prefixed by \nowntracks\n on your broker:\n\n\nmosquitto_sub -h hostname -p 1883 -v -t 'owntracks/#'\n\n\n\n\n(Note that the hash symbol has to be quoted in the shell which is why we've put\nthe whole topic branch in single quotes.)\n\n\nIn another screen you could publish a test message:\n\n\nmosquitto_pub -h hostname -p 1883 -t 'owntracks/test' -m 'hello world'\n\n\n\n\nand in the first screen you'd see the topic name followed by a space and the message\n\npayload\n.\n\n\nOnce you feel comfortable with what is going on, you should consider adding \nTLS\n.\n\n\nBridging\n\n\nIf you want to connect two (or more) brokers (e.g. yours and that of your friend) you can, and we've written up \nhow you can bridge brokers\n.\n\n\nLogging\n\n\nBefore doing anything else, please consult the manual to determine where your Mosquitto logs are being written to. It's hard stabbing around in the dark when a glance at a log file can give you valuable tips on what is actually happening.\n\n\nMosquitto typically logs via \nsyslog\n, and \nsyslog\n's configuration defines where the log messages are actually written to. Your \nsyslog\n may be called \nsyslog\n, \nrsyslog\n, \nsyslog-ng\n, or anything else for that matter. In case of doubt, check the files in \n/var/log\n; one of them \nought\n to have what you're looking for (e..g \nmessages\n, \nsyslog\n, \nlocalmessages\n, or even \ndebugmessages\n).\n\n\nMosquitto typically logs each connection request, a publish, a subscribe request, etc. (Read the \nmanpage for \nmosquitto.conf\n to learn how to configure logging.\n\n\nA successful publish of an OwnTracks location could look somewhat like this:\n\n\nmosquitto[1366]: Received PUBLISH from jane-5s-m-o (d0, q2, r1, m7, 'owntracks/jane/5s', ... (159 bytes))\nmosquitto[1366]: Sending PUBREC to jane-5s-m-o (Mid: 7)\nmosquitto[1366]: Received PUBREL from jane-5s-m-o (Mid: 7)\nmosquitto[1366]: Sending PUBCOMP to jane-5s-m-o (Mid: 7)\n\n\n\n\nACLs\n\n\nYou will definitely want to set up Access Control Lists (ACLs) on your broker so that you can control who may see what. As an example, suppose Jane (username \njjolie\n) should be able to publish to her \nOwnTracks MQTT topics\n and Fred (username \nfred\n) should be allowed to see Jane's location, we could configure something like this:\n\n\nuser jjolie\ntopic owntracks/jjolie/#\n\nuser fred\ntopic read owntracks/jjolie/5s\ntopic owntracks/fred/nexus/#\n\n\n\n\nFirewall\n\n\nIf you want to run your \nPrivate\n broker it's possibly going to be at home under your desk (or is it in your small office?). Be that as it may, how does an OwnTracks app reach (network-wise) that broker?  Chances are you have some form of router which connects the local network in your home to the Internet.\n\n\nOwnTracks runs on the device which is in your pocket or your purse, or wherever you placed it, and it must be able to connect to your MQTT broker, but it cannot: your router hopefully has a firewall configured on it which will allow outgoing (from your home outwards) connections, but it is sure to not allow incoming connections. We must change that, at least for MQTT, and we're going to assume you've configured TLS, i.e. your broker is (also) listening on TCP port 8883\n\n\nWhat you need to do to get this working is to reconfigure your router to allow incoming TCP traffic on port 8883 and to hand that off to the TCP/IP address of your MQTT broker. The exact details on how to do that vary from vendor to vendor, but a close look at the documentation of your router should show you how to do that.\n\n\nWhat is also likely, or at least possible, is that your home doesn't have a fixed TCP/IP address, but one which changes periodically. The OwnTracks apps won't be able to find your home then, will they? If you keep \"moving\" (i.e changing addresses).\n\n\nA service which is typically (if maybe incorrectly) called dynamic DNS comes to the rescue. These services allow you to configure a DNS name (e.g. \nfreds-router.example.org\n) which points to the changing IP address of your router.\n\n\nOnce you've completed those steps, configure the OwnTracks apps to use the shiny new DNS name and TCP port number (8883) and you should be all set.\n\n\nOwnTracks\n\n\nSo, you've configured your broker and you are familiar with the \nmosquitto\n command-line\nclients, so now it's time to see if you can \nget OwnTracks to speak to your broker\n.", 
            "title": "Broker"
        }, 
        {
            "location": "/guide/broker/#mqtt-broker", 
            "text": "An MQTT broker is a service to which MQTT clients connect. These clients publish\ndata to specific  topics  and they can subscribe to one or more  topics  to receive\nmessages. A  topic  is like an \"address\" for a particular message. For example,\na topic for a device that publishes a temperature reading of your living room\nmay be  temperature/indoors/living , whereas a device which publishes weather\ndata could do so to  weather/germany/frankfurt . In the particular case of OwnTracks, we\nuse a topic branch called  owntracks/username/device , but you can override that\nname if you prefer to. The reason we've chosen that structure is to accomodate\nfriends and family on a single broker, taking into consideration that a particular\nuser might have more than one device.", 
            "title": "MQTT broker"
        }, 
        {
            "location": "/guide/broker/#private-broker", 
            "text": "Ideally, you set up a private broker under your control. This sounds more difficult\nthan it actually is, and there are some very nice brokers you can use free of charge\non your own infrastructure. As an example, we've written up how to install\nMosquitto on a Raspberry Pi.", 
            "title": "Private broker"
        }, 
        {
            "location": "/guide/broker/#raspi", 
            "text": "The hardest bit is installing an OS, say,  Raspbian Wheezy , onto an SD card, but there are many tutorials on how to do that. (Here's an example  using Mac OS X .) A basic install will suffice, and after logging in with Raspbian's default username and password, we'll get started from there. Note that the current Raspbian Wheezy mosquitto package does NOT contain the  mosquitto_passwd  tool. If you want to use it, make sure you install the package from a mosquitto repo:  Roger Light,  Mosquitto 's creator has thankfully (!) set up a few  Mosquitto repositories  we can use to obtain the latest and greatest version, so we'll do just that. We first perform the required steps to add and activate the repository. The last step in particular can take a few moments.  curl -O http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key\nsudo apt-key add mosquitto-repo.gpg.key\nrm mosquitto-repo.gpg.key\ncd /etc/apt/sources.list.d/\nsudo curl -O http://repo.mosquitto.org/debian/mosquitto-$(awk -F [)(]+  '/VERSION=/ {print $2}' /etc/os-release).list\nsudo apt-get update  Now we can go ahead and install  Mosquitto  proper. There are three packages:   mosquitto  is the MQTT broker (i.e. server)  mosquitto-clients  are the command-line clients, which I recommend you install  Don't install  python-mosquitto ; if you want to do programming with Python and MQTT, we  show you how to do so with the Paho Python module .   sudo apt-get install mosquitto mosquitto-clients  Regrettably, as with most Debian packages, the broker is immediately started; stop it.  sudo /etc/init.d/mosquitto stop  That concludes the installation of the  Mosquitto  MQTT broker, and we'll now proceed to\nits configuration. This section is geared towards a configuration of  Mosquitto  which will\nwork well with OwnTracks. In particular we want the following features enabled\nby default:   Connections to the broker must be authenticated either against user/password or using client certificates.  Connections to the broker shall also be  TLS  protected. This requires a (server-side) TLS certificate and key which will be configured automatically.  ACLs will restrict who may access what.   To create a  mosquitto  user database, use  sudo mosquitto_passwd -c /etc/mosquitto/passwd  username .  You will be prompted to enter a password. That will be the password required to connect to the server (with the username you chose). If you want to add more users, repeat the command without  -c  as that will create (i.e. overwrite) the passwd file.\nAdd a config line  password_file /etc/mosquitto/passwd  to  /etc/mosquitto/mosquitto.conf .  If you want to use certificates to identify yourself to the broker and/or to TLS-encrypt the TCP session, we've got some utilities over at the  OwnTracks repository  which are going to automate this process for you. It's a work-in-progress (of course), but this is what  sudo ./mosquitto-setup.sh  looks like at the moment:  Saving previous configuration as mosquitto.conf-20130901-133525\nGenerating a 2048 bit RSA private key\n.................................................................................................+++\n...............................+++\nwriting new private key to '/etc/mosquitto/ca.key'\n-----\nCreated CA certificate in /etc/mosquitto/ca.crt\nsubject=\n    commonName                = An MQTT broker\n    organizationName          = MQTTitude.org\n    emailAddress              = nobody@example.net\n--- Creating server key and signing request\nGenerating RSA private key, 2048 bit long modulus\n............+++\n..............+++\ne is 65537 (0x10001)\n--- Creating and signing server certificate\nSignature ok\nsubject=/CN=raspberrypi/O=MQTTitude.org/emailAddress=nobody@example.net\nGetting CA Private Key  A CA is created together with a server key-pair with a whole bunch of  subjAltName \nsettings:      X509v3 Subject Alternative Name:\n        IP Address:192.168.1.189, IP Address:127.0.0.1, IP Address:0:0:0:0:0:0:0:1, DNS:broker.example.com, DNS:foo.example.de, DNS:localhost  Check for a couple of broker settings in  /etc/mosquitto/mosquitto.conf .\nYour mileage may vary, but you might want to set the following parameters:  listener 8883  yourIP \npersistence_file mosquitto.db\nlog_dest syslog\nlog_dest stdout\nlog_dest topic\nlog_type error\nlog_type warning\nlog_type notice\nlog_type information\nconnection_messages true\nlog_timestamp true\nallow_anonymous false\npassword_file /etc/mosquitto/passwd  Will it work? Let's start the broker manually to see what it says:  sudo /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf\n1378042632: mosquitto version 1.2 (build date 2013-08-09 21:49:03+0100) starting\n1378042632: Config loaded from /etc/mosquitto/mosquitto.conf.\n1378042632: Opening ipv4 listen socket on port 1883.\n1378042632: Opening ipv4 listen socket on port 8883.\n1378042632: Opening ipv6 listen socket on port 8883.\n1378042632: Warning: Address family not supported by protocol\n...^C\n1378042634: mosquitto version 1.2 terminating\n1378042634: Saving in-memory database to /tmp/mosquitto.db.  The Mosquitto clients need to have access to a copy of the CA certificate ( ca.crt ) and you can transport that insecurely to your clients (it's a public certificate).  mosquitto_pub  --cafile ca.crt -h 127.0.0.1 -p 8883  ...  That's it for the moment.", 
            "title": "RasPi"
        }, 
        {
            "location": "/guide/broker/#testing", 
            "text": "Once you've chosen an MQTT broker, make sure you feel comfortable with the\nutilities it provides to subscribe and publish to topics. We recommend the Mosquitto  utilities for doing so.  For example, to subscribe to all topics prefixed by  owntracks  on your broker:  mosquitto_sub -h hostname -p 1883 -v -t 'owntracks/#'  (Note that the hash symbol has to be quoted in the shell which is why we've put\nthe whole topic branch in single quotes.)  In another screen you could publish a test message:  mosquitto_pub -h hostname -p 1883 -t 'owntracks/test' -m 'hello world'  and in the first screen you'd see the topic name followed by a space and the message payload .  Once you feel comfortable with what is going on, you should consider adding  TLS .", 
            "title": "Testing"
        }, 
        {
            "location": "/guide/broker/#bridging", 
            "text": "If you want to connect two (or more) brokers (e.g. yours and that of your friend) you can, and we've written up  how you can bridge brokers .", 
            "title": "Bridging"
        }, 
        {
            "location": "/guide/broker/#logging", 
            "text": "Before doing anything else, please consult the manual to determine where your Mosquitto logs are being written to. It's hard stabbing around in the dark when a glance at a log file can give you valuable tips on what is actually happening.  Mosquitto typically logs via  syslog , and  syslog 's configuration defines where the log messages are actually written to. Your  syslog  may be called  syslog ,  rsyslog ,  syslog-ng , or anything else for that matter. In case of doubt, check the files in  /var/log ; one of them  ought  to have what you're looking for (e..g  messages ,  syslog ,  localmessages , or even  debugmessages ).  Mosquitto typically logs each connection request, a publish, a subscribe request, etc. (Read the  manpage for  mosquitto.conf  to learn how to configure logging.  A successful publish of an OwnTracks location could look somewhat like this:  mosquitto[1366]: Received PUBLISH from jane-5s-m-o (d0, q2, r1, m7, 'owntracks/jane/5s', ... (159 bytes))\nmosquitto[1366]: Sending PUBREC to jane-5s-m-o (Mid: 7)\nmosquitto[1366]: Received PUBREL from jane-5s-m-o (Mid: 7)\nmosquitto[1366]: Sending PUBCOMP to jane-5s-m-o (Mid: 7)", 
            "title": "Logging"
        }, 
        {
            "location": "/guide/broker/#acls", 
            "text": "You will definitely want to set up Access Control Lists (ACLs) on your broker so that you can control who may see what. As an example, suppose Jane (username  jjolie ) should be able to publish to her  OwnTracks MQTT topics  and Fred (username  fred ) should be allowed to see Jane's location, we could configure something like this:  user jjolie\ntopic owntracks/jjolie/#\n\nuser fred\ntopic read owntracks/jjolie/5s\ntopic owntracks/fred/nexus/#", 
            "title": "ACLs"
        }, 
        {
            "location": "/guide/broker/#firewall", 
            "text": "If you want to run your  Private  broker it's possibly going to be at home under your desk (or is it in your small office?). Be that as it may, how does an OwnTracks app reach (network-wise) that broker?  Chances are you have some form of router which connects the local network in your home to the Internet.  OwnTracks runs on the device which is in your pocket or your purse, or wherever you placed it, and it must be able to connect to your MQTT broker, but it cannot: your router hopefully has a firewall configured on it which will allow outgoing (from your home outwards) connections, but it is sure to not allow incoming connections. We must change that, at least for MQTT, and we're going to assume you've configured TLS, i.e. your broker is (also) listening on TCP port 8883  What you need to do to get this working is to reconfigure your router to allow incoming TCP traffic on port 8883 and to hand that off to the TCP/IP address of your MQTT broker. The exact details on how to do that vary from vendor to vendor, but a close look at the documentation of your router should show you how to do that.  What is also likely, or at least possible, is that your home doesn't have a fixed TCP/IP address, but one which changes periodically. The OwnTracks apps won't be able to find your home then, will they? If you keep \"moving\" (i.e changing addresses).  A service which is typically (if maybe incorrectly) called dynamic DNS comes to the rescue. These services allow you to configure a DNS name (e.g.  freds-router.example.org ) which points to the changing IP address of your router.  Once you've completed those steps, configure the OwnTracks apps to use the shiny new DNS name and TCP port number (8883) and you should be all set.", 
            "title": "Firewall"
        }, 
        {
            "location": "/guide/broker/#owntracks", 
            "text": "So, you've configured your broker and you are familiar with the  mosquitto  command-line\nclients, so now it's time to see if you can  get OwnTracks to speak to your broker .", 
            "title": "OwnTracks"
        }, 
        {
            "location": "/guide/apps/", 
            "text": "OwnTracks apps\n\n\nThe OwnTracks apps operate in one of three modes (discussed in \nscenarios\n), and you tell the app in which mode you want to use it.\n\n\nPublic\n mode is the easiest: you don't have to configure anything.\n\n\nIn \nPrivate\n mode, you configure our iOS and Android app to access your broker.\n\n\niOS\n\n\n\n\nAndroid\n\n\n\n\nThere are other \nclients\n you can use with OwnTracks.", 
            "title": "Apps"
        }, 
        {
            "location": "/guide/apps/#owntracks-apps", 
            "text": "The OwnTracks apps operate in one of three modes (discussed in  scenarios ), and you tell the app in which mode you want to use it.  Public  mode is the easiest: you don't have to configure anything.  In  Private  mode, you configure our iOS and Android app to access your broker.", 
            "title": "OwnTracks apps"
        }, 
        {
            "location": "/guide/apps/#ios", 
            "text": "", 
            "title": "iOS"
        }, 
        {
            "location": "/guide/apps/#android", 
            "text": "There are other  clients  you can use with OwnTracks.", 
            "title": "Android"
        }, 
        {
            "location": "/guide/clients/", 
            "text": "Clients\n\n\nUsing our OwnTracks app is cool, but what do you do with the location data the apps send (i.e. \npublish\n) to the MQTT broker? We have some suggestions. (Do remember however, that you cannot do this in \npublic mode\n.)\n\n\nYou know that OwnTracks \npublishes\n location information to an MQTT \nbroker\n. The data it publishes is transferred in a particular format called \nJSON\n, and \nthis is what it looks like\n.\n\n\nWhen you've got your broker set up, and OwnTracks configured to use it, you'll want to do something useful with the data, and the following sections introduce you to some of the existing clients you can utilitze for doing that.\n\n\nmosquitto_sub\n\n\nmosquitto_sub\n is a very basic command-line client provided by the \nMosquitto project\n. However, it is brilliantly useful, and you can also use it for long-time collection of data by having it run in the background with \nstdout\n pointing to a file.\n\n\nIn it's most basic invocation, you have the program connect to your broker and subscribe to the topics you're interested in.\n\n\nmosquitto_sub -h localhost -p 1883 -v -t 'owntracks/#'\n\n\n\n\nmosquitto_sub\n and it's counterpart, \nmosquitto_pub\n for publishing to a broker, support a slew of options. It'll be worth your while to study their \nmanual page\n.\n\n\nRecorder\n\n\nWe recommend our very own \nOwnTracks Recorder\n because it's lightweight, relatively simple to set up, and because it offers a lot of features. It stores location data published by the apps by subscribing to an MQTT broker, and it enables you to access that data in a variety of formats. The best part is: it doesn't require a heavy external database of any kind.\n\n\n\n\nRead \nmore about the Recorder\n.\n\n\no2s\n\n\nOne of the clients we provide as part of the Open Source OwnTracks project is called \no2s\n; the strange name stands for \nOwnTracks to Storage\n, and you can use this connected to your \nMQTT broker\n in \nPrivate mode\n, if you need a MySQL or PostgreSQL database. (We do recommend, however, that you use our \nRecorder\n (see above).)\n\n\nCorrectly configured (and it's not trivial), \no2s\n connects to your broker and subscribes to location messages and other \nOwnTracks payloads\n. Upon receiving a location update, \no2s\n will do a number of things:\n\n\n\n\nPerform a reverse-geo lookup (using your choice of either Google or XXX to do so) for the geographical coordinates received from the OwnTracks app\n\n\nStore the message and its details into a database (MySQL and PostgreSQL are supported)\n\n\nAlert via (future) plugins that a geographical region (\nwaypoint\n) has been entered or left\n\n\n\n\nThe result of using \no2s\n is that you get a database table (several actually) in which your OwnTracks locations are stored.\n\n\n+---------------------+-----+------------+------------+------+--------------------------------------+\n| tst                 | tid | lat        | lon        | cc   | addr                                 |\n+---------------------+-----+------------+------------+------+--------------------------------------+\n| 2015-05-27 06:23:36 | jJ  | 46.7835540 | 17.2073088 | HU   | Keszthely, H\u00e9v\u00edzi \u00fat, 8360 Ungarn    |\n| 2015-05-26 20:10:52 | jJ  | 46.7710135 | 17.1829915 | HU   | Als\u00f3p\u00e1hok, 760, 8394 Ungarn          |\n| 2015-05-26 14:32:50 | jJ  | 46.9557636 | 19.4132377 | HU   | Kerekegyh\u00e1za, 5211, 6041 Ungarn      |\n| 2015-05-23 22:42:27 | jJ  | 47.4986630 | 19.0438124 | HU   | Budapest, E\u00f6tv\u00f6s t\u00e9r, 1051 Ungarn    |\n+---------------------+-----+------------+------------+------+--------------------------------------+\n\n\n\n\nSo, now that you have the OwnTracks locations being neatly stored for you, how do you visualize them on, say, a map, at a later point in time? Enter \nPista\n.\n\n\nPista\n\n\nPista\n is a word which signifies \ntrack\n in Spanish and in Italian. It is, unfortunately, a very difficult bit of software to get installed, but we'll try to help you. \nPista\n contains a whole kitchen-sink of features, most of which you won't need to use with our OwnTracks apps. (These features were built for the OwnTracks Greenwich devices.)\n\n\nmqttwarn\n\n\nYou'll recall (we hope) the discussion on \nMQTT\n and the analogy with the cauldron. \nmqttwarn\n, while not specific to OwnTracks, is another client you connect to your \nMQTT broker\n. We think it's worth mentioning (and both Ben and JP -- the creators -- are quite pleased with what it does).\n\n\nmqttwarn\n lets you do things like tweet everytime OwnTracks reports a location (but do consider whether you \nreally\n want that), send an e-mail when a loved one enters a particular region, etc.\n\n\nopenHAB\n\n\nPresence detection in home automation is one of the most important pieces of the puzzle. Without it your smart home is effectively blind, and as a result can hardly be called 'smart' at all. There are very few automation rules that do not require some form of context in terms of human occupancy. Rules around security, lighting, music, even coffee machines -- all need to know if 'someone' is home before deciding whether to take action. \n\n\nThis is where OwnTracks steps in. In its simplest form it can be configured with waypoints (for home/work etc) that generate events whenever your phone enters/leaves these regions. These are sent to your own personal \nMQTT broker\n where your home automation software can react accordingly. The beauty of OwnTracks is two-fold - it is simple, you can disable the standard location reporting so all you get is the waypoint event/leave events, which is all your smart home cares about. The second is that, in \nprivate mode\n, all your data is 'yours' and yours alone - there is no cloud service collecting, storing and potentially mining your data. \n\n\nRead more about \nopenHAB and OwnTracks\n.\n\n\nHome Assistant\n\n\nAnother home automation solution that can be used with OwnTracks is Home Assistant. Home Assistant allows you to track the location of people connected to your personal \nMQTT broker\n. It has a map to show their current location and can trigger automations based on entering and leaving zones.\n\n\nSee the \ndemo\n for an example of the map with OwnTracks devices or read more about how Home Assistant \nconnects to your private MQTT broker\n, how to \nenable OwnTracks support in Home Assistant\n and how to \nconfigure automations based on zones\n.\n\n\nRoll your own\n\n\nIf you feel really brave, you can \nwrite your own program\n which subscribes to OwnTracks data, but don't forget to tell us about it!\n\n\nRelated\n\n\nHere are some projects we know of which use and/or integrate OwnTracks and/or\nwhich are useful when using MQTT in general or OwnTracks in particular.\n\n\n\n\nMQTT Inspector for iOS\n, written by Christoph Krey, who also did our OwnTracks for iOS app. This is an indispensible utility for all things MQTT.\n\n\nthe thing system\n ( \ncode\n )\n\n\nA Clojure webapp that aims to manage information gathered from OwnTracks; \nclojure-mqttitude-backend\n\n\nAn \nOwnTracks flow\n by \nGiovanni @juzam Angoli\n for Node-RED which publishes messages to \npushover.net\n upon entering or leaving a geo-fence.\n\n\nMyMQTT\n is an app for Android which enables you to subscribe and publish to an MQTT broker.\n\n\nStefano Costa cooks Italian pasta \nusing OwnTracks\n.\n\n\nMatthew Bordignon made a small \nWeb page which uses Websockets to display the barometer reading\n published by OwnTracks for iOS. (\nScreenshot\n.)", 
            "title": "Clients"
        }, 
        {
            "location": "/guide/clients/#clients", 
            "text": "Using our OwnTracks app is cool, but what do you do with the location data the apps send (i.e.  publish ) to the MQTT broker? We have some suggestions. (Do remember however, that you cannot do this in  public mode .)  You know that OwnTracks  publishes  location information to an MQTT  broker . The data it publishes is transferred in a particular format called  JSON , and  this is what it looks like .  When you've got your broker set up, and OwnTracks configured to use it, you'll want to do something useful with the data, and the following sections introduce you to some of the existing clients you can utilitze for doing that.", 
            "title": "Clients"
        }, 
        {
            "location": "/guide/clients/#mosquitto_sub", 
            "text": "mosquitto_sub  is a very basic command-line client provided by the  Mosquitto project . However, it is brilliantly useful, and you can also use it for long-time collection of data by having it run in the background with  stdout  pointing to a file.  In it's most basic invocation, you have the program connect to your broker and subscribe to the topics you're interested in.  mosquitto_sub -h localhost -p 1883 -v -t 'owntracks/#'  mosquitto_sub  and it's counterpart,  mosquitto_pub  for publishing to a broker, support a slew of options. It'll be worth your while to study their  manual page .", 
            "title": "mosquitto_sub"
        }, 
        {
            "location": "/guide/clients/#recorder", 
            "text": "We recommend our very own  OwnTracks Recorder  because it's lightweight, relatively simple to set up, and because it offers a lot of features. It stores location data published by the apps by subscribing to an MQTT broker, and it enables you to access that data in a variety of formats. The best part is: it doesn't require a heavy external database of any kind.   Read  more about the Recorder .", 
            "title": "Recorder"
        }, 
        {
            "location": "/guide/clients/#o2s", 
            "text": "One of the clients we provide as part of the Open Source OwnTracks project is called  o2s ; the strange name stands for  OwnTracks to Storage , and you can use this connected to your  MQTT broker  in  Private mode , if you need a MySQL or PostgreSQL database. (We do recommend, however, that you use our  Recorder  (see above).)  Correctly configured (and it's not trivial),  o2s  connects to your broker and subscribes to location messages and other  OwnTracks payloads . Upon receiving a location update,  o2s  will do a number of things:   Perform a reverse-geo lookup (using your choice of either Google or XXX to do so) for the geographical coordinates received from the OwnTracks app  Store the message and its details into a database (MySQL and PostgreSQL are supported)  Alert via (future) plugins that a geographical region ( waypoint ) has been entered or left   The result of using  o2s  is that you get a database table (several actually) in which your OwnTracks locations are stored.  +---------------------+-----+------------+------------+------+--------------------------------------+\n| tst                 | tid | lat        | lon        | cc   | addr                                 |\n+---------------------+-----+------------+------------+------+--------------------------------------+\n| 2015-05-27 06:23:36 | jJ  | 46.7835540 | 17.2073088 | HU   | Keszthely, H\u00e9v\u00edzi \u00fat, 8360 Ungarn    |\n| 2015-05-26 20:10:52 | jJ  | 46.7710135 | 17.1829915 | HU   | Als\u00f3p\u00e1hok, 760, 8394 Ungarn          |\n| 2015-05-26 14:32:50 | jJ  | 46.9557636 | 19.4132377 | HU   | Kerekegyh\u00e1za, 5211, 6041 Ungarn      |\n| 2015-05-23 22:42:27 | jJ  | 47.4986630 | 19.0438124 | HU   | Budapest, E\u00f6tv\u00f6s t\u00e9r, 1051 Ungarn    |\n+---------------------+-----+------------+------------+------+--------------------------------------+  So, now that you have the OwnTracks locations being neatly stored for you, how do you visualize them on, say, a map, at a later point in time? Enter  Pista .", 
            "title": "o2s"
        }, 
        {
            "location": "/guide/clients/#pista", 
            "text": "Pista  is a word which signifies  track  in Spanish and in Italian. It is, unfortunately, a very difficult bit of software to get installed, but we'll try to help you.  Pista  contains a whole kitchen-sink of features, most of which you won't need to use with our OwnTracks apps. (These features were built for the OwnTracks Greenwich devices.)", 
            "title": "Pista"
        }, 
        {
            "location": "/guide/clients/#mqttwarn", 
            "text": "You'll recall (we hope) the discussion on  MQTT  and the analogy with the cauldron.  mqttwarn , while not specific to OwnTracks, is another client you connect to your  MQTT broker . We think it's worth mentioning (and both Ben and JP -- the creators -- are quite pleased with what it does).  mqttwarn  lets you do things like tweet everytime OwnTracks reports a location (but do consider whether you  really  want that), send an e-mail when a loved one enters a particular region, etc.", 
            "title": "mqttwarn"
        }, 
        {
            "location": "/guide/clients/#openhab", 
            "text": "Presence detection in home automation is one of the most important pieces of the puzzle. Without it your smart home is effectively blind, and as a result can hardly be called 'smart' at all. There are very few automation rules that do not require some form of context in terms of human occupancy. Rules around security, lighting, music, even coffee machines -- all need to know if 'someone' is home before deciding whether to take action.   This is where OwnTracks steps in. In its simplest form it can be configured with waypoints (for home/work etc) that generate events whenever your phone enters/leaves these regions. These are sent to your own personal  MQTT broker  where your home automation software can react accordingly. The beauty of OwnTracks is two-fold - it is simple, you can disable the standard location reporting so all you get is the waypoint event/leave events, which is all your smart home cares about. The second is that, in  private mode , all your data is 'yours' and yours alone - there is no cloud service collecting, storing and potentially mining your data.   Read more about  openHAB and OwnTracks .", 
            "title": "openHAB"
        }, 
        {
            "location": "/guide/clients/#home-assistant", 
            "text": "Another home automation solution that can be used with OwnTracks is Home Assistant. Home Assistant allows you to track the location of people connected to your personal  MQTT broker . It has a map to show their current location and can trigger automations based on entering and leaving zones.  See the  demo  for an example of the map with OwnTracks devices or read more about how Home Assistant  connects to your private MQTT broker , how to  enable OwnTracks support in Home Assistant  and how to  configure automations based on zones .", 
            "title": "Home Assistant"
        }, 
        {
            "location": "/guide/clients/#roll-your-own", 
            "text": "If you feel really brave, you can  write your own program  which subscribes to OwnTracks data, but don't forget to tell us about it!", 
            "title": "Roll your own"
        }, 
        {
            "location": "/guide/clients/#related", 
            "text": "Here are some projects we know of which use and/or integrate OwnTracks and/or\nwhich are useful when using MQTT in general or OwnTracks in particular.   MQTT Inspector for iOS , written by Christoph Krey, who also did our OwnTracks for iOS app. This is an indispensible utility for all things MQTT.  the thing system  (  code  )  A Clojure webapp that aims to manage information gathered from OwnTracks;  clojure-mqttitude-backend  An  OwnTracks flow  by  Giovanni @juzam Angoli  for Node-RED which publishes messages to  pushover.net  upon entering or leaving a geo-fence.  MyMQTT  is an app for Android which enables you to subscribe and publish to an MQTT broker.  Stefano Costa cooks Italian pasta  using OwnTracks .  Matthew Bordignon made a small  Web page which uses Websockets to display the barometer reading  published by OwnTracks for iOS. ( Screenshot .)", 
            "title": "Related"
        }, 
        {
            "location": "/guide/friends/", 
            "text": "Friends\n\n\nOwnTracks has a so-called \nFriends\n feature which allows friends and/or family members who connect to the same \nMQTT broker\n to see eachother on the map and receive location updates from these friends. This is a really nice feature which allows, say, all members of a family to see where another member is currently located. Even when on different brokers, users can configure their systems to enable location updates to pass from one broker to another by a \nprocess called bridging\n.\n\n\nThe nitty-gritty is documented in the \nFriends feature\n.", 
            "title": "Friends"
        }, 
        {
            "location": "/guide/friends/#friends", 
            "text": "OwnTracks has a so-called  Friends  feature which allows friends and/or family members who connect to the same  MQTT broker  to see eachother on the map and receive location updates from these friends. This is a really nice feature which allows, say, all members of a family to see where another member is currently located. Even when on different brokers, users can configure their systems to enable location updates to pass from one broker to another by a  process called bridging .  The nitty-gritty is documented in the  Friends feature .", 
            "title": "Friends"
        }, 
        {
            "location": "/guide/waypoints/", 
            "text": "Waypoints\n\n\nf you've configured a geo-fence, a \nlocation\n message will\ncontain the elements:\n\n\n\n\nrad\nius (if its value is greater than 0)\n\n\ndesc\nription with the name you set for the waypoint\n\n\nevent\n with a value of \n\"enter\"\n or \n\"leave\"\n, depending on\n   whether the device is entering or leaving a configured region, respectively.\n\n\n\n\nIf you set up a shared waypoint, the app publishes that waypoint (without the retain flag,\nirrespective of your general preference) to the base topic with \n/waypoints\n\ntacked onto the topic (e.g. \nowntracks/\nuser\n/\ndevice\n/waypoints\n) with the\npayload for \n_type=waypoint\n as specified in the [[JSON page|JSON]]. For waypoints with disabled sharing, no waypoint message is published. These can be used to note down locations privately. But note that entering or leaving a waypoint will be published as a \nlocation\n message as described above.\n\n\nFor example, If Jane configures a waypoint on her iPhone\n\n\nthe app will publish the following payload\n\n\nWhen you set up a shared waypoint (with a \ndesc\nription and a \nrad\nius), this\nwaypoint is published to the broker with the current time stamp. If you update\nthe waypoint definition on the device at a later stage, the waypoint is\nre-published, with the \noriginal\n timestamp, but with possibly new\n\ndesc\nription and/or \nrad\nius. To be precise, the \ntst\n timestamp is used as an\nidentifier of the waypoint even if it is later modified on the device. For waypoints that are not shared, the above obviously does not apply. \n\n\nSubscribers to the broker (our apps and any other program) can avoid getting\nwaypoints by subscribing to, say, \nowntracks/+/+\n; also broker ACLs can\nprohibit access to \nowntracks/+/+/waypoints\n for particular users if so desired.\nConversely, all messages published by the apps (\nlocation\n and \nwaypoint\n) are\navailable with a subscription to \nowntracks/#\n.\n\n\nThe OwnTracks apps may keep track of waypoints, e.g. for displaying to users.", 
            "title": "Waypoints"
        }, 
        {
            "location": "/guide/waypoints/#waypoints", 
            "text": "f you've configured a geo-fence, a  location  message will\ncontain the elements:   rad ius (if its value is greater than 0)  desc ription with the name you set for the waypoint  event  with a value of  \"enter\"  or  \"leave\" , depending on\n   whether the device is entering or leaving a configured region, respectively.   If you set up a shared waypoint, the app publishes that waypoint (without the retain flag,\nirrespective of your general preference) to the base topic with  /waypoints \ntacked onto the topic (e.g.  owntracks/ user / device /waypoints ) with the\npayload for  _type=waypoint  as specified in the [[JSON page|JSON]]. For waypoints with disabled sharing, no waypoint message is published. These can be used to note down locations privately. But note that entering or leaving a waypoint will be published as a  location  message as described above.  For example, If Jane configures a waypoint on her iPhone  the app will publish the following payload  When you set up a shared waypoint (with a  desc ription and a  rad ius), this\nwaypoint is published to the broker with the current time stamp. If you update\nthe waypoint definition on the device at a later stage, the waypoint is\nre-published, with the  original  timestamp, but with possibly new desc ription and/or  rad ius. To be precise, the  tst  timestamp is used as an\nidentifier of the waypoint even if it is later modified on the device. For waypoints that are not shared, the above obviously does not apply.   Subscribers to the broker (our apps and any other program) can avoid getting\nwaypoints by subscribing to, say,  owntracks/+/+ ; also broker ACLs can\nprohibit access to  owntracks/+/+/waypoints  for particular users if so desired.\nConversely, all messages published by the apps ( location  and  waypoint ) are\navailable with a subscription to  owntracks/# .  The OwnTracks apps may keep track of waypoints, e.g. for displaying to users.", 
            "title": "Waypoints"
        }, 
        {
            "location": "/guide/beacons/", 
            "text": "iBeacons\n\n\n\n\nWhat is an iBeacon?\n\n\nAn iBeacon is a small Bluetooth device (Bluetooth Low Energy - BLE, Bluetooth 4.0) which sends out it's identification regularily. The iBeacon standard was introduced by Apple Inc. in 2013. It is supported by iOS, Android and on other platforms. iBeacons can be purchased as standalone devices or to be used in connection with computer equipement.\n\n\nIf you position 3/4 iBeacons in a room, your 2/3-dimensional position can be calculated based on the signal strengths received.\n\n\nWhat you can do with iBeacons in OwnTracks\n\n\nThis data is detected by your OwnTracks iOS device and can be used for region monitoring.\n\n\n\n\n\n\nUse an iBeacon to get your exact location\n\nPosition an iBeacon in your study and get enter- and leave-events from that room.\n\n\n\n\n\n\nUse an iBeacon to connect yourself with a vehicle\n\nEquip your car with an iBeacon and monitor how much time you spend commuting.\nAlways see where you parked your car.\n\n\n\n\n\n\nUse an iBeacon to track a valuable accessory\n\nFit an iBeacon to your keys/luggage/expensive equipement and get alarmed when you leave them behind.\n\n\n\n\n\n\nFull feature set is \nhere\n.", 
            "title": "Beacons"
        }, 
        {
            "location": "/guide/beacons/#ibeacons", 
            "text": "", 
            "title": "iBeacons"
        }, 
        {
            "location": "/guide/beacons/#what-is-an-ibeacon", 
            "text": "An iBeacon is a small Bluetooth device (Bluetooth Low Energy - BLE, Bluetooth 4.0) which sends out it's identification regularily. The iBeacon standard was introduced by Apple Inc. in 2013. It is supported by iOS, Android and on other platforms. iBeacons can be purchased as standalone devices or to be used in connection with computer equipement.  If you position 3/4 iBeacons in a room, your 2/3-dimensional position can be calculated based on the signal strengths received.", 
            "title": "What is an iBeacon?"
        }, 
        {
            "location": "/guide/beacons/#what-you-can-do-with-ibeacons-in-owntracks", 
            "text": "This data is detected by your OwnTracks iOS device and can be used for region monitoring.    Use an iBeacon to get your exact location \nPosition an iBeacon in your study and get enter- and leave-events from that room.    Use an iBeacon to connect yourself with a vehicle \nEquip your car with an iBeacon and monitor how much time you spend commuting.\nAlways see where you parked your car.    Use an iBeacon to track a valuable accessory \nFit an iBeacon to your keys/luggage/expensive equipement and get alarmed when you leave them behind.    Full feature set is  here .", 
            "title": "What you can do with iBeacons in OwnTracks"
        }, 
        {
            "location": "/guide/bridge/", 
            "text": "Bridging\n\n\nIn order to profit from the \nFriends feature\n in\nOwnTracks, all contacts you want to be able to track on your your device must\nshare a broker, but that can be difficult if both you and your friend\n(henceforce \"Jane\" in the examples that follow) also use your brokers for other\npurposes.\n\n\nMosquitto\n (and some other \nMQTT\n brokers) have a feature called bridging\nwhich basically lets you connect two (or more) brokers together.\n\n\nLet's assume that you and Jane want to see each other's location updates while\nmaintaining a connection from your devices to your respective MQTT brokers at\nhome. In other words, you will use your broker, whereas Jane connects to her broker because, e.g. she has private contacts who use her broker, but she doesn't want you to have access to those.\n\n\n\n\nWhat will happen?\n\n\nSetting up a bridge is not difficult, but there are some things we have to keep in mind.  In this example, we'll assume the following:\n\n\n\n\nYour broker will initiate a connection to Jane's broker\n\n\nYou'll be using \nTLS\n to protect credentials and data in transit\n\n\nJane has given you (e.g. via e-mail) a copy of her TLS CA certificate\n\n\nJane has set up an ACL on her \nMosquitto\n broker to ensure you have access only to her OwnTracks location data and nothing else.\n\n\nJane has a username and password for your broker to use when connecting to her broker, and she's given you both.\n\n\nJane has a device called \nnexus7\n and she publishes location updates to \nher\n broker at \nowntracks/jane/nexus7\n.\n\n\nYou have an iPhone and want to share your location data with Jane. You publish (on your broker) to \nowntracks/john/iphone\n.\n\n\n\n\nHere's what you configure \non your broker\n's \nmosquitto.conf\n:\n\n\n# Bridge to Jane\nconnection br-me-to-jane\nbridge_cafile /etc/mosquitto/jane/JANE-OwnTracks-ca.crt\nbridge_insecure false\naddress jane.example.org:8883\ncleansession false\nclientid br-john-jane\nstart_type automatic\nusername john\npassword s3cr1t\nnotifications false\ntry_private true\ntopic nexus7 in 2 owntracks/jane/ owntracks/jane/\ntopic iphone out 2 owntracks/john/ owntracks/john/\n\n\n\n\nThese last two lines define which topic branches will be published (\nout\n) and\nwhich will be subscribed to (\nin\n) from the point of view of your broker. There\nare a lot of things you can tweak in this configuration, but this is should get\nyou started.\n\n\nPublishes\n\n\nWhen your device publishes location data to your broker, it will publish the single topic \nowntracks/john/iphone\n to Jane's broker. Conversely, as your broker is now subscribed to Jane's at \nowntracks/jane/nexus7\n, it will receive Jane's location data and re-publish that to your connected device.\n\n\nEvents\n\n\nOwnTracks uses more than just a single topic per user \nas documented\n. This means we must add more \ntopic\n statements to our broker (and Jane to her broker) if we additionally want to support transition events (e.g. when did Jane leave home?) and outgoing commands (e.g. tell Jane's device to report its location \nnow\n).\n\n\nAssuming Jane allows this (by configuring appropriate ACLs on her broker), we add one or more of the following. The first line we already had: it bridges Jane's location publishes \nin\n to our broker. The second line is new: it bridges Jane's \nnexus7\n events into our broker.\n\n\ntopic nexus7 in 2 owntracks/jane/ owntracks/jane/\ntopic event in 2 owntracks/jane/nexus7/ owntracks/jane/nexus7/\n\n\n\n\nCMD\n\n\nTapping on OwnTrack's \nrequest location update\n publishes a \ncmd\n to the destination device, so we bridge that topic \nout\n towards Jane's broker:\n\n\ntopic cmd out 2 owntracks/jane/nexus7/ owntracks/jane/nexus7/\n\n\n\n\nMQTTitude\n\n\nLet's assume for the moment that you're running a broker with a number of connected OwnTracks clients, some of which are still publishing to the \"old\" topic branch at `mqttitude/', but you want to \"assimilate\" these clients into your environment without having to force them to rename the topic to which they publish. You can easily do that in Mosquitto, by adding the following line to your bridge configuration:\n\n\ntopic # in 2 owntracks/ mqttitude/\n\n\n\n\nWhat this does is: your bridge subscribes to the \nremote\n topic \nmqttitude/#\n and all received messages will be republished at \nowntracks/\n on \nyour\n broker (note the \nin\n direction). \n\n\nNeat, eh? \n\n\nConsult the manual page for\n\nmosquitto.conf\n for more\ndetails.", 
            "title": "Bridging"
        }, 
        {
            "location": "/guide/bridge/#bridging", 
            "text": "In order to profit from the  Friends feature  in\nOwnTracks, all contacts you want to be able to track on your your device must\nshare a broker, but that can be difficult if both you and your friend\n(henceforce \"Jane\" in the examples that follow) also use your brokers for other\npurposes.  Mosquitto  (and some other  MQTT  brokers) have a feature called bridging\nwhich basically lets you connect two (or more) brokers together.  Let's assume that you and Jane want to see each other's location updates while\nmaintaining a connection from your devices to your respective MQTT brokers at\nhome. In other words, you will use your broker, whereas Jane connects to her broker because, e.g. she has private contacts who use her broker, but she doesn't want you to have access to those.", 
            "title": "Bridging"
        }, 
        {
            "location": "/guide/bridge/#what-will-happen", 
            "text": "Setting up a bridge is not difficult, but there are some things we have to keep in mind.  In this example, we'll assume the following:   Your broker will initiate a connection to Jane's broker  You'll be using  TLS  to protect credentials and data in transit  Jane has given you (e.g. via e-mail) a copy of her TLS CA certificate  Jane has set up an ACL on her  Mosquitto  broker to ensure you have access only to her OwnTracks location data and nothing else.  Jane has a username and password for your broker to use when connecting to her broker, and she's given you both.  Jane has a device called  nexus7  and she publishes location updates to  her  broker at  owntracks/jane/nexus7 .  You have an iPhone and want to share your location data with Jane. You publish (on your broker) to  owntracks/john/iphone .   Here's what you configure  on your broker 's  mosquitto.conf :  # Bridge to Jane\nconnection br-me-to-jane\nbridge_cafile /etc/mosquitto/jane/JANE-OwnTracks-ca.crt\nbridge_insecure false\naddress jane.example.org:8883\ncleansession false\nclientid br-john-jane\nstart_type automatic\nusername john\npassword s3cr1t\nnotifications false\ntry_private true\ntopic nexus7 in 2 owntracks/jane/ owntracks/jane/\ntopic iphone out 2 owntracks/john/ owntracks/john/  These last two lines define which topic branches will be published ( out ) and\nwhich will be subscribed to ( in ) from the point of view of your broker. There\nare a lot of things you can tweak in this configuration, but this is should get\nyou started.", 
            "title": "What will happen?"
        }, 
        {
            "location": "/guide/bridge/#publishes", 
            "text": "When your device publishes location data to your broker, it will publish the single topic  owntracks/john/iphone  to Jane's broker. Conversely, as your broker is now subscribed to Jane's at  owntracks/jane/nexus7 , it will receive Jane's location data and re-publish that to your connected device.", 
            "title": "Publishes"
        }, 
        {
            "location": "/guide/bridge/#events", 
            "text": "OwnTracks uses more than just a single topic per user  as documented . This means we must add more  topic  statements to our broker (and Jane to her broker) if we additionally want to support transition events (e.g. when did Jane leave home?) and outgoing commands (e.g. tell Jane's device to report its location  now ).  Assuming Jane allows this (by configuring appropriate ACLs on her broker), we add one or more of the following. The first line we already had: it bridges Jane's location publishes  in  to our broker. The second line is new: it bridges Jane's  nexus7  events into our broker.  topic nexus7 in 2 owntracks/jane/ owntracks/jane/\ntopic event in 2 owntracks/jane/nexus7/ owntracks/jane/nexus7/", 
            "title": "Events"
        }, 
        {
            "location": "/guide/bridge/#cmd", 
            "text": "Tapping on OwnTrack's  request location update  publishes a  cmd  to the destination device, so we bridge that topic  out  towards Jane's broker:  topic cmd out 2 owntracks/jane/nexus7/ owntracks/jane/nexus7/  MQTTitude  Let's assume for the moment that you're running a broker with a number of connected OwnTracks clients, some of which are still publishing to the \"old\" topic branch at `mqttitude/', but you want to \"assimilate\" these clients into your environment without having to force them to rename the topic to which they publish. You can easily do that in Mosquitto, by adding the following line to your bridge configuration:  topic # in 2 owntracks/ mqttitude/  What this does is: your bridge subscribes to the  remote  topic  mqttitude/#  and all received messages will be republished at  owntracks/  on  your  broker (note the  in  direction).   Neat, eh?   Consult the manual page for mosquitto.conf  for more\ndetails.", 
            "title": "CMD"
        }, 
        {
            "location": "/features/security/", 
            "text": "Security\n\n\nOwnTracks and its associated utilities have been designed foremost with data privacy in mind. We think your location or that of your loved ones is something only you respectively they should know. While we cannot help you (or ourselves for that matter) protect against NSA snooping, we do our best to protect your data from other people's eyes.\n\n\n\n\nIf your broker supports it, and if you configure OwnTracks to do so, OwnTracks uses MQTT over \nTLS\n when connecting to your broker.\n\n\nThe apps support authenticating to the broker with \nusername\n and \npassword\n which can be as strong (or as convoluted) as your broker supports.\n\n\nCredentials you configure (i.e. \nusername\n and \npassword\n) are thus protected from snooping, at least until they get to your broker. The same applies to location data our app transmits.\n\n\nThe apps support using \nTLS client certificates\n for authentication to the broker.\n\n\nThe apps support \npayload encryption\n for privacy.", 
            "title": "Security"
        }, 
        {
            "location": "/features/security/#security", 
            "text": "OwnTracks and its associated utilities have been designed foremost with data privacy in mind. We think your location or that of your loved ones is something only you respectively they should know. While we cannot help you (or ourselves for that matter) protect against NSA snooping, we do our best to protect your data from other people's eyes.   If your broker supports it, and if you configure OwnTracks to do so, OwnTracks uses MQTT over  TLS  when connecting to your broker.  The apps support authenticating to the broker with  username  and  password  which can be as strong (or as convoluted) as your broker supports.  Credentials you configure (i.e.  username  and  password ) are thus protected from snooping, at least until they get to your broker. The same applies to location data our app transmits.  The apps support using  TLS client certificates  for authentication to the broker.  The apps support  payload encryption  for privacy.", 
            "title": "Security"
        }, 
        {
            "location": "/features/tls/", 
            "text": "TLS\n\n\nYou want data between your mobile device (a.k.a. smartphone) and the MQTT broker you use to be secured from eavesdropping. This is accomplished using \nTLS\n (the artist formerly known as \nSSL\n). When you configure your broker you will generate what is called a CA certificate which is basically a large amount of bits. (See below for the nitty gritty.)\n\n\nConfiguring TLS (\nTransport Layer Security\n) for OwnTracks involves doing three things:\n\n\n\n\nObtain a TLS certificate/key pair (see below on how to do this) if you don't yet have one\n\n\nConfigure TLS on the MQTT broker\n\n\nConfiguring the app to use TLS\n\n\n\n\nYou can share the certificate if you want to (though not many people will want it ...)\nIt's so public, that it's perfectly OK to send yourself the file by, say, e-mail.\n\n\nConfigure TLS on the Mosquitto broker\n\n\nWe'll first show you how to set up TLS on your Mosquitto \nbroker\n.\nThe basic configuration for TLS in \nmosquitto.conf\n is:\n\n\nlistener 8883\ntls_version tlsv1\ncafile .............\ncertfile .............\nkeyfile .............\n\n\n\n\n(see also: \nmosquitto-tls\n.)\n\n\n\n\n8883\n is the standard MQTT port for TLS connections. Change it if you need to, but make sure your OwnTracks app is configured to use the same port.\n\n\ntls_version\n specifies TLSv1 which is currently a requirement for the OwnTracks apps, as their APIs support that TLS version.\n\n\ncafile\n is the path to the certificate authority file\n\n\ncertfile\n points to your server's certificate in PEM format\n\n\nkeyfile\n points to your server's secret key file (which you \nnever\n divulge!)\n\n\n\n\nConfigure the OwnTracks app to use TLS\n\n\nWe show you here how to set up your iOS or Android device with that kind of certificate.\n\n\nIn both cases we assume you've got an e-mail in your inbox with the file you've sent yourself. This file has a \n.crt\n extension, and in both Android and iOS you can simply launch configuration by clicking on the attachment.\n\n\nIn our example, the CA certificate is called \nMQTTitude-ca.crt\n.\n\n\nAndroid\n\n\nNote that by following these instructions on Android you'll be prompted to set a device PIN or pattern to protect the device. If you already have that, just carry on. If you absolutely don't want to do that, you should download the certificate into, say, the Downloads folder, and configure it manually in OwnTracks (see below).\n\n\nSo, here's your e-mail message with said attachment.\n\n\n\n\nNow click on the attached file, and you'll get the following dialog where you have to specify a name for the certificate (sigh: the certificate contains a name, but Android wants you to name it anyway). Give it any old name. We've chosen \nMQTTitude\n, of course. Then click OK.\n\n\n\n\nThat's it. You're done, and if you no longer require the certificate file just delete the e-mail, though we recommend you keep it around for a bit.\n\n\nNote that installing a certificate into Android will, since Kitkat (4.4) bring up a warning when you power up your device. This warning is harmless (even though we consider it quite annoying).\n\n\n\n\niOS\n\n\nSo, here's your e-mail containing the certificate file. Click on it to launch the profile installer. No worries: we're not going to break anything. We're just adding yet another certificate to iOS' certificate store, and you're going to say that you trust that certificate. You ought to trust it: you've just created it yourself!\n\n\n\n\nYou've clicked, and here's the trust store. You see the certificate has a name, but it's not trusted yet. Click on Install.\n\n\n\n\nRead the text if you must. Just kidding: honestly, it's ok. But do read the text, and then click \"Install\" on the top right.\n\n\n\n\nThere you go! That's it: the certificate was installed.\n\n\n\n\nYou're done, and if you no longer require the certificate file just delete the e-mail, though we recommend you keep it around for a bit.\n\n\nmanual configuration on Android\n\n\nFrom the, say, e-mail you got with the certificate, click \"save\" on the attached \n.crt\n file which is stored on your device's \nDownload\n folder.\n\n\nIn OwnTracks's settings, select \nTLS (Custom Certificate)\n\n\n\n\nNow comes the hard part: you have to enter the path to the certificate you downloaded. On my device this is \n/storage/emulated/0/Download/MQTTitude.crt\n. Your mileage, etc; \n\n\n\n\nWhen you click \nConnect\n, it will try and use your certificate. Good luck! ;-)\n\n\nThe nitty gritty\n\n\nThat CA certificate file we mentioned? The attachment called \nsomething.crt\n?\nIt looks like this, in fact, in what is called \nPEM\n format; but you don't really want to know that, but if you do, this is what it looks like:\n\n\n-----BEGIN CERTIFICATE-----\nMIIDGTCCAoKgAwIBAgIJAODXne2yV51zMA0GCSqGSIb3DQEBBQUAMGcxCzAJBgNV\nBAYTAkRFMQwwCgYDVQQIEwNOUlcxETAPBgNVBAcTCElyZ2VuZHdvMRYwFAYDVQQK\n...\npjGM/XgBs62UhqXnoHrHh/AHIiHieuNFwOhUg0fD/vQ5O6UZkJTWY5LLmEyPN5sS\ncPZ5pT/WCvGuIOgNdy1VyWJrrlAjeQlbK+GDcNc=\n-----END CERTIFICATE-----\n\n\n\n\nThat's plain text, even though it might be hard to believe. Actually, it's all sorts of magic wrapped into ASCII bytes, but we can look inside that, and we'll give you a sneak peak:\n\n\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            e0:d7:9d:ed:b2:57:9d:73\n        Signature Algorithm: sha1WithRSAEncryption\n        Issuer: C=DE, ST=NRW, L=Irgendwo, O=MQTTitude.org/emailAddress=jjolie@example.com\n        Validity\n            Not Before: Aug 18 10:26:08 2013 GMT\n            Not After : Aug 16 10:26:08 2023 GMT\n        Subject: C=DE, ST=NRW, L=Irgendwo, O=MQTTitude.org/emailAddress=jjolie@example.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n            RSA Public Key: (1024 bit)\n                Modulus (1024 bit):\n                    00:bd:70:b0:49:d4:17:c9:17:33:4d:74:fc:61:25:\n                    ...\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Subject Key Identifier: \n                4C:89:83:F0:33:AD:2B:D7:FD:DE:1D:6D:8D:00:52:C1:1C:75:B1:85\n            X509v3 Authority Key Identifier: \n                keyid:4C:89:83:F0:33:AD:2B:D7:FD:DE:1D:6D:8D:00:52:C1:1C:75:B1:85\n                DirName:/C=DE/ST=NRW/L=Irgendwo/O=MQTTitude.org/emailAddress=jjolie@example.com\n                serial:E0:D7:9D:ED:B2:57:9D:73\n\n            X509v3 Basic Constraints: \n                CA:TRUE\n    Signature Algorithm: sha1WithRSAEncryption\n        74:12:f8:d0:51:3a:c6:f8:62:75:61:d1:56:2f:bf:e3:64:3c:\n        ...\n\n\n\n\nBetter, huh? Well, at least parts of it are now readable. Hope you liked this.\n\n\nObtain a certificate and key\n\n\nThe following sections are not an endorsement of a particular Certification Authority, but rather are a few tips on getting you set up with \nMosquitto\n.\n\n\nYou can also create your own self-signed certificate. We provide the \ngenerate-CA.sh\n utility for doing this easily.\n\n\nstartssl.com\n\n\nIf you have a key-pair issued by \nstartssl.com\n, you'll be issued a key (in a \n*.key\n file), and a certificate (as \n*.pem\n or \n*.crt\n -- either contains a PEM-encoded certificate).\n\n\nMosquitto\n will need the certificate chain for \nstartssl.com\n, which you can find as \nca-bundle.crt\n at \nwww.startssl.com/certs/\n.\n\n\nAs far as TLS is concerned, you'll therefore set up your \nmosquitto.conf\n as follows, specifying corrrect paths to the files.\n\n\nlistener 8883\ntls_version tlsv1\ncafile ca-bundle.crt\ncertfile server.crt\nkeyfile server.key\n\n\n\n\nThen download the \nstartssl.com\n CA certificate (\nca.crt\n) and install that on your device as described above.", 
            "title": "TLS"
        }, 
        {
            "location": "/features/tls/#tls", 
            "text": "You want data between your mobile device (a.k.a. smartphone) and the MQTT broker you use to be secured from eavesdropping. This is accomplished using  TLS  (the artist formerly known as  SSL ). When you configure your broker you will generate what is called a CA certificate which is basically a large amount of bits. (See below for the nitty gritty.)  Configuring TLS ( Transport Layer Security ) for OwnTracks involves doing three things:   Obtain a TLS certificate/key pair (see below on how to do this) if you don't yet have one  Configure TLS on the MQTT broker  Configuring the app to use TLS   You can share the certificate if you want to (though not many people will want it ...)\nIt's so public, that it's perfectly OK to send yourself the file by, say, e-mail.", 
            "title": "TLS"
        }, 
        {
            "location": "/features/tls/#configure-tls-on-the-mosquitto-broker", 
            "text": "We'll first show you how to set up TLS on your Mosquitto  broker .\nThe basic configuration for TLS in  mosquitto.conf  is:  listener 8883\ntls_version tlsv1\ncafile .............\ncertfile .............\nkeyfile .............  (see also:  mosquitto-tls .)   8883  is the standard MQTT port for TLS connections. Change it if you need to, but make sure your OwnTracks app is configured to use the same port.  tls_version  specifies TLSv1 which is currently a requirement for the OwnTracks apps, as their APIs support that TLS version.  cafile  is the path to the certificate authority file  certfile  points to your server's certificate in PEM format  keyfile  points to your server's secret key file (which you  never  divulge!)", 
            "title": "Configure TLS on the Mosquitto broker"
        }, 
        {
            "location": "/features/tls/#configure-the-owntracks-app-to-use-tls", 
            "text": "We show you here how to set up your iOS or Android device with that kind of certificate.  In both cases we assume you've got an e-mail in your inbox with the file you've sent yourself. This file has a  .crt  extension, and in both Android and iOS you can simply launch configuration by clicking on the attachment.  In our example, the CA certificate is called  MQTTitude-ca.crt .  Android  Note that by following these instructions on Android you'll be prompted to set a device PIN or pattern to protect the device. If you already have that, just carry on. If you absolutely don't want to do that, you should download the certificate into, say, the Downloads folder, and configure it manually in OwnTracks (see below).  So, here's your e-mail message with said attachment.   Now click on the attached file, and you'll get the following dialog where you have to specify a name for the certificate (sigh: the certificate contains a name, but Android wants you to name it anyway). Give it any old name. We've chosen  MQTTitude , of course. Then click OK.   That's it. You're done, and if you no longer require the certificate file just delete the e-mail, though we recommend you keep it around for a bit.  Note that installing a certificate into Android will, since Kitkat (4.4) bring up a warning when you power up your device. This warning is harmless (even though we consider it quite annoying).   iOS  So, here's your e-mail containing the certificate file. Click on it to launch the profile installer. No worries: we're not going to break anything. We're just adding yet another certificate to iOS' certificate store, and you're going to say that you trust that certificate. You ought to trust it: you've just created it yourself!   You've clicked, and here's the trust store. You see the certificate has a name, but it's not trusted yet. Click on Install.   Read the text if you must. Just kidding: honestly, it's ok. But do read the text, and then click \"Install\" on the top right.   There you go! That's it: the certificate was installed.   You're done, and if you no longer require the certificate file just delete the e-mail, though we recommend you keep it around for a bit.  manual configuration on Android  From the, say, e-mail you got with the certificate, click \"save\" on the attached  .crt  file which is stored on your device's  Download  folder.  In OwnTracks's settings, select  TLS (Custom Certificate)   Now comes the hard part: you have to enter the path to the certificate you downloaded. On my device this is  /storage/emulated/0/Download/MQTTitude.crt . Your mileage, etc;    When you click  Connect , it will try and use your certificate. Good luck! ;-)", 
            "title": "Configure the OwnTracks app to use TLS"
        }, 
        {
            "location": "/features/tls/#the-nitty-gritty", 
            "text": "That CA certificate file we mentioned? The attachment called  something.crt ?\nIt looks like this, in fact, in what is called  PEM  format; but you don't really want to know that, but if you do, this is what it looks like:  -----BEGIN CERTIFICATE-----\nMIIDGTCCAoKgAwIBAgIJAODXne2yV51zMA0GCSqGSIb3DQEBBQUAMGcxCzAJBgNV\nBAYTAkRFMQwwCgYDVQQIEwNOUlcxETAPBgNVBAcTCElyZ2VuZHdvMRYwFAYDVQQK\n...\npjGM/XgBs62UhqXnoHrHh/AHIiHieuNFwOhUg0fD/vQ5O6UZkJTWY5LLmEyPN5sS\ncPZ5pT/WCvGuIOgNdy1VyWJrrlAjeQlbK+GDcNc=\n-----END CERTIFICATE-----  That's plain text, even though it might be hard to believe. Actually, it's all sorts of magic wrapped into ASCII bytes, but we can look inside that, and we'll give you a sneak peak:  Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            e0:d7:9d:ed:b2:57:9d:73\n        Signature Algorithm: sha1WithRSAEncryption\n        Issuer: C=DE, ST=NRW, L=Irgendwo, O=MQTTitude.org/emailAddress=jjolie@example.com\n        Validity\n            Not Before: Aug 18 10:26:08 2013 GMT\n            Not After : Aug 16 10:26:08 2023 GMT\n        Subject: C=DE, ST=NRW, L=Irgendwo, O=MQTTitude.org/emailAddress=jjolie@example.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n            RSA Public Key: (1024 bit)\n                Modulus (1024 bit):\n                    00:bd:70:b0:49:d4:17:c9:17:33:4d:74:fc:61:25:\n                    ...\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Subject Key Identifier: \n                4C:89:83:F0:33:AD:2B:D7:FD:DE:1D:6D:8D:00:52:C1:1C:75:B1:85\n            X509v3 Authority Key Identifier: \n                keyid:4C:89:83:F0:33:AD:2B:D7:FD:DE:1D:6D:8D:00:52:C1:1C:75:B1:85\n                DirName:/C=DE/ST=NRW/L=Irgendwo/O=MQTTitude.org/emailAddress=jjolie@example.com\n                serial:E0:D7:9D:ED:B2:57:9D:73\n\n            X509v3 Basic Constraints: \n                CA:TRUE\n    Signature Algorithm: sha1WithRSAEncryption\n        74:12:f8:d0:51:3a:c6:f8:62:75:61:d1:56:2f:bf:e3:64:3c:\n        ...  Better, huh? Well, at least parts of it are now readable. Hope you liked this.  Obtain a certificate and key  The following sections are not an endorsement of a particular Certification Authority, but rather are a few tips on getting you set up with  Mosquitto .  You can also create your own self-signed certificate. We provide the  generate-CA.sh  utility for doing this easily.  startssl.com  If you have a key-pair issued by  startssl.com , you'll be issued a key (in a  *.key  file), and a certificate (as  *.pem  or  *.crt  -- either contains a PEM-encoded certificate).  Mosquitto  will need the certificate chain for  startssl.com , which you can find as  ca-bundle.crt  at  www.startssl.com/certs/ .  As far as TLS is concerned, you'll therefore set up your  mosquitto.conf  as follows, specifying corrrect paths to the files.  listener 8883\ntls_version tlsv1\ncafile ca-bundle.crt\ncertfile server.crt\nkeyfile server.key  Then download the  startssl.com  CA certificate ( ca.crt ) and install that on your device as described above.", 
            "title": "The nitty gritty"
        }, 
        {
            "location": "/features/tlscert/", 
            "text": "Client certificates\n\n\nThe OwnTracks iOS and Android clients can be configured to use TLS client\ncertificates to authenticate against their MQTT broker. This is the next best\nthing to two-factor authentication, where the apps have a TLS key and a\ncertificate which has to be presented to the broker for successful\nauthentication.\n\n\nMosquitto\n\n\nWhen using the Mosquitto \nbroker\n support for TLS\ncertificates can be enabled as follows:\n\n\nrequire_certificate true\nuse_identity_as_username true\n\n\n\n\nClient certs\n\n\nTo create a client certificate and key, you can use, say, \ngenerate-CA.sh\n from\nour \ntools repository\n.\n\n\n./generate-CA.sh client jjolie\n\n\n\n\nThis produces at least two files which are required on the OwnTracks devices: a \n.key\n file and a \n.crt\n file.\n\n\nPKCS#12\n\n\nIn order to safely transport a user's key and certificate to the OwnTracks app,\nwe make use of the \nPKCS#12\n container\nformat. OpenSSL's \npkcs12\n subcommand creates this container and protects it\nwith a passphrase you specify. This passphrase we will later require in the app.\n\n\nopenssl pkcs12 \\\n  -export \\\n  -in jjolie.crt \\\n  -inkey jjolie.key \\\n  -name \nJane's certificate/key\n \\\n  -out jjolie.p12\n\n\n\n\nYou now send the PKCS#12 file as attachment to the device, e.g. by e-mail. Note that for iOS, the file must have a \n.otrp\n extension so that it can be opened in OwnTracks.\nYou also send the CA certificate to the device and install it there, as discussed in \nTLS\n\n\nAndroid\n\n\nSave the file\nconfigure settings\n\n\niOS\n\n\nWe recommend you proceed as follows:\n\n\n\n\nInstall the \nTLS\n CA certificate in your system keystore by sending it (e.g. via e-mail) to your device and installing it in the system profile. (Click on the certificate and follow iOS' instructions.)\n\n\nSend the prepared PKCS#12 file (with an \n.otrp\n extension) to your device, and open it. It will be imported into OwnTracks\n\n\nLaunch OwnTracks, select Settings and TLS. Select the \notrp\n file you just imported as Client Certificate Filename, and below that, enter its passphrase.\n\n\nLeave \nUse Custom Security Policy\n disabled.\n\n\nVerify the connection to your broker.\n\n\n\n\nIf need be, you can adjust a great number of parameters regarding how TLS connections will be verified: there are a number of settings available to fine-tune TLS connections between the app and the broker. The button \nUse Custom Security Policy\n can be enabled to do so.\n\n\n\n\nMode\n\n\nNone; do not use pinned certificates to validate servers\n\n\nPublic Key; validate host (broker) certificates against the public keys of the pinned certificate\n\n\nCertificate; validate host certificates against pinned certificates\n\n\n\n\n\n\n\n\nPinned Server Certificate; select the certificate to use for pinning. Adding pinned SSL certificates to your app helps prevent man-in-the-middle attacks and other vulnerabilities. Applications dealing with sensitive customer data or financial information are strongly encouraged to route all communication over an SSL/TLS connection with SSL pinning configured and enabled.\n\n\n\n\n\n\nValidate Certificate Chain; if enabled, the entire TLS certificate chain is validated and not just the leaf (host) certificate if disabled.\n\n\n\n\nAllow untrusted Certificates should be disabled if possible. If the app doesn't have the CA certificate in its keychain, you'll have to allow untrusted certificates.\n\n\nValidate Domain Name; whether or not to validate the domain name in the certificate's \nCN\n field.\n\n\n\n\nIf you wish to use certificate pinning, you must provide a DER-encoded file with an \n.otre\n extension to the device containing the pinned certificate.\n\n\nopenssl x509 \\\n   -in ca.crt \\\n   -out ca.otre \\\n   -outform DER", 
            "title": "TLS client"
        }, 
        {
            "location": "/features/tlscert/#client-certificates", 
            "text": "The OwnTracks iOS and Android clients can be configured to use TLS client\ncertificates to authenticate against their MQTT broker. This is the next best\nthing to two-factor authentication, where the apps have a TLS key and a\ncertificate which has to be presented to the broker for successful\nauthentication.  Mosquitto  When using the Mosquitto  broker  support for TLS\ncertificates can be enabled as follows:  require_certificate true\nuse_identity_as_username true  Client certs  To create a client certificate and key, you can use, say,  generate-CA.sh  from\nour  tools repository .  ./generate-CA.sh client jjolie  This produces at least two files which are required on the OwnTracks devices: a  .key  file and a  .crt  file.  PKCS#12  In order to safely transport a user's key and certificate to the OwnTracks app,\nwe make use of the  PKCS#12  container\nformat. OpenSSL's  pkcs12  subcommand creates this container and protects it\nwith a passphrase you specify. This passphrase we will later require in the app.  openssl pkcs12 \\\n  -export \\\n  -in jjolie.crt \\\n  -inkey jjolie.key \\\n  -name  Jane's certificate/key  \\\n  -out jjolie.p12  You now send the PKCS#12 file as attachment to the device, e.g. by e-mail. Note that for iOS, the file must have a  .otrp  extension so that it can be opened in OwnTracks.\nYou also send the CA certificate to the device and install it there, as discussed in  TLS  Android  Save the file\nconfigure settings  iOS  We recommend you proceed as follows:   Install the  TLS  CA certificate in your system keystore by sending it (e.g. via e-mail) to your device and installing it in the system profile. (Click on the certificate and follow iOS' instructions.)  Send the prepared PKCS#12 file (with an  .otrp  extension) to your device, and open it. It will be imported into OwnTracks  Launch OwnTracks, select Settings and TLS. Select the  otrp  file you just imported as Client Certificate Filename, and below that, enter its passphrase.  Leave  Use Custom Security Policy  disabled.  Verify the connection to your broker.   If need be, you can adjust a great number of parameters regarding how TLS connections will be verified: there are a number of settings available to fine-tune TLS connections between the app and the broker. The button  Use Custom Security Policy  can be enabled to do so.   Mode  None; do not use pinned certificates to validate servers  Public Key; validate host (broker) certificates against the public keys of the pinned certificate  Certificate; validate host certificates against pinned certificates     Pinned Server Certificate; select the certificate to use for pinning. Adding pinned SSL certificates to your app helps prevent man-in-the-middle attacks and other vulnerabilities. Applications dealing with sensitive customer data or financial information are strongly encouraged to route all communication over an SSL/TLS connection with SSL pinning configured and enabled.    Validate Certificate Chain; if enabled, the entire TLS certificate chain is validated and not just the leaf (host) certificate if disabled.   Allow untrusted Certificates should be disabled if possible. If the app doesn't have the CA certificate in its keychain, you'll have to allow untrusted certificates.  Validate Domain Name; whether or not to validate the domain name in the certificate's  CN  field.   If you wish to use certificate pinning, you must provide a DER-encoded file with an  .otre  extension to the device containing the pinned certificate.  openssl x509 \\\n   -in ca.crt \\\n   -out ca.otre \\\n   -outform DER", 
            "title": "Client certificates"
        }, 
        {
            "location": "/features/location/", 
            "text": "Location data\n\n\nLocation data is obtained by your smartphone and published to the \nMQTT broker\n as follows:\n\n\nAndroid\n\n\nThe way it currently works is by specifying an interval in which you want to receive updates (the one you configure in the settings). You only receive updates if this amount of time has passed and you moved more than 500m (when the app is in the background. The movement restriction is set to 50m or so when in the foreground).\n\n\nSay I set an interval of 10min and I don't move; will I get a PUBlish? No. \nIf you move more than 500 meters in 5 minutes you'll get a PUB after 10 minutes. You won't get a PUB after 5 minutes though.\n\n\nAdditional restrictions apply regarding the update intervall. When switching into the background or foreground, a new location request is setup with a different granularity and energy requirement. As a result, a new location is received immedeately by the app. \n\n\nThus, when the app goes into the background, a new location is received. Most likely, this will not result in a publish as the last publish was not longer ago than 10 minutes. Say the last update was exactly 9 minutes ago when the background mode is enabled. In this case no publish will be sent. However, the next location will probably only be received after the specified 10 minutes. At this point, the time of the last publish is longer than 10 minutes ago. So in this worst case, around 20 will pass before a location will be sent. \n\n\nIf you switch on the app after one minute in the background (11 minutes after the last publish), a new report will be sent immediately as soon as a new location is available. \n\n\niOS\n\n\nThe iOS app offers 3 modes of location publication:\n\n\n\n\nQuiet\n mode\n\n\nManual\n mode\n\n\nSignificant location change\n mode\n\n\nMove\n mode\n\n\n\n\nIn addition to this, there's also \nRegion Monitoring\n (a.k.a. Geo Fence) and \niBeacon Monitoring\n and \niBeacon Ranging\n.\n\n\nMove\n mode\n\n\nIn \nmove\n mode, the app monitors location permanently and publishes a new\nlocation as soon as the device moves \nx\n meters or after \nt\n seconds, whatever\nhappens first. \nx\n and \nt\n can be adjusted by the user in the systems settings for\nOwnTracks. The defaults are 100m and 300 seconds (5 minutes). \n\n\nThe payoff is higher battery usage as high as in navigation or tracker app.\nSo it is recommend to use \nmove\n mode while charging or during moves only - hence the name.\n\n\nPlease note, \nmove\n mode is active when the app is active (a.k.a in foreground).\n\n\nSignificant location change\n mode\n\n\niOS defines a \nSignificant location change\n as travelling a distance of at least\n500 meters in 5 minutes.  This mode allows the app to run in background and\nminimize the power consumption.\n\n\nThis standard tracking mode reports significant location changes only (\n500m\nand at most once every 5 minutes).  This is defined by Apple and is optimal\nwith respect to battery usage.\n\n\nExamples:\n\n\n\n\nif you don't move, no new location is published - even if you don't move for hours. (Note, however, that the app will publish a \nping\n-type message once in a while.)\n\n\nif you move at least 500 meters, a new location will be published after 5 minutes\n\n\nif you move 10 kilometers in 5 minutes, only one location will be published\n\n\n\n\nManual\n mode\n\n\nThe app doesn't monitor location changes in \nmanual\n mode while in background.\nThe user has to publish the current location explicitly via the UI. You use this if\nyou want to (temporarily) avoid friends seeing where you are. Note that Region events\ntriggered by entering or leaving Geo Fence or Beacon regions\nare still published automatically whilst in \nManual\n mode.\n\n\nQuiet\n mode\n\n\nSame as \nManual\n mode except that no region events are published.\n\n\nRegion\n monitoring\n\n\nThe app user may mark a previously manually published or manually created \nlocation as a monitored circular region by specifying a monitoring radius in meters. (See \nWaypoints\n.)\nThe app will publish the location\nadditionally everytime the device leaves or enters one of the regions, and the\npublished data contains an indication of whether the device is entering or\nleaving the region.\n\n\nRegion monitoring is not related to one of the location publication modes and\nworks independently thereof. It is switched on when a region is setup with description\nand radius. To switch region monitoring off, all regions have to be \nunmarked (by setting their radius to 0).\n\n\nRegions are shown on the map display in transparent blue or red circles. Red\nindicates the device is is within the region.\n\n\niBeacon monitoring\n\n\nThe app user may mark a previously manually published or manually created location\nas a monitored beacon region by appending a beacon UUID to the region's name.\nThe app will publish the location\nadditionally every time the device leaves or enters one of the beacon regions, and the\npublished data contains an indication of whether the device is entering or\nleaving the region.\n\n\nRegion monitoring is not related to one of the location publication modes and\nworks independently. It is switched on when a region's name has a valid UUID\nappended to it.\n\n\nIf the device is within a monitored beacon region, the the beacon indicator\nis shown in red, otherwise blue meaning device is not in any iBeacon region.\n\n\nThere are 2 kinds of locations:\n\n\n\n\nan \nautomatic location\n created when iOS detects a change of location\n\n\na \nmanual location\n created by the user\n\n\n\n\nA \nmanual location\n with a non-zero length remark (description) is a \nwaypoint\n.\n\n\nIf a \nwaypoint\n is \nshared\n, its attributes are published when the waypoint is created or changed.\n\n\nIf a \nwaypoint\n specifies a radius, a \ncircular region\n is monitored for \nenter/leave events\n.\n\n\nIf a \nwaypoint\n is not a \ncircular region\n and the waypoint's description contains a valid iBeacon specification, a \nbeacon region\n is monitored for enter/leave events.\n\n\nIf an enter/leave event occurs an event message is published with the \ntype\n attribute set to \nc\nor \nb\nfor (\ncircular region_or _beacon region\n). The message contains an \nevent\n attribute specifying either \nenter\nor \nleave\n.\n\n\nIf the \nwaypoint_is _shared\n, the description of the \nwaypoint\n is added to the published \nevent\n message.\n\n\n\n\n\n\n\n\nAutomatic\n\n\nDescription\n\n\niBeacon\n\n\nRadius\n\n\nShared\n\n\nEvent Message\n\n\n/w Description\n\n\nWaypoint Message\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nY\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\nN\n\n\nN\n\n\nN\n\n\n\n\n\n\n\n\n\n\nN\n\n\nN\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\nN\n\n\nN\n\n\nN\n\n\n\n\n\n\n\n\n\n\nN\n\n\nY\n\n\nN\n\n\nN\n\n\nN\n\n\nN\n\n\nN\n\n\nN\n\n\n\n\n\n\n\n\n\n\nN\n\n\nY\n\n\nN\n\n\nN\n\n\nY\n\n\nN\n\n\nN\n\n\nY\n\n\n\n\n\n\n\n\n\n\nN\n\n\nY\n\n\nN\n\n\nY\n\n\nN\n\n\nc\n\n\nN\n\n\nN\n\n\n\n\n\n\n\n\n\n\nN\n\n\nY\n\n\nN\n\n\nY\n\n\nY\n\n\nc\n\n\nY\n\n\nY\n\n\n\n\n\n\n\n\n\n\nN\n\n\nY\n\n\nY\n\n\nN\n\n\nN\n\n\nb\n\n\nN\n\n\nN\n\n\n\n\n\n\n\n\n\n\nN\n\n\nY\n\n\nY\n\n\nN\n\n\nY\n\n\nb\n\n\nY\n\n\nY\n\n\n\n\n\n\n\n\n\n\nN\n\n\nY\n\n\nY\n\n\nY\n\n\nN\n\n\nc\n\n\nN\n\n\nN\n\n\n\n\n\n\n\n\n\n\nN\n\n\nY\n\n\nY\n\n\nY\n\n\nY\n\n\nc\n\n\nY\n\n\nY", 
            "title": "Location"
        }, 
        {
            "location": "/features/location/#location-data", 
            "text": "Location data is obtained by your smartphone and published to the  MQTT broker  as follows:  Android  The way it currently works is by specifying an interval in which you want to receive updates (the one you configure in the settings). You only receive updates if this amount of time has passed and you moved more than 500m (when the app is in the background. The movement restriction is set to 50m or so when in the foreground).  Say I set an interval of 10min and I don't move; will I get a PUBlish? No. \nIf you move more than 500 meters in 5 minutes you'll get a PUB after 10 minutes. You won't get a PUB after 5 minutes though.  Additional restrictions apply regarding the update intervall. When switching into the background or foreground, a new location request is setup with a different granularity and energy requirement. As a result, a new location is received immedeately by the app.   Thus, when the app goes into the background, a new location is received. Most likely, this will not result in a publish as the last publish was not longer ago than 10 minutes. Say the last update was exactly 9 minutes ago when the background mode is enabled. In this case no publish will be sent. However, the next location will probably only be received after the specified 10 minutes. At this point, the time of the last publish is longer than 10 minutes ago. So in this worst case, around 20 will pass before a location will be sent.   If you switch on the app after one minute in the background (11 minutes after the last publish), a new report will be sent immediately as soon as a new location is available.   iOS  The iOS app offers 3 modes of location publication:   Quiet  mode  Manual  mode  Significant location change  mode  Move  mode   In addition to this, there's also  Region Monitoring  (a.k.a. Geo Fence) and  iBeacon Monitoring  and  iBeacon Ranging .  Move  mode  In  move  mode, the app monitors location permanently and publishes a new\nlocation as soon as the device moves  x  meters or after  t  seconds, whatever\nhappens first.  x  and  t  can be adjusted by the user in the systems settings for\nOwnTracks. The defaults are 100m and 300 seconds (5 minutes).   The payoff is higher battery usage as high as in navigation or tracker app.\nSo it is recommend to use  move  mode while charging or during moves only - hence the name.  Please note,  move  mode is active when the app is active (a.k.a in foreground).  Significant location change  mode  iOS defines a  Significant location change  as travelling a distance of at least\n500 meters in 5 minutes.  This mode allows the app to run in background and\nminimize the power consumption.  This standard tracking mode reports significant location changes only ( 500m\nand at most once every 5 minutes).  This is defined by Apple and is optimal\nwith respect to battery usage.  Examples:   if you don't move, no new location is published - even if you don't move for hours. (Note, however, that the app will publish a  ping -type message once in a while.)  if you move at least 500 meters, a new location will be published after 5 minutes  if you move 10 kilometers in 5 minutes, only one location will be published   Manual  mode  The app doesn't monitor location changes in  manual  mode while in background.\nThe user has to publish the current location explicitly via the UI. You use this if\nyou want to (temporarily) avoid friends seeing where you are. Note that Region events\ntriggered by entering or leaving Geo Fence or Beacon regions\nare still published automatically whilst in  Manual  mode.  Quiet  mode  Same as  Manual  mode except that no region events are published.  Region  monitoring  The app user may mark a previously manually published or manually created \nlocation as a monitored circular region by specifying a monitoring radius in meters. (See  Waypoints .)\nThe app will publish the location\nadditionally everytime the device leaves or enters one of the regions, and the\npublished data contains an indication of whether the device is entering or\nleaving the region.  Region monitoring is not related to one of the location publication modes and\nworks independently thereof. It is switched on when a region is setup with description\nand radius. To switch region monitoring off, all regions have to be \nunmarked (by setting their radius to 0).  Regions are shown on the map display in transparent blue or red circles. Red\nindicates the device is is within the region.  iBeacon monitoring  The app user may mark a previously manually published or manually created location\nas a monitored beacon region by appending a beacon UUID to the region's name.\nThe app will publish the location\nadditionally every time the device leaves or enters one of the beacon regions, and the\npublished data contains an indication of whether the device is entering or\nleaving the region.  Region monitoring is not related to one of the location publication modes and\nworks independently. It is switched on when a region's name has a valid UUID\nappended to it.  If the device is within a monitored beacon region, the the beacon indicator\nis shown in red, otherwise blue meaning device is not in any iBeacon region.  There are 2 kinds of locations:   an  automatic location  created when iOS detects a change of location  a  manual location  created by the user   A  manual location  with a non-zero length remark (description) is a  waypoint .  If a  waypoint  is  shared , its attributes are published when the waypoint is created or changed.  If a  waypoint  specifies a radius, a  circular region  is monitored for  enter/leave events .  If a  waypoint  is not a  circular region  and the waypoint's description contains a valid iBeacon specification, a  beacon region  is monitored for enter/leave events.  If an enter/leave event occurs an event message is published with the  type  attribute set to  c or  b for ( circular region_or _beacon region ). The message contains an  event  attribute specifying either  enter or  leave .  If the  waypoint_is _shared , the description of the  waypoint  is added to the published  event  message.     Automatic  Description  iBeacon  Radius  Shared  Event Message  /w Description  Waypoint Message        Y  n/a  n/a  n/a  n/a  N  N  N      N  N  n/a  n/a  n/a  N  N  N      N  Y  N  N  N  N  N  N      N  Y  N  N  Y  N  N  Y      N  Y  N  Y  N  c  N  N      N  Y  N  Y  Y  c  Y  Y      N  Y  Y  N  N  b  N  N      N  Y  Y  N  Y  b  Y  Y      N  Y  Y  Y  N  c  N  N      N  Y  Y  Y  Y  c  Y  Y", 
            "title": "Location data"
        }, 
        {
            "location": "/features/tid/", 
            "text": "TID\n\n\nA \nTID\n is a \ntracker ID\n, a two-character identifier of your chosing, your initials, say. This \nTID\n is published in the \nJSON payload\n of each message published by OwnTracks and is meant to be used as a short identifier which is easier to read than a rather \nlong topic name\n.\n\n\n\n\nThe \nTID\n of your \nfriends\n is displayed on the OwnTracks map if you don't have an address book entry associated with that friend, and if said friend has no retained \ncard\n published.\n\n\nThe \nTID\n is also used by our \nPista client\n when you're about to select a track for a particular OwnTracks user.", 
            "title": "TID"
        }, 
        {
            "location": "/features/tid/#tid", 
            "text": "A  TID  is a  tracker ID , a two-character identifier of your chosing, your initials, say. This  TID  is published in the  JSON payload  of each message published by OwnTracks and is meant to be used as a short identifier which is easier to read than a rather  long topic name .   The  TID  of your  friends  is displayed on the OwnTracks map if you don't have an address book entry associated with that friend, and if said friend has no retained  card  published.  The  TID  is also used by our  Pista client  when you're about to select a track for a particular OwnTracks user.", 
            "title": "TID"
        }, 
        {
            "location": "/features/friends/", 
            "text": "Friends\n\n\nOwnTracks has a so-called \nFriends and Family\n capability which is enabled by\ndefault. The way this works is friends and/or family members who share a single\n\nMQTT broker\n can \"see\" eachother on the map, respectively on a\nlist of friends held by the app.  (This can be done either by configuring all\napps to use the same broker or by what is called \nbridging\n.)\n\n\nLet's assume for a moment, that a user Jane (user name \njjolie\n) has an iPhone 4s (device name \n4s\n), and that she publishes location data to a topic at\n\n\nowntracks/jjolie/4s\n\n\n\n\nLet us further assume, that her friend John (user name \njohn\n) has an Android Nexus 4 (device name \nnex4\n) and he therefore publishes on the \nsame broker\n to a topic called\n\n\nowntracks/john/nex4\n\n\n\n\nLet us further assume that access control on the \nMQTT broker\n allows both users to subscribe to eachother's topics.\n\n\nNow, if \nboth\n friends subscribe to a topic called \nowntracks/+/+\n (which the\napps do by default) their devices will effectively receive published location\nmessages to either topic. So when either Jane or John publish their location,\nthe other's device will receive it.\n\n\nWhat OwnTracks then does is to list these topic names (e.g. \nowntracks/jjolie/4s\n) with the last received position and a time stamp. A click on a particular entry will take you to that entry's location on the map. Neat, eh?\n\n\nFaces\n\n\nIt gets better.\n\n\nYou probably don't want to remember the (sometimes cryptic) topic names of your friends or family members, but you would like to see their names and a matching face. That's no problem: OwnTracks can do that.\n\n\nDepending on the device you're using, the procedure differs slightly.\n\n\nAndroid\n\n\nThe app subscribes to a topic branch \nowntracks/+/+\n on the broker per default\n(but this can be configured in advanced preferences) to receive locations of\nother people connected to the the same [[MQTT broker|MQTTbroker]] that publish\nto the default topic of \nmqttittude/$username/$devicename\n.\n\n\nWhen the app receives a message published by a different user, it looks for a\ncontact with an instant messenger (\nIM\n) entry of type \"\nOwnTracks\n\" (case insensitive)\nwhose entry value is equal to the topic of the received location\npublish. If a contact is found, the contact is shown with its profile picture\nand name instead of the topic in the list and on the map.\n\n\nNote that if you add an IM entry to a contact via, say, Google, you have to\nsync the contact to your phone (phone preferences/accounts/google/sync untick\nand tick contacts, wait a few seconds) and restart the app. In other words, the\ncontact's data must be on your device.\n\n\nAdd an instant-messaging (\nIM\n) entry to the contact you want to associate with\na particular MQTT topic name. The tag of the \nIM\n should be \"\nOwnTracks\n\" (case\nindependent), and the value is the topic name.\n\n\n\n\nThe \nLocations\n list will then show you your contact's name and photo:\n\n\n\n\niOS\n\n\nThe app \"sees\" a friend as soon as it receives a publish to the topic branch subscribed to, which by default is \nowntracks/+/+\n.\n\n\nSelect the \nFriends\n button to see a list of friends:\n\n\n\n\nTapping on one of the friends, performs a reverse geo-coding to show address. Furthermore, a click on the little right-arrow shows the last location and\nall shared waypoints of that friend.\n\n\nWho is that?\n\n\nIt's difficult to remember which MQTT topic belongs to which friend, so we can associate a topic with an image of the friend as contained in the iOS address book:\n\n\nSelect an entry:\n\n\n\n\nThen click on the \nbookmark\n icon on top right. The Address book opens.\n\n\n\n\nSelect the entry you want to associate with the OwnTracks topic. In this\nexample, I choose Kate Bell.\n\n\n\n\nWe're back in OwnTracks, and we see the picture from the addressbook.\nIf you want to release the association, select the wastepaper basket icon in the address book screen. The display\nchanges back from the picture and name of the friend to the mqtt topic (e.g. \"owntracks/kate/nexus4\").\n\n\n\n\n\n\nWhen you zoom the map out (or near to the friend's location), you see a small rendition of the icon directly on the map.\n\n\n\n\nVoila!\n\n\nNote: this works only with contacts stored locally -- not with corporate address books associated with your iPhone.\n\n\nTo support corporate address books (which usually cannot be updated) the ios\napp Version \n=5.1 can be set to store the associations locally rather than in\nthe address book. You find the respective switch in the expert mode settings.\nSwitch it \noff\n (i.e. disabled) to keep associations between MQTT topics and \nyour contact within OwnTracks.", 
            "title": "Friends"
        }, 
        {
            "location": "/features/friends/#friends", 
            "text": "OwnTracks has a so-called  Friends and Family  capability which is enabled by\ndefault. The way this works is friends and/or family members who share a single MQTT broker  can \"see\" eachother on the map, respectively on a\nlist of friends held by the app.  (This can be done either by configuring all\napps to use the same broker or by what is called  bridging .)  Let's assume for a moment, that a user Jane (user name  jjolie ) has an iPhone 4s (device name  4s ), and that she publishes location data to a topic at  owntracks/jjolie/4s  Let us further assume, that her friend John (user name  john ) has an Android Nexus 4 (device name  nex4 ) and he therefore publishes on the  same broker  to a topic called  owntracks/john/nex4  Let us further assume that access control on the  MQTT broker  allows both users to subscribe to eachother's topics.  Now, if  both  friends subscribe to a topic called  owntracks/+/+  (which the\napps do by default) their devices will effectively receive published location\nmessages to either topic. So when either Jane or John publish their location,\nthe other's device will receive it.  What OwnTracks then does is to list these topic names (e.g.  owntracks/jjolie/4s ) with the last received position and a time stamp. A click on a particular entry will take you to that entry's location on the map. Neat, eh?  Faces  It gets better.  You probably don't want to remember the (sometimes cryptic) topic names of your friends or family members, but you would like to see their names and a matching face. That's no problem: OwnTracks can do that.  Depending on the device you're using, the procedure differs slightly.  Android  The app subscribes to a topic branch  owntracks/+/+  on the broker per default\n(but this can be configured in advanced preferences) to receive locations of\nother people connected to the the same [[MQTT broker|MQTTbroker]] that publish\nto the default topic of  mqttittude/$username/$devicename .  When the app receives a message published by a different user, it looks for a\ncontact with an instant messenger ( IM ) entry of type \" OwnTracks \" (case insensitive)\nwhose entry value is equal to the topic of the received location\npublish. If a contact is found, the contact is shown with its profile picture\nand name instead of the topic in the list and on the map.  Note that if you add an IM entry to a contact via, say, Google, you have to\nsync the contact to your phone (phone preferences/accounts/google/sync untick\nand tick contacts, wait a few seconds) and restart the app. In other words, the\ncontact's data must be on your device.  Add an instant-messaging ( IM ) entry to the contact you want to associate with\na particular MQTT topic name. The tag of the  IM  should be \" OwnTracks \" (case\nindependent), and the value is the topic name.   The  Locations  list will then show you your contact's name and photo:   iOS  The app \"sees\" a friend as soon as it receives a publish to the topic branch subscribed to, which by default is  owntracks/+/+ .  Select the  Friends  button to see a list of friends:   Tapping on one of the friends, performs a reverse geo-coding to show address. Furthermore, a click on the little right-arrow shows the last location and\nall shared waypoints of that friend.", 
            "title": "Friends"
        }, 
        {
            "location": "/features/friends/#who-is-that", 
            "text": "It's difficult to remember which MQTT topic belongs to which friend, so we can associate a topic with an image of the friend as contained in the iOS address book:  Select an entry:   Then click on the  bookmark  icon on top right. The Address book opens.   Select the entry you want to associate with the OwnTracks topic. In this\nexample, I choose Kate Bell.   We're back in OwnTracks, and we see the picture from the addressbook.\nIf you want to release the association, select the wastepaper basket icon in the address book screen. The display\nchanges back from the picture and name of the friend to the mqtt topic (e.g. \"owntracks/kate/nexus4\").    When you zoom the map out (or near to the friend's location), you see a small rendition of the icon directly on the map.   Voila!  Note: this works only with contacts stored locally -- not with corporate address books associated with your iPhone.  To support corporate address books (which usually cannot be updated) the ios\napp Version  =5.1 can be set to store the associations locally rather than in\nthe address book. You find the respective switch in the expert mode settings.\nSwitch it  off  (i.e. disabled) to keep associations between MQTT topics and \nyour contact within OwnTracks.", 
            "title": "Who is that?"
        }, 
        {
            "location": "/features/card/", 
            "text": "Card\n\n\nOwnTracks typically displays the \nTID\n of a \nfriend\n on the map, but you can associate an address book entry to that friend in order to see a friendly face (if you have you friend's photo in your device's address book) and/or a friendly name.\n\n\n\n\nWe developed a new feature we call a \ncard\n which you can use when in in \nPrivate mode\n. A card is a retained message which contains a \nJSON payload\n which, in absence of an address-book association, will be used to populate your friend on your map. The payload contains a full name (hopefully one you recognize), and an avatar -- a small image. If a card exists it will be used, but you can override its use in OwnTracks by associating your friend with an address book entry of your own device.\n\n\n{\n  \n_type\n: \ncard\n,\n  \nname\n: \nJane Jolie\n\n  \nface\n: \niV1CFEVkMhmCIKBUKh3 ... ghAAAAABJRU5ErkJggg==\n,\n}\n\n\n\n\nCreating a card\n\n\nWe provide several utilities for creating a \ncard\n in the \nRecorder's repository\n:\n\n\n\n\nIf you have an image file you want to use, use \nimage2card.sh\n, passing \nimage-filename\n and \nfullname\n.\n\n\nIf you know a user has a Github profile with a name and an avatar, use \ngithub2card.py\n which takes a Github username as argument.\n\n\nIf you know a user has a Gravatar, use \ngravatar2card.sh\n, passing \nemail\n and \nfullname\n.\n\n\n\n\nThese utilities create a \ncard\n on standard output, and you typically then publish the result as a retained message to your MQTT broker:\n\n\n./github2card.py defunkt \n my-card.json\nmosquitto_pub -t owntracks/jjolie/phone/info -f my-card.json -r\n\n\n\n\nNote the topic branch ending in \ninfo\n and note the use of the retain flag (\n-r\n).", 
            "title": "Card"
        }, 
        {
            "location": "/features/card/#card", 
            "text": "OwnTracks typically displays the  TID  of a  friend  on the map, but you can associate an address book entry to that friend in order to see a friendly face (if you have you friend's photo in your device's address book) and/or a friendly name.   We developed a new feature we call a  card  which you can use when in in  Private mode . A card is a retained message which contains a  JSON payload  which, in absence of an address-book association, will be used to populate your friend on your map. The payload contains a full name (hopefully one you recognize), and an avatar -- a small image. If a card exists it will be used, but you can override its use in OwnTracks by associating your friend with an address book entry of your own device.  {\n   _type :  card ,\n   name :  Jane Jolie \n   face :  iV1CFEVkMhmCIKBUKh3 ... ghAAAAABJRU5ErkJggg== ,\n}  Creating a card  We provide several utilities for creating a  card  in the  Recorder's repository :   If you have an image file you want to use, use  image2card.sh , passing  image-filename  and  fullname .  If you know a user has a Github profile with a name and an avatar, use  github2card.py  which takes a Github username as argument.  If you know a user has a Gravatar, use  gravatar2card.sh , passing  email  and  fullname .   These utilities create a  card  on standard output, and you typically then publish the result as a retained message to your MQTT broker:  ./github2card.py defunkt   my-card.json\nmosquitto_pub -t owntracks/jjolie/phone/info -f my-card.json -r  Note the topic branch ending in  info  and note the use of the retain flag ( -r ).", 
            "title": "Card"
        }, 
        {
            "location": "/features/waypoints/", 
            "text": "Waypoints\n\n\nThe \nbase topic\n for publishes from the devices (OwnTracks apps) is what you configure it\nto be in the app's preferences/settings. For argument's sake we'll use\n\nowntracks/\nuser\n/\ndevice\n as our example.\n\n\nThis base topic is used for publishes of type \nlocation\n (see \nJSON\n).\nAll messages published to this base topic are retained if you have configured\nthe app to retain them.\n\n\nAdditionally, if you've configured a geo-fence, a transition event will be published upon\nentering or leaving a waypoint:\n\n\n\n\nrad\nius (if its value is greater than 0)\n\n\ndesc\nription with the name you set for the waypoint\n\n\nevent\n with a value of \n\"enter\"\n or \n\"leave\"\n, depending on\n   whether the device is entering or leaving a configured region, respectively.\n\n\n\n\nIf you set up a shared waypoint, the app publishes that waypoint (with \nretain=0\n \nirrespective of your general preference) to the base topic with \n/waypoints\n\ntacked onto the topic (e.g. \nowntracks/\nuser\n/\ndevice\n/waypoints\n) with the\npayload for \n_type=waypoint\n as specified in the \nJSON page\n. For waypoints with disabled sharing, no waypoint message is published. These can be used to note down locations privately. But note that entering or leaving a waypoint will be published as a \nlocation\n message as described above.\n\n\nFor example, If Jane configures a waypoint on her iPhone\n\n\n\n\n\n\nthe app will publish the following payload\n\n\n{\n    \n_type\n: \nwaypoint\n,\n    \ndesc\n: \nParis is lovely\n,\n    \nlat\n: \n48.858330\n,\n    \nlon\n: \n2.295130\n,\n    \nrad\n: \n50\n,\n    \ntst\n: \n1385997757\n\n}\n\n\n\n\nWhen you set up a shared waypoint (with a \ndesc\nription and a \nrad\nius), this\nwaypoint is published to the broker with the current time stamp. If you update\nthe waypoint definition on the device at a later stage, the waypoint is\nre-published, with the \noriginal\n timestamp, but with possibly new\n\ndesc\nription and/or \nrad\nius. To be precise, the \ntst\n timestamp is used as an\nidentifier of the waypoint even if it is later modified on the device. For waypoints that are not shared, the above obviously does not apply. \n\n\n\n\nSubscribers to the broker (our apps and any other program) can avoid getting\nwaypoints by subscribing to, say, \nowntracks/+/+\n; also broker ACLs can\nprohibit access to \nowntracks/+/+/waypoints\n for particular users if so desired.\nConversely, all messages published by the apps (\nlocation\n and \nwaypoint\n) are\navailable with a subscription to \nowntracks/#\n.\n\n\nThe OwnTracks apps may keep track of waypoints, e.g. for displaying to users. \n\n\niOS\n\n\nOn iOS you can navigate to the place where you want to put a waypoint, Tap long and edit the Waypoint. The waypoint is always placed at the center of the map (hence it's predefined name \nCenter\n, which you should change to something meaningful). With a bit of practice, you can then drag the waypoint to it's final destination on the map or, and this may be easier, edit the waypoint and specify its exact coordinates.\n\n\nSetting up iBeacons\n\n\nOn iOS you can \nmonitor an iBeacon region\n in addition to circular regions.\n\n\nRemote loading of waypoints\n\n\nDo you want to prepare your waypoints at home and load to your device?\n\n\nHere's what you can do with OwnTracks for iOS:\n\n\n\n\nCreate a configuration file in JSON with an \n.otrw\n suffix (for OwnTracks Configuration). (The legacy \n.mqtw\n suffix is also supported.)\n\n\nSend the file to the device via e-mail, HTTP, Dropbox, ... you name it.\n\n\nOpen the file on the device with OwnTracks\n\n\n\n\nHere is a sample waypoints file which follows the settings as explained in\n\nJSON\n  The \n_type\n entry is mandatory, all other entries are\noptional; they are replaced by built-in\ndefaults if not specified.\n\n\n{\n  \n_type\n: \nwaypoints\n,\n  \nwaypoints\n: [\n    {\n      \ndesc\n: \nfifty/eight\n,\n      \nrad\n: \n100\n,\n      \nlon\n: \n8.0\n,\n      \nlat\n: \n50.0\n,\n      \ntst\n: \n100000000\n,\n      \n_type\n: \nwaypoint\n\n    },\n    {\n      \ndesc\n: \nforty/minus-eight\n,\n      \nrad\n: \n500\n,\n      \nlon\n: \n-8.0\n,\n      \nlat\n: \n40.0\n,\n      \ntst\n: \n100000001\n,\n      \n_type\n: \nwaypoint\n\n    }\n  ]\n}\n\n\n\n\nYou can use this to import individual waypoints or groups of pre-configured waypoints which are merged into the existing waypoint definitions on the device. Recall, however, that the \ntst\n element is like a \nkey\n which uniquely identifies each waypoint.", 
            "title": "Waypoints"
        }, 
        {
            "location": "/features/waypoints/#waypoints", 
            "text": "The  base topic  for publishes from the devices (OwnTracks apps) is what you configure it\nto be in the app's preferences/settings. For argument's sake we'll use owntracks/ user / device  as our example.  This base topic is used for publishes of type  location  (see  JSON ).\nAll messages published to this base topic are retained if you have configured\nthe app to retain them.  Additionally, if you've configured a geo-fence, a transition event will be published upon\nentering or leaving a waypoint:   rad ius (if its value is greater than 0)  desc ription with the name you set for the waypoint  event  with a value of  \"enter\"  or  \"leave\" , depending on\n   whether the device is entering or leaving a configured region, respectively.   If you set up a shared waypoint, the app publishes that waypoint (with  retain=0  \nirrespective of your general preference) to the base topic with  /waypoints \ntacked onto the topic (e.g.  owntracks/ user / device /waypoints ) with the\npayload for  _type=waypoint  as specified in the  JSON page . For waypoints with disabled sharing, no waypoint message is published. These can be used to note down locations privately. But note that entering or leaving a waypoint will be published as a  location  message as described above.  For example, If Jane configures a waypoint on her iPhone    the app will publish the following payload  {\n     _type :  waypoint ,\n     desc :  Paris is lovely ,\n     lat :  48.858330 ,\n     lon :  2.295130 ,\n     rad :  50 ,\n     tst :  1385997757 \n}  When you set up a shared waypoint (with a  desc ription and a  rad ius), this\nwaypoint is published to the broker with the current time stamp. If you update\nthe waypoint definition on the device at a later stage, the waypoint is\nre-published, with the  original  timestamp, but with possibly new desc ription and/or  rad ius. To be precise, the  tst  timestamp is used as an\nidentifier of the waypoint even if it is later modified on the device. For waypoints that are not shared, the above obviously does not apply.    Subscribers to the broker (our apps and any other program) can avoid getting\nwaypoints by subscribing to, say,  owntracks/+/+ ; also broker ACLs can\nprohibit access to  owntracks/+/+/waypoints  for particular users if so desired.\nConversely, all messages published by the apps ( location  and  waypoint ) are\navailable with a subscription to  owntracks/# .  The OwnTracks apps may keep track of waypoints, e.g. for displaying to users.   iOS  On iOS you can navigate to the place where you want to put a waypoint, Tap long and edit the Waypoint. The waypoint is always placed at the center of the map (hence it's predefined name  Center , which you should change to something meaningful). With a bit of practice, you can then drag the waypoint to it's final destination on the map or, and this may be easier, edit the waypoint and specify its exact coordinates.", 
            "title": "Waypoints"
        }, 
        {
            "location": "/features/waypoints/#setting-up-ibeacons", 
            "text": "On iOS you can  monitor an iBeacon region  in addition to circular regions.", 
            "title": "Setting up iBeacons"
        }, 
        {
            "location": "/features/waypoints/#remote-loading-of-waypoints", 
            "text": "Do you want to prepare your waypoints at home and load to your device?  Here's what you can do with OwnTracks for iOS:   Create a configuration file in JSON with an  .otrw  suffix (for OwnTracks Configuration). (The legacy  .mqtw  suffix is also supported.)  Send the file to the device via e-mail, HTTP, Dropbox, ... you name it.  Open the file on the device with OwnTracks   Here is a sample waypoints file which follows the settings as explained in JSON   The  _type  entry is mandatory, all other entries are\noptional; they are replaced by built-in\ndefaults if not specified.  {\n   _type :  waypoints ,\n   waypoints : [\n    {\n       desc :  fifty/eight ,\n       rad :  100 ,\n       lon :  8.0 ,\n       lat :  50.0 ,\n       tst :  100000000 ,\n       _type :  waypoint \n    },\n    {\n       desc :  forty/minus-eight ,\n       rad :  500 ,\n       lon :  -8.0 ,\n       lat :  40.0 ,\n       tst :  100000001 ,\n       _type :  waypoint \n    }\n  ]\n}  You can use this to import individual waypoints or groups of pre-configured waypoints which are merged into the existing waypoint definitions on the device. Recall, however, that the  tst  element is like a  key  which uniquely identifies each waypoint.", 
            "title": "Remote loading of waypoints"
        }, 
        {
            "location": "/features/beacons/", 
            "text": "iBeacons\n\n\nNote: currently iOS only.\n\n\nIf you want to monitor an iBeacon region rather than a circular region set the\nradius to zero (\n0\n) or a negative value, and add the beacon UUID, major, and minor numbers.\n\n\n\n\nSet the UUID of the beacon, and you can optionally specify the major and/or\nminor identifier numbers of the beacons as a decimal number ranging from 1 to 65535 if you desire finer control over which beacons OwnTracks will monitor.\nSetting major or minor number to zero (\n0\n) means no major or minor number is specified.\n\n\nIf the UUID is valid, iBeacon monitoring will start.\n\n\nExamples:\n\n\nName  myBeacons\nUUID  CA271EAE-5FA8-4E80-8F08-2A302A95A959\nMajor 0\nMinor 0\n\nName  mySpecificBeacon\nUUID  CA271EAE-5FA8-4E80-8F08-2A302A95A959\nMajor 1\nMinor 33000\n\n\n\n\nIn the first example above, OwnTracks will monitor all beacons with the specified UUID, whereas\nin the second example, OwnTracks would monitor just that one specific beacon with the major number \n1\n and the minor number \n33000\n.\n\n\nNotes\n\n\nThe app recognizes the beacon typically within 10 seconds, which is a typical beacon-publishing frequency, and this is very good for presence detection.\n\n\nIf you use a \n-\n as the first character in your Waypoint description e.g. \n-MyBeacon\n, the app will ignore short disruptions of the connection to the beacon (hold down).\n\n\nSetting the radius to a negative value (e.g. \n-1\n), the app will update the location coordinates of the waypoint on each enter/leave event. This update will be transmitted to the broker when the \nshare\n option is on and will be reflected on your map screen. You may use this to keep track of moveable items as luggage or your car.\n\n\nExample: office\n\n\nUpon arriving at our Frankfurt location, I see from the monitor panel at the reception that Jane is in the office, so I'll pop in to ask a question.\n\n\n\n\nInstead of relying solely on the location your smart phone thinks you are at, small, and relatively inexpensive \niBeacons\n can pinpoint you down to a few meters. OwnTracks for iOS has had support for iBeacons for a few releases now, and it works very reliably.\n\n\nBeacons use Bluetooth low energy to transmit a UUID (typically modifiable) together with user-defined \nmajor\n and \nminor\n numbers, and these allow us to identify, say, a particular room in a building or even a specific corner of a room. The \nmajor\n number can be used, say, to identify an office building, whereas you'd configure a beacon's \nminor\n number to identify a room within that building. Alternatively, if you don't want to bother with identifying rooms, you can e.g. set all beacons to have the same \nmajor\n and \nminor\n numbers.\n\n\nLet's assume the office we're discussing has a few beacons. Let's further assume we do not want to track people within a particular room; instead we just want to capture whether an employee is in this particular office building. We can configure all beacons with the same UUID, and we will ignore the \nmajor\n and \nminor\n numbers. (How a beacon gets it's UUID, \nmajor\n, and \nminor\n set depends on the product.)\n\n\nWe define a UUID, say, \nDEADBEEF-ABBA-CAFE-AFFE-123456789012\n which we assign to all beacons, and configure them accordingly. (The \nBlukii\n iBeacons we use have a utility with which we can configure them accordingly.)\n\n\nWhat we then do is configure a waypoint within the iOS OwnTracks app. The values for latitude/longitude are irrelevant. What is important is the UUID separated from the name of the beacon (I chose \nMain@WestWing\n here) by a colon. A beacon's \nmajor\n and \nminor\n are optionally concatenated to that string, also colon-separated.\n\n\nInstead of painstakingly configuring this on the device proper, I prepare a small file called \noffice.otrw\n (the \n.otrw\n extension is important), with the following \nJSON\n payload:\n\n\n{\n  \nwaypoints\n : [\n    {\n      \ntst\n : 1432817332,\n      \nlat\n : 52.0,\n      \n_type\n : \nwaypoint\n,\n      \nlon\n : 6.0,\n      \nrad\n : 0,\n      \ndesc\n : \nMain@WestWing:DEADBEEF-ABBA-CAFE-AFFE-123456789012:0001\n\n    }\n  ],\n  \n_type\n : \nwaypoints\n\n}\n\n\n\n\nI then either place that file on a Web server, or e-mail it as attachment to my colleagues who open that on their OwnTracks device, and presto: the device has the beacon monitoring regions configured.\n\n\nFrom this point on, OwnTracks monitors all beacons with that particular UUID, and it will publish an \nenter\n or \nleave\n event whenever the device gets within range of a beacon or leaves it. Additionally, the device shows the event with a local iOS notification.\n\n\n\n\nWe publish these \nevents as JSON\n via MQTT to the MQTT broker the device is connected to, and from there, you consume the message and do as you please.\n\n\n{\n    \n_type\n: \ntransition\n,\n    \nacc\n: 65,\n    \ndesc\n: \nMain@WestWing\n,\n    \nevent\n: \nenter\n,\n    \nlat\n: 2.2222,\n    \nlon\n: 1.1111,\n    \ntid\n: \njp\n,\n    \ntst\n: 1433342520,\n    \nwtst\n: 1432817332\n}\n\n\n\n\nFor instance, send an e-mail when a particular person leaves the building, publish a list of people who remain in the building on a monitor (as above), etc.\n\n\nTo summarize: OwnTracks can monitor beacons by configuring it either with:\n\n\n\n\na \nUUID\n only, in which case the app would report any beacon with that UUID, irrespective of its \nmajor\n/\nminor\n numbers.\n\n\na \nUUID\n with a \nmajor\n number: the app would report iBeacons with the specified UUID and exactly that \nmajor\n number\n\n\nall three: the \nUUID\n, the \nmajor\n and \nminor\n numbers, in which case the app reports events on precisely that beacon.\n\n\n\n\nMore examples\n\n\n\n\nWhere exactly did I park my car?", 
            "title": "Beacons"
        }, 
        {
            "location": "/features/beacons/#ibeacons", 
            "text": "Note: currently iOS only.  If you want to monitor an iBeacon region rather than a circular region set the\nradius to zero ( 0 ) or a negative value, and add the beacon UUID, major, and minor numbers.   Set the UUID of the beacon, and you can optionally specify the major and/or\nminor identifier numbers of the beacons as a decimal number ranging from 1 to 65535 if you desire finer control over which beacons OwnTracks will monitor.\nSetting major or minor number to zero ( 0 ) means no major or minor number is specified.  If the UUID is valid, iBeacon monitoring will start.  Examples:  Name  myBeacons\nUUID  CA271EAE-5FA8-4E80-8F08-2A302A95A959\nMajor 0\nMinor 0\n\nName  mySpecificBeacon\nUUID  CA271EAE-5FA8-4E80-8F08-2A302A95A959\nMajor 1\nMinor 33000  In the first example above, OwnTracks will monitor all beacons with the specified UUID, whereas\nin the second example, OwnTracks would monitor just that one specific beacon with the major number  1  and the minor number  33000 .", 
            "title": "iBeacons"
        }, 
        {
            "location": "/features/beacons/#notes", 
            "text": "The app recognizes the beacon typically within 10 seconds, which is a typical beacon-publishing frequency, and this is very good for presence detection.  If you use a  -  as the first character in your Waypoint description e.g.  -MyBeacon , the app will ignore short disruptions of the connection to the beacon (hold down).  Setting the radius to a negative value (e.g.  -1 ), the app will update the location coordinates of the waypoint on each enter/leave event. This update will be transmitted to the broker when the  share  option is on and will be reflected on your map screen. You may use this to keep track of moveable items as luggage or your car.", 
            "title": "Notes"
        }, 
        {
            "location": "/features/beacons/#example-office", 
            "text": "Upon arriving at our Frankfurt location, I see from the monitor panel at the reception that Jane is in the office, so I'll pop in to ask a question.   Instead of relying solely on the location your smart phone thinks you are at, small, and relatively inexpensive  iBeacons  can pinpoint you down to a few meters. OwnTracks for iOS has had support for iBeacons for a few releases now, and it works very reliably.  Beacons use Bluetooth low energy to transmit a UUID (typically modifiable) together with user-defined  major  and  minor  numbers, and these allow us to identify, say, a particular room in a building or even a specific corner of a room. The  major  number can be used, say, to identify an office building, whereas you'd configure a beacon's  minor  number to identify a room within that building. Alternatively, if you don't want to bother with identifying rooms, you can e.g. set all beacons to have the same  major  and  minor  numbers.  Let's assume the office we're discussing has a few beacons. Let's further assume we do not want to track people within a particular room; instead we just want to capture whether an employee is in this particular office building. We can configure all beacons with the same UUID, and we will ignore the  major  and  minor  numbers. (How a beacon gets it's UUID,  major , and  minor  set depends on the product.)  We define a UUID, say,  DEADBEEF-ABBA-CAFE-AFFE-123456789012  which we assign to all beacons, and configure them accordingly. (The  Blukii  iBeacons we use have a utility with which we can configure them accordingly.)  What we then do is configure a waypoint within the iOS OwnTracks app. The values for latitude/longitude are irrelevant. What is important is the UUID separated from the name of the beacon (I chose  Main@WestWing  here) by a colon. A beacon's  major  and  minor  are optionally concatenated to that string, also colon-separated.  Instead of painstakingly configuring this on the device proper, I prepare a small file called  office.otrw  (the  .otrw  extension is important), with the following  JSON  payload:  {\n   waypoints  : [\n    {\n       tst  : 1432817332,\n       lat  : 52.0,\n       _type  :  waypoint ,\n       lon  : 6.0,\n       rad  : 0,\n       desc  :  Main@WestWing:DEADBEEF-ABBA-CAFE-AFFE-123456789012:0001 \n    }\n  ],\n   _type  :  waypoints \n}  I then either place that file on a Web server, or e-mail it as attachment to my colleagues who open that on their OwnTracks device, and presto: the device has the beacon monitoring regions configured.  From this point on, OwnTracks monitors all beacons with that particular UUID, and it will publish an  enter  or  leave  event whenever the device gets within range of a beacon or leaves it. Additionally, the device shows the event with a local iOS notification.   We publish these  events as JSON  via MQTT to the MQTT broker the device is connected to, and from there, you consume the message and do as you please.  {\n     _type :  transition ,\n     acc : 65,\n     desc :  Main@WestWing ,\n     event :  enter ,\n     lat : 2.2222,\n     lon : 1.1111,\n     tid :  jp ,\n     tst : 1433342520,\n     wtst : 1432817332\n}  For instance, send an e-mail when a particular person leaves the building, publish a list of people who remain in the building on a monitor (as above), etc.  To summarize: OwnTracks can monitor beacons by configuring it either with:   a  UUID  only, in which case the app would report any beacon with that UUID, irrespective of its  major / minor  numbers.  a  UUID  with a  major  number: the app would report iBeacons with the specified UUID and exactly that  major  number  all three: the  UUID , the  major  and  minor  numbers, in which case the app reports events on precisely that beacon.", 
            "title": "Example: office"
        }, 
        {
            "location": "/features/beacons/#more-examples", 
            "text": "Where exactly did I park my car?", 
            "title": "More examples"
        }, 
        {
            "location": "/features/pedometer/", 
            "text": "Pedometer\n\n\nThe iPhone 5S has a built-in pedometer which we\u2019ve leveraged into OwnTracks (iOS only).\nThe way this works is that the iPhone counts the steps you take, and OwnTracks\ncan report these in a JSON payload upon request.\n\n\nCommand\n\n\nIn order for the app to actually report the steps counted by the device, you\nsend it a specially formatted command. (The device does not periodically publish steps on its own -- you must trigger it.)\n\n\nmosquitto_pub -q 2 -t owntracks/jj/5s/cmd -m '{\n_type\n : \ncmd\n, \naction\n: \nreportSteps\n}'\n\n\n\n\nNote how we\u2019re using QoS=2 here: the message is published to the MQTT broker,\nand when the phone next wakes up, which happens every few hundred seconds, it\nwill obtain the message, and publish a \nJSON\n payload with the counted steps back\nto your MQTT broker.\n\n\n{\n    \n_type\n: \nsteps\n, \n    \nfrom\n: 1400455130, \n    \nsteps\n: 1234, \n    \nto\n: 1400458000, \n    \ntst\n: 1400455130\n}\n\n\n\n\nDaily reports\n\n\nWe use the following small program to issue the JSON needed to request the\nsteps for the 00:00 - 23:59 time-frame of this particular day (or the day before, etc.)\n\n\n#!/usr/bin/env python\n\nimport datetime\nimport time\nimport json\nimport sys\n\ndays = 0\n\ndef unix_epoch(t, delta):\n    dt = t + delta\n\n    # print dt\n    return int(time.mktime(dt.timetuple()))\n\nnow = datetime.datetime.today()\n\nf = now.replace(now.year, now.month, now.day, 0, 0, 1, 0)\nt = now.replace(now.year, now.month, now.day, 23, 59, 59, 0)\n\ndelta = datetime.timedelta(days=days)\n\n\npayload = {\n        '_type' : 'cmd',\n        'action' : 'reportSteps',\n        'from'  : unix_epoch(f, delta),\n        'to'    : unix_epoch(t, delta),\n}\nprint json.dumps(payload)\n\n\n\n\nIn the evening, a \ncron\n entry sends that off to our broker which will, eventually,\ndeliver the message to the the phone.\n\n\n50 22 * * * /usr/local/bin/reportsteps | mosquitto_pub -q 2 -t owntracks/jpm/5s/cmd -l", 
            "title": "Pedometer"
        }, 
        {
            "location": "/features/pedometer/#pedometer", 
            "text": "The iPhone 5S has a built-in pedometer which we\u2019ve leveraged into OwnTracks (iOS only).\nThe way this works is that the iPhone counts the steps you take, and OwnTracks\ncan report these in a JSON payload upon request.  Command  In order for the app to actually report the steps counted by the device, you\nsend it a specially formatted command. (The device does not periodically publish steps on its own -- you must trigger it.)  mosquitto_pub -q 2 -t owntracks/jj/5s/cmd -m '{ _type  :  cmd ,  action :  reportSteps }'  Note how we\u2019re using QoS=2 here: the message is published to the MQTT broker,\nand when the phone next wakes up, which happens every few hundred seconds, it\nwill obtain the message, and publish a  JSON  payload with the counted steps back\nto your MQTT broker.  {\n     _type :  steps , \n     from : 1400455130, \n     steps : 1234, \n     to : 1400458000, \n     tst : 1400455130\n}  Daily reports  We use the following small program to issue the JSON needed to request the\nsteps for the 00:00 - 23:59 time-frame of this particular day (or the day before, etc.)  #!/usr/bin/env python\n\nimport datetime\nimport time\nimport json\nimport sys\n\ndays = 0\n\ndef unix_epoch(t, delta):\n    dt = t + delta\n\n    # print dt\n    return int(time.mktime(dt.timetuple()))\n\nnow = datetime.datetime.today()\n\nf = now.replace(now.year, now.month, now.day, 0, 0, 1, 0)\nt = now.replace(now.year, now.month, now.day, 23, 59, 59, 0)\n\ndelta = datetime.timedelta(days=days)\n\n\npayload = {\n        '_type' : 'cmd',\n        'action' : 'reportSteps',\n        'from'  : unix_epoch(f, delta),\n        'to'    : unix_epoch(t, delta),\n}\nprint json.dumps(payload)  In the evening, a  cron  entry sends that off to our broker which will, eventually,\ndeliver the message to the the phone.  50 22 * * * /usr/local/bin/reportsteps | mosquitto_pub -q 2 -t owntracks/jpm/5s/cmd -l", 
            "title": "Pedometer"
        }, 
        {
            "location": "/features/settings/", 
            "text": "Settings\n\n\nLocation tracking isn't easy, and people's requirements differ. You may be happy with one location report when your device moves a few kilometers, whereas the next person prefers seeing a minute-by-minute report. As described in \nthe introduction\n??? OwnTracks relies on the device's operating system APIs for this information. What our apps do is to tell the operating system that they're willing to get more or fewer updates if possible. For configuring this, as well as the connection parameters to your [MQTT broker] and sundry options, we have quite a large number of settings.\n\n\niOS \n Android\n\n\nUser\n\n\nDevice\n\n\nSubscribe topic\n\n\nPublish topic\n\n\nTID\n\n\niOS only\n\n\n\n\nDepending on the \nmode\n you're configuring, iOS will show you all or fewer possible settings:\n\n\n\n\nIn \nPublic mode\n you can configure the \nTrackerID\n only.\n\n\n\n\nAndroid only", 
            "title": "Settings"
        }, 
        {
            "location": "/features/settings/#settings", 
            "text": "Location tracking isn't easy, and people's requirements differ. You may be happy with one location report when your device moves a few kilometers, whereas the next person prefers seeing a minute-by-minute report. As described in  the introduction ??? OwnTracks relies on the device's operating system APIs for this information. What our apps do is to tell the operating system that they're willing to get more or fewer updates if possible. For configuring this, as well as the connection parameters to your [MQTT broker] and sundry options, we have quite a large number of settings.  iOS   Android  User  Device  Subscribe topic  Publish topic  TID", 
            "title": "Settings"
        }, 
        {
            "location": "/features/settings/#ios-only", 
            "text": "Depending on the  mode  you're configuring, iOS will show you all or fewer possible settings:   In  Public mode  you can configure the  TrackerID  only.   Android only", 
            "title": "iOS only"
        }, 
        {
            "location": "/features/comparison/", 
            "text": "iOS / Android compared\n\n\nThe OwnTracks \nAndroid\n and \niOS\n apps try to be on par as far as the list\nof supported features is concernened. This table summarizes the current status.\n\n\n\n\n\n\n\n\nFeature\n\n\niOS\n\n\nAndroid\n\n\n\n\n\n\n\n\n\n\nLocation reporting\n\n\nY\n\n\nY\n\n\n\n\n\n\nTLS\n with system certificate\n\n\nY\n\n\nY\n\n\n\n\n\n\nTLS with cert in filesystem\n\n\n-\n\n\nY\n\n\n\n\n\n\nPlain connections (no TLS)\n\n\nY\n\n\nY\n\n\n\n\n\n\nUsername/password authentication\n\n\nY\n\n\nY\n\n\n\n\n\n\nReconnection to broker\n\n\nY\n\n\nY\n\n\n\n\n\n\nAutomatic PUB after move\n\n\nY\n\n\nY\n\n\n\n\n\n\nAutomatic PUB after time\n\n\nY\n\n\nY\n\n\n\n\n\n\nMap with marker\n\n\nY\n\n\nY\n\n\n\n\n\n\nReverse geocoding on map\n\n\nY\n\n\nY\n\n\n\n\n\n\nAccuracy of last-known loc\n\n\nY\n\n\nY\n\n\n\n\n\n\nButton for manual publish\n\n\nY\n\n\nY\n\n\n\n\n\n\nButton for sharing location\n\n\n\n\nY\n\n\n\n\n\n\nConfigurable settings\n\n\nY\n\n\nY\n\n\n\n\n\n\nMove mode\n\n\nY\n\n\n\n\n\n\n\n\nFriends list\n\n\nY\n\n\nY\n\n\n\n\n\n\nGeofencing\n\n\nY\n\n\nY\n\n\n\n\n\n\nWaypoints\n\n\nY\n\n\nY\n\n\n\n\n\n\nLocation data (payload) \npublished as JSON\n\n\nY\n\n\nY\n\n\n\n\n\n\nRemote configuration\n\n\nY\n\n\n\n\n\n\n\n\niBeacons\n\n\nY\n\n\n\n\n\n\n\n\nStep-counting, a.k.a pedometer\n\n\nY\n\n\n\n\n\n\n\n\nPayload encryption\n\n\nY\n\n\nY\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nThe broker connection works well with:\n\n\n\n\n\n\nNo TLS (i.e. plain)\n\n\n\n\nTLS using the Android built-in certificate authorities (either the shipped\n    ones, or user provided ones that require a lock screen password to be set)\n\n\nTLS with user-provided certificates via an absolute path (e.g. to Downloads).\n    This doesn't require a password to be set on the device, but is a bit fiddly\n    to set up.\n\n\n\n\nUsername/password authentication to broker.\n\n\n\n\n\n\nAutomatic publishes at configurable intervals (disabled or \n 1 minute)\n\n\n\n\n\n\nDisplay of a marker at which the app believes the user to be at\n  (lastKnownLocation)\n\n\n\n\n\n\nReverse geo coding that displays the address of lastKnownLocation\n\n\n\n\n\n\nAccuracy of lastKnownLocation (if the accuracy is \n 250m, the marker\n  changes to a circle centered around lastKnownLocation with radius == accuracy)\n\n\n\n\n\n\nButton to manually publish lastKnownLocation\n\n\n\n\n\n\nButton to share a Google Maps link that places a marker at lastKnownLocation\n\n\n\n\n\n\nFor location the Google Fused Location Provider at Balanced Battery\n  Settings is used. This one can re use GPS or other Position fixes that are\n  requested by other apps in order to save battery and select the most\n  appropriate position source.\n\n\n\n\n\n\niOS\n\n\n\n\nRuns on iPhones running iOS \n=6.1 (3GS, 4, 4S, 5, ...) and iPads running iOS \n=6.1 as an iPhone app. Not tested on iPods yet.\n\n\n\n\nUI is iOS7 compliant\n\n\n\n\n\n\nMonitors \"significant location changes\" as defined by Apple Inc. (about 5 minutes AND \n    \"significant location changes\" (\n500m)) or as described in Move Mode below.\n    In addition version \n= 5.3 supports circular region monitoring (aka geo fences).\n    In addition version \n= 7.7 supports iBeacon region monitoring and ranging.\n\n\n\n\n\n\npublishes this locations via MQTT to the configured server while in foreground and background.\n\n\n\n\n\n\nThe current location can be sent (a.k.a. published) on request.", 
            "title": "Comparison"
        }, 
        {
            "location": "/features/comparison/#ios-android-compared", 
            "text": "The OwnTracks  Android  and  iOS  apps try to be on par as far as the list\nof supported features is concernened. This table summarizes the current status.     Feature  iOS  Android      Location reporting  Y  Y    TLS  with system certificate  Y  Y    TLS with cert in filesystem  -  Y    Plain connections (no TLS)  Y  Y    Username/password authentication  Y  Y    Reconnection to broker  Y  Y    Automatic PUB after move  Y  Y    Automatic PUB after time  Y  Y    Map with marker  Y  Y    Reverse geocoding on map  Y  Y    Accuracy of last-known loc  Y  Y    Button for manual publish  Y  Y    Button for sharing location   Y    Configurable settings  Y  Y    Move mode  Y     Friends list  Y  Y    Geofencing  Y  Y    Waypoints  Y  Y    Location data (payload)  published as JSON  Y  Y    Remote configuration  Y     iBeacons  Y     Step-counting, a.k.a pedometer  Y     Payload encryption  Y  Y     Android    The broker connection works well with:    No TLS (i.e. plain)   TLS using the Android built-in certificate authorities (either the shipped\n    ones, or user provided ones that require a lock screen password to be set)  TLS with user-provided certificates via an absolute path (e.g. to Downloads).\n    This doesn't require a password to be set on the device, but is a bit fiddly\n    to set up.   Username/password authentication to broker.    Automatic publishes at configurable intervals (disabled or   1 minute)    Display of a marker at which the app believes the user to be at\n  (lastKnownLocation)    Reverse geo coding that displays the address of lastKnownLocation    Accuracy of lastKnownLocation (if the accuracy is   250m, the marker\n  changes to a circle centered around lastKnownLocation with radius == accuracy)    Button to manually publish lastKnownLocation    Button to share a Google Maps link that places a marker at lastKnownLocation    For location the Google Fused Location Provider at Balanced Battery\n  Settings is used. This one can re use GPS or other Position fixes that are\n  requested by other apps in order to save battery and select the most\n  appropriate position source.    iOS   Runs on iPhones running iOS  =6.1 (3GS, 4, 4S, 5, ...) and iPads running iOS  =6.1 as an iPhone app. Not tested on iPods yet.   UI is iOS7 compliant    Monitors \"significant location changes\" as defined by Apple Inc. (about 5 minutes AND \n    \"significant location changes\" ( 500m)) or as described in Move Mode below.\n    In addition version  = 5.3 supports circular region monitoring (aka geo fences).\n    In addition version  = 7.7 supports iBeacon region monitoring and ranging.    publishes this locations via MQTT to the configured server while in foreground and background.    The current location can be sent (a.k.a. published) on request.", 
            "title": "iOS / Android compared"
        }, 
        {
            "location": "/features/android/", 
            "text": "Setup\n\n\nThe most important step to configure the OwnTracks Android app is to configure the broker connection. To do so, specify the hostname and port of your broker in the connection preferences. Additionally, specify a name of your device and the username and password that is used to authenticate yourself on the broker.\n\n\nIn the unlikely case that your broker does not require a username and password, you can enable the advanced connection preferences \nPreferences/Advanced\n. Afterwards an additional menu to select anonymous authentication appears in the connection preferences. Please note that even then, you have to set a device name and username before you can connect as these are also used to construct various other internal things. \n\n\nPer default a [[TLS]] secured communication channel with the broker is assumed. Thus you have to ensure that the broker certificate is properly imported on your device. If you do not want to use TLS, you can enable the advanced connection preferences after which you can disable it in the connection preferences. \nIn recent Android, a passcode is required once custom TLS certificates are imported. If you want to circumvent this, you can enable TLS with custom certificates and specify the absolute filesystem path to the broker certificate on your device. This will circumvent the Android TLS certificate management by using the certificate directly. \n\n\n\n\nReporting\n\n\n\n\nContacts\n\n\nA single checkbox here which determines whether or not you wish to have\nlocation details shown [[for friends|Friends]].\n\n\nNotifications\n\n\n\n\nOwnTracks can optionally show the last reported location in the ticker area,\nfrom which you can also forcefully publish your current location.\n\n\n\n\nAdvanced\n\n\n\n\n\n\nThe map\n\n\nThe app's main screen is the map, which displays your location on it as well as\na reverse geo-coded location if possible.\n\n\n\n\nYou can zoom in and out of the map, and see [[your friends|Friends]] with their photos.\n\n\n\n\nBeta\n\n\nTo receive beta versions and help us with testing new features of the app, you have to join our \nGoogle+ Community\n. Afterwards you can register as a  \nbeta tester\n. After a short time, you will receive the current beta version as a regular update via the Google Play Store. If, for some reason you cannot/do not want to our Google+ community, you can grab the APK by selecting the latest Android tag of our repository from \nhttps://github.com/owntracks/android/tags\n and installing the APK from the apps/android/apk/mqttitude.apk. \n\n\nKeepalive\n\n\nDue to limitations of the Java MQTT library the Android app cannot send native ping messages. As a workaround a one byte long normal message is published to \n$SYS/keepalive\n periodically to keep the connection alive. It is important to ensure that this topic is writable by all Android devices.\n\n\nDevelopment\n\n\nTo contribute to the development, fork the project and clone it to your workstation. Continue to import the project into Eclipse/ADT and opt to open all sub-projects. If this does not automatically import the Google Play Services project into your workspace, import it manually as an extra project. Afterwards, check if the play services are references as project in \nProject Properties \n Android\n. Once imported, create a feature branch, write your changes and commit them to your feature branch. These changes can be pushed to your fork from which you can submit a pull-request to get your changes included in the official code.", 
            "title": "Android"
        }, 
        {
            "location": "/features/android/#setup", 
            "text": "The most important step to configure the OwnTracks Android app is to configure the broker connection. To do so, specify the hostname and port of your broker in the connection preferences. Additionally, specify a name of your device and the username and password that is used to authenticate yourself on the broker.  In the unlikely case that your broker does not require a username and password, you can enable the advanced connection preferences  Preferences/Advanced . Afterwards an additional menu to select anonymous authentication appears in the connection preferences. Please note that even then, you have to set a device name and username before you can connect as these are also used to construct various other internal things.   Per default a [[TLS]] secured communication channel with the broker is assumed. Thus you have to ensure that the broker certificate is properly imported on your device. If you do not want to use TLS, you can enable the advanced connection preferences after which you can disable it in the connection preferences. \nIn recent Android, a passcode is required once custom TLS certificates are imported. If you want to circumvent this, you can enable TLS with custom certificates and specify the absolute filesystem path to the broker certificate on your device. This will circumvent the Android TLS certificate management by using the certificate directly.    Reporting   Contacts  A single checkbox here which determines whether or not you wish to have\nlocation details shown [[for friends|Friends]].  Notifications   OwnTracks can optionally show the last reported location in the ticker area,\nfrom which you can also forcefully publish your current location.   Advanced    The map  The app's main screen is the map, which displays your location on it as well as\na reverse geo-coded location if possible.   You can zoom in and out of the map, and see [[your friends|Friends]] with their photos.   Beta  To receive beta versions and help us with testing new features of the app, you have to join our  Google+ Community . Afterwards you can register as a   beta tester . After a short time, you will receive the current beta version as a regular update via the Google Play Store. If, for some reason you cannot/do not want to our Google+ community, you can grab the APK by selecting the latest Android tag of our repository from  https://github.com/owntracks/android/tags  and installing the APK from the apps/android/apk/mqttitude.apk.   Keepalive  Due to limitations of the Java MQTT library the Android app cannot send native ping messages. As a workaround a one byte long normal message is published to  $SYS/keepalive  periodically to keep the connection alive. It is important to ensure that this topic is writable by all Android devices.  Development  To contribute to the development, fork the project and clone it to your workstation. Continue to import the project into Eclipse/ADT and opt to open all sub-projects. If this does not automatically import the Google Play Services project into your workspace, import it manually as an extra project. Afterwards, check if the play services are references as project in  Project Properties   Android . Once imported, create a feature branch, write your changes and commit them to your feature branch. These changes can be pushed to your fork from which you can submit a pull-request to get your changes included in the official code.", 
            "title": "Setup"
        }, 
        {
            "location": "/features/ios/", 
            "text": "Startup\n\n\nAfter \ndownloading and installing the iPhone/iPad app\n, start it\nup.\n\n\nYou will see the launch image\n\n\n\nfollowed by OwnTracks' main screen. When the main screen appeares it shows the title bar\n\n\n\nbut hides it after a few seconds to give more room for the map (examples show iPhone 3 1/2\", but looks similar on iPhone 4\" and iPad).\n\n\n\n\nThe first time you start the app, the system asks you to give OwnTracks access to your location. Please hit OK.\n\n\n\nNow you'll notice the connection indicator in \nred\n (iPhone top/right, iPad bottom/right). Let's head to settings by\nusing the \nSettings\n tab on the iPhone or by activating the popover menu (hit 'Friends' button on bottom/left) and then \nSettings\n tab on the iPad.\n\n\n\n\nSettings\n\n\nYou're now in the settings panel for OwnTracks, and there are some things\nyou have to change. (See [[general settings|Settings]] for additional information.)\n\n\nDon't get overwhelmed by the number of settings, there are only 4 things you need to change (marked with an asterisk '*').\n1. \nDeviceID\n is a short name you'll give your device. Good examples could be \niphone\n, \nmyphone\n, or \nxyzz90\n.\n2. \nHost\n is the host name or IP address of your MQTT broker. (The port defaults to 8883 because we default to using TLS.)\n3. \nUserID\n is your username on the broker. Even if your broker doesn't enforce authentication, you \nmust set a UserID\n.\n4. \nPassword\n is the password for \nUserID\n.\n\n\n\n\n\n\n\n\n\n\nAfter adjusting your settings, you can check the MQTT broker connection by hitting \nCheck\n and watch the status change or look at the detail status screen (information button right of connection status in the first row).\n\n\n\n\n\n\n\n\nYou do not need to fill out all fields, however to check the effective values have a look by hitting the information button to the right of UserID, ClientID, Topic or Will Topic.\n\n\nQuality of Service (QoS) settings for Reporting, Subscription or Will are indicated next to the descriptive label and can be altered by selecting the corresponding value after opening the detail selection screen.\n\n\n\n\nScroll down to the bottom of the screen to find the current application version, license information, a link to this documentation and the possibility to export all settings.\n\n\n\n\nIf you have successfully connected to your MQTT broker, switch the the main screen again (use the OwnTracks tab on iPhone or tap on the map on iPad).\n\n\nFollow your broker\n\n\nAt this time you should check that the MQTT broker is actually receiving location messages. (See [[MQTT broker|MQTTbroker]] on how to do this.)\n\n\nMain Screen\n\n\nLet's look at the main screen for a moment:\n\n\n\n\nThe icons on the bottom/top (iPad/iPhone) row are as follows:\n\n\n\n\nFirst Button is User Tracking Mode\n\n\nSecond Button is Monitoring Mode and Indicator\n\n\na \nPAUSE\n symbol indicates no automatic location monitoring \n\n\na \nPLAY\nsymbol indicates significant location monitoring\n\n\na \nFAST FORWARD\n indicates move mode monitoring\n(See [[Location]])\n\n\n\n\n\n\nThird Button is Beacon Mode and Indicator\n\n\nRED = inside iBeacon region\n\n\nBLUE = not within an iBeacon region\n\n\nGRAY = iBeacon status not available\n\n\nflashing = continously updating iBeacon distances (a.k.a. ranging)\n\n\n\n\n\n\nForth Button is Connection Switch and Indicator\n\n\nBLUE=IDLE, no connection established\n\n\nGREEN=CONNECTED, server connection established\n\n\nAMBER=ERROR OCCURED, WAITING FOR RECONNECT, app will automatically try to reconnect to the server\n\n\nRED=ERROR, no connection to the server possible or transient errror condition\n\n\nanimated size changes indicate outgoing messages\n\n\n\n\n\n\n\n\nThe system network activity indicator (in top status bar) is now used to indicate actual\ntransmission of messages.\n\n\nTo switch Map Mode, Monitoring Mode, Beacon Ranging and Switch Connection, tap on the corresponding button and select one of the displayed options:\n\n\n\n\n\n\n\n\n\n\nTap on Map Mode Follow to see your position.\n\n\nFriends\n\n\nThe [[Friends]] feature shows self and all Friends published by the server,\ntheir picture or OwnTracks default icon, and their last location.  Tapping on\nthe entry switches back to map centered on friend's last location.\n\n\nThe first time you launch the app you'll also be asked whether it may access your\ncontacts data, which you should allow. (If you change your mind later, \nPrivacy\n in\n\nGeneral settings\n allows you to disable the feature.)\n\n\nTapping on the disclosure indicator (little right-arrow) lists all received locations of the friend.\nApp keeps track of a number (see Settings) of own locations and the last location and sharedpoint of others.s\n Tapping on an location entry centers the map on the selected location.\n\n\nIf the location was set manually, a disclosure indicator allows changing the remark of the location (e.g. parked my car here!, started my run here!). Manual locations can only be deleted manually.\n\n\nDeleting locations or all locations of a friend is done by left-swipe on the entry.\n\n\nQ. As regards the friends list: when is reverse geo-coding done?\n\n\nReverse geo-coding is done when displaying/editing location details by either\n\n tapping the info button of a location callout on the map or\n\n navigating via friends/locations/...\n\n\nNo geo-coding is done automatically in the background to limit mobile data usage.\n\n\nLocation indicators and friendly faces\n\n\nThe locations of yourself, your friends and of the waypoints you set are displayed as little yellow circles. The color of the circumfence indicates\n\n Orange: yourself\n\n Blue: one of your waypoints\n* Green: one of your friends\n\n\n\n\nThe inner area of the circle either shows a picture of yourself / your friend or the Tracker ID (tid) which is usually 2 digits and defaults to the last two characters of the publish topic.\n\n\nA red, yellow rimmed tachometer indicating the velocity (speed) at the reported location starts at at the 6 o'clock position and works clockwise. It uses a logarithmic scale to show slow speeds\nas good as high speeds. The 9 o'clock position indicates a speed of 30 km/h, the 12 o'clock posistion a speed of 100 km/h. 3 o'clock means 180 km/h.\n\n\nA small blue, yellow rimmed semicircle at the perimeter indicates the course over ground (direction of movement)  with the 12 o'clock position meaning North.\n\n\nIf your iOS addressbook has an entry for, say, Jane Jolie, and Jane has an image associated with her addressbook entry, OwnTracks will show Jane's image on the map and on the [[Friends]] list, as soon as a location update for Jane is seen by the app.\n\n\nIn order to associate an MQTT topic with our friend (Jane, in this case), edit your addressbook entry on iOS for Jane and do either of the following:\n\n\n\n\nCreate a new relashionship (like 'Spouse') called \nOwnTracks\n (case insensitive), and add your friend's topic name to that (e.g. \nowntracks/jane/loc\n)\n\n\n\n\nThe addressbook API might need a while to be refreshed, but you may be able to speed that up by swiping the Friends list downward until the activity indicator appears, then let go).\n\n\nor...\n\n\nTap the Bookmark Button in the Navigation Bar on the Location screen. Select an entry from your Address Book.\nThe entry will be marked with a relationship to the current friend's topic name.\n\n\nBeginning with iPhone app version 5.1, there's now a switch in Expert Mode settings titled \nUpdate Address Book\". If this is _on\n, the app uses related names from the address book to identify topics and updates address book as described above. If the switch is \noff\n, the app maintains an internal reference to the address book record and doesn't modify the address book.\n\n\nRegion Monitoring and Waypoints\n\n\nFor all manually published locations, a description, a region radius and a share flag can be edited.\n\n\nSetting the description of a location helps you to remember places.\n\n\nIf a description is entered and the share flag set, the location is published to the MQTT broker as a \nwaypoint\n once.\nWaypoints shared by other users are displayed on the map and are visible in the Friends/Locations... table.\n\n\nIf the description is non-empty and a radius \n 0 (meters) is set, the app starts monitoring the circular region around the coordinate. A region may be 'waypoint'.\nThe regions are shown on the map as blue-ish circles. If the device is within a region, the corresponding circle turns red-ish.\n\n\nIf the description is non-empty and includes a value UUID for an iBeacon, the app starts monitoring the iBeacon region. e.g. 'myBeacons:CA271EAE-5FA8-4E80-8F08-2A302A95A959'\nmonitors any iBeacon identified with UUID = CA..., with major and minor numbers irrelevant.\n\n\nEverytime the devices enters or leaves a monitored region, an additional location message is published to the MQTT broker.\n\n\nUse cases:\n\n Define a \nhome\n region to insure that the device publishes a new location when coming home or leaving home even if you do not move more than 500m.\n\n Share your favorite places with your friends (\"Best Sushi in Town\").\n\n Keep a private note (\"Parked Car here\").\n\n Use iBeacons to accurately report enter/leave events for your home\n* Use iBeacons to publish enter/leave events for individual rooms/floors in your home\n\n\nWaypoints\n\n\nAll manually published locations can be edited (by tapping on the \n(I)\n to add\na description. If the \nShare\n flag is on, this waypoint is published to the\n[[MQTT broker|MQTTbroker]] along with its location information. Setting a\ndescription helps you remember particular points of interest.\n\n\nIf a description is entered and the share flag set, the location is published\nto the MQTT broker as a waypoint once. Waypoints shared by other users are\ndisplayed on the map and are visible in the \nFriends/Locations\n table.\n\n\nRegion monitoring (a.k.a. Geo Fences)\n\n\nIf the waypoint description is non-empty and a radius \n 0 (meters) is set, the\napp starts monitoring the circular region around the specified coordinates. \nRegions are shown on the map as blue-ish circles. If the\ndevice is within a region, the corresponding circle turns red-ish. Every time\nthe devices enters or leaves a monitored region, an additional location message\nis published to the MQTT broker, specifying whether the device is entering or leaving\nsaid region.\n\n\n\n\nFor example, you can define a home region to ensure that the device publishes a\nnew location when coming home or leaving home even if you do not move more than\n500m. Share your favorite places with your friends (\"Best Sushi in Town\"). Keep\na private note (\"Parked Car here\").\n\n\nRegion Monitoring with iBeacons\n\n\nRather than setting the radius, you may add your iBeacon's UUID and optionally major and minor numbers\nto the description to start region monitoring using iBeacons.\n\n\ne.g.\n* 'myBeacon:CA271EAE-5FA8-4E80-8F08-2A302A95A959:0001:CAFE'\nreports region with description 'myBeacon' when the iBeacon identified with UUID = CA..., major = 0001 and minor = CAFE is in proximity\n\n\n\n\n'myBeacons:CA271EAE-5FA8-4E80-8F08-2A302A95A959'\nreports region with description 'myBeacons' when any iBeacon identified with UUID = CA..., with major and minor numbers irrelevant is in proximity\n\n\n\n\nRemote configuration\n\n\nYou can help your friends customize their copy of OwnTracks with [[remote configuration|RemoteConfig]].\n\n\nWhy do location publishes sometimes seem to cease to work?\n\n\nHere's what happens:\n\n\nIf the app goes into Background, the connection is disconnected because the app\ncannot maintain the TCP connection in background.\n\n\nIf you bring the app back into foreground, the app will re-connect.\n\n\nWhen a location change is recorded (no matter if manual, significant, move or\nregion mode), a message is prepared and an attempt to connect to the broker is\nstarted. If there is an error, connect will be retried after 2, 4, 8, ..., 64,\n64, .... seconds until it succeeds.\n\n\nBUT...\n\n\nIf the application is in background or is sent to the background, retries are\nrestarted eventually - depending on iOS' background execution model about every 10 minutes.\n\n\nWith automatic modes switched off, even when bringing the app to foreground, no\nnew location updates are generated.", 
            "title": "iOS"
        }, 
        {
            "location": "/features/ios/#startup", 
            "text": "After  downloading and installing the iPhone/iPad app , start it\nup.  You will see the launch image  followed by OwnTracks' main screen. When the main screen appeares it shows the title bar  but hides it after a few seconds to give more room for the map (examples show iPhone 3 1/2\", but looks similar on iPhone 4\" and iPad).   The first time you start the app, the system asks you to give OwnTracks access to your location. Please hit OK.  Now you'll notice the connection indicator in  red  (iPhone top/right, iPad bottom/right). Let's head to settings by\nusing the  Settings  tab on the iPhone or by activating the popover menu (hit 'Friends' button on bottom/left) and then  Settings  tab on the iPad.", 
            "title": "Startup"
        }, 
        {
            "location": "/features/ios/#settings", 
            "text": "You're now in the settings panel for OwnTracks, and there are some things\nyou have to change. (See [[general settings|Settings]] for additional information.)  Don't get overwhelmed by the number of settings, there are only 4 things you need to change (marked with an asterisk '*').\n1.  DeviceID  is a short name you'll give your device. Good examples could be  iphone ,  myphone , or  xyzz90 .\n2.  Host  is the host name or IP address of your MQTT broker. (The port defaults to 8883 because we default to using TLS.)\n3.  UserID  is your username on the broker. Even if your broker doesn't enforce authentication, you  must set a UserID .\n4.  Password  is the password for  UserID .      After adjusting your settings, you can check the MQTT broker connection by hitting  Check  and watch the status change or look at the detail status screen (information button right of connection status in the first row).     You do not need to fill out all fields, however to check the effective values have a look by hitting the information button to the right of UserID, ClientID, Topic or Will Topic.  Quality of Service (QoS) settings for Reporting, Subscription or Will are indicated next to the descriptive label and can be altered by selecting the corresponding value after opening the detail selection screen.   Scroll down to the bottom of the screen to find the current application version, license information, a link to this documentation and the possibility to export all settings.   If you have successfully connected to your MQTT broker, switch the the main screen again (use the OwnTracks tab on iPhone or tap on the map on iPad).  Follow your broker  At this time you should check that the MQTT broker is actually receiving location messages. (See [[MQTT broker|MQTTbroker]] on how to do this.)  Main Screen  Let's look at the main screen for a moment:   The icons on the bottom/top (iPad/iPhone) row are as follows:   First Button is User Tracking Mode  Second Button is Monitoring Mode and Indicator  a  PAUSE  symbol indicates no automatic location monitoring   a  PLAY symbol indicates significant location monitoring  a  FAST FORWARD  indicates move mode monitoring\n(See [[Location]])    Third Button is Beacon Mode and Indicator  RED = inside iBeacon region  BLUE = not within an iBeacon region  GRAY = iBeacon status not available  flashing = continously updating iBeacon distances (a.k.a. ranging)    Forth Button is Connection Switch and Indicator  BLUE=IDLE, no connection established  GREEN=CONNECTED, server connection established  AMBER=ERROR OCCURED, WAITING FOR RECONNECT, app will automatically try to reconnect to the server  RED=ERROR, no connection to the server possible or transient errror condition  animated size changes indicate outgoing messages     The system network activity indicator (in top status bar) is now used to indicate actual\ntransmission of messages.  To switch Map Mode, Monitoring Mode, Beacon Ranging and Switch Connection, tap on the corresponding button and select one of the displayed options:      Tap on Map Mode Follow to see your position.  Friends  The [[Friends]] feature shows self and all Friends published by the server,\ntheir picture or OwnTracks default icon, and their last location.  Tapping on\nthe entry switches back to map centered on friend's last location.  The first time you launch the app you'll also be asked whether it may access your\ncontacts data, which you should allow. (If you change your mind later,  Privacy  in General settings  allows you to disable the feature.)  Tapping on the disclosure indicator (little right-arrow) lists all received locations of the friend.\nApp keeps track of a number (see Settings) of own locations and the last location and sharedpoint of others.s\n Tapping on an location entry centers the map on the selected location.  If the location was set manually, a disclosure indicator allows changing the remark of the location (e.g. parked my car here!, started my run here!). Manual locations can only be deleted manually.  Deleting locations or all locations of a friend is done by left-swipe on the entry.  Q. As regards the friends list: when is reverse geo-coding done?  Reverse geo-coding is done when displaying/editing location details by either  tapping the info button of a location callout on the map or  navigating via friends/locations/...  No geo-coding is done automatically in the background to limit mobile data usage.  Location indicators and friendly faces  The locations of yourself, your friends and of the waypoints you set are displayed as little yellow circles. The color of the circumfence indicates  Orange: yourself  Blue: one of your waypoints\n* Green: one of your friends   The inner area of the circle either shows a picture of yourself / your friend or the Tracker ID (tid) which is usually 2 digits and defaults to the last two characters of the publish topic.  A red, yellow rimmed tachometer indicating the velocity (speed) at the reported location starts at at the 6 o'clock position and works clockwise. It uses a logarithmic scale to show slow speeds\nas good as high speeds. The 9 o'clock position indicates a speed of 30 km/h, the 12 o'clock posistion a speed of 100 km/h. 3 o'clock means 180 km/h.  A small blue, yellow rimmed semicircle at the perimeter indicates the course over ground (direction of movement)  with the 12 o'clock position meaning North.  If your iOS addressbook has an entry for, say, Jane Jolie, and Jane has an image associated with her addressbook entry, OwnTracks will show Jane's image on the map and on the [[Friends]] list, as soon as a location update for Jane is seen by the app.  In order to associate an MQTT topic with our friend (Jane, in this case), edit your addressbook entry on iOS for Jane and do either of the following:   Create a new relashionship (like 'Spouse') called  OwnTracks  (case insensitive), and add your friend's topic name to that (e.g.  owntracks/jane/loc )   The addressbook API might need a while to be refreshed, but you may be able to speed that up by swiping the Friends list downward until the activity indicator appears, then let go).  or...  Tap the Bookmark Button in the Navigation Bar on the Location screen. Select an entry from your Address Book.\nThe entry will be marked with a relationship to the current friend's topic name.  Beginning with iPhone app version 5.1, there's now a switch in Expert Mode settings titled  Update Address Book\". If this is _on , the app uses related names from the address book to identify topics and updates address book as described above. If the switch is  off , the app maintains an internal reference to the address book record and doesn't modify the address book.  Region Monitoring and Waypoints  For all manually published locations, a description, a region radius and a share flag can be edited.  Setting the description of a location helps you to remember places.  If a description is entered and the share flag set, the location is published to the MQTT broker as a  waypoint  once.\nWaypoints shared by other users are displayed on the map and are visible in the Friends/Locations... table.  If the description is non-empty and a radius   0 (meters) is set, the app starts monitoring the circular region around the coordinate. A region may be 'waypoint'.\nThe regions are shown on the map as blue-ish circles. If the device is within a region, the corresponding circle turns red-ish.  If the description is non-empty and includes a value UUID for an iBeacon, the app starts monitoring the iBeacon region. e.g. 'myBeacons:CA271EAE-5FA8-4E80-8F08-2A302A95A959'\nmonitors any iBeacon identified with UUID = CA..., with major and minor numbers irrelevant.  Everytime the devices enters or leaves a monitored region, an additional location message is published to the MQTT broker.  Use cases:  Define a  home  region to insure that the device publishes a new location when coming home or leaving home even if you do not move more than 500m.  Share your favorite places with your friends (\"Best Sushi in Town\").  Keep a private note (\"Parked Car here\").  Use iBeacons to accurately report enter/leave events for your home\n* Use iBeacons to publish enter/leave events for individual rooms/floors in your home  Waypoints  All manually published locations can be edited (by tapping on the  (I)  to add\na description. If the  Share  flag is on, this waypoint is published to the\n[[MQTT broker|MQTTbroker]] along with its location information. Setting a\ndescription helps you remember particular points of interest.  If a description is entered and the share flag set, the location is published\nto the MQTT broker as a waypoint once. Waypoints shared by other users are\ndisplayed on the map and are visible in the  Friends/Locations  table.  Region monitoring (a.k.a. Geo Fences)  If the waypoint description is non-empty and a radius   0 (meters) is set, the\napp starts monitoring the circular region around the specified coordinates. \nRegions are shown on the map as blue-ish circles. If the\ndevice is within a region, the corresponding circle turns red-ish. Every time\nthe devices enters or leaves a monitored region, an additional location message\nis published to the MQTT broker, specifying whether the device is entering or leaving\nsaid region.   For example, you can define a home region to ensure that the device publishes a\nnew location when coming home or leaving home even if you do not move more than\n500m. Share your favorite places with your friends (\"Best Sushi in Town\"). Keep\na private note (\"Parked Car here\").  Region Monitoring with iBeacons  Rather than setting the radius, you may add your iBeacon's UUID and optionally major and minor numbers\nto the description to start region monitoring using iBeacons.  e.g.\n* 'myBeacon:CA271EAE-5FA8-4E80-8F08-2A302A95A959:0001:CAFE'\nreports region with description 'myBeacon' when the iBeacon identified with UUID = CA..., major = 0001 and minor = CAFE is in proximity   'myBeacons:CA271EAE-5FA8-4E80-8F08-2A302A95A959'\nreports region with description 'myBeacons' when any iBeacon identified with UUID = CA..., with major and minor numbers irrelevant is in proximity   Remote configuration  You can help your friends customize their copy of OwnTracks with [[remote configuration|RemoteConfig]].  Why do location publishes sometimes seem to cease to work?  Here's what happens:  If the app goes into Background, the connection is disconnected because the app\ncannot maintain the TCP connection in background.  If you bring the app back into foreground, the app will re-connect.  When a location change is recorded (no matter if manual, significant, move or\nregion mode), a message is prepared and an attempt to connect to the broker is\nstarted. If there is an error, connect will be retried after 2, 4, 8, ..., 64,\n64, .... seconds until it succeeds.  BUT...  If the application is in background or is sent to the background, retries are\nrestarted eventually - depending on iOS' background execution model about every 10 minutes.  With automatic modes switched off, even when bringing the app to foreground, no\nnew location updates are generated.", 
            "title": "Settings"
        }, 
        {
            "location": "/features/encrypt/", 
            "text": "Payload encryption\n\n\nIn addition to the \ntransport encryption via TLS\n, the OwnTracks apps support payload encryption using \nlibsodium\n, in particular \nsecret-key authenticated encryption\n. We have also implemented support for payload encryption (i.e. decryption) in the \nOwnTracks Recorder\n.\n\n\nYou configure a \nsecret\n (which you keep secret) in the app's settings. From this moment onwards, the apps encrypt the \nJSON\n with this secret and transport the payload in a new JSON object which looks like this:\n\n\n{\n  \n_type\n: \nencrypted\n,\n  \ndata\n: \n1Vu7Owp ... W4lMnh28FB+el22GsCrlnggvEcp4H8GR9iKJdi1qfwkejYpzrQ+491Mwunjg=\n\n}\n\n\n\n\nIf you want to share location with a friend, both you and your friend need to share the same \nsecret\n. A \nsecret\n should be kept secret; it is an up to 32 octet long passphrase (which the apps pad with binary zeroes) which is required both for encryption as well as for decryption of the payloads. It is not possible to share locations with a friend's device using different \nsecret\n keys.\n\n\nRecorder\n\n\nYou can set up multiple decryption keys on the Recorder (but not in the apps). This is to enable, say, different people to use different secrets on the same Recorder.\n\n\nAdd a key by determining the \nusername\n and the \ndevice name\n of the client app. Lowercase these, and create a string with the two values separated with a dash. Suppose the \nusername\n is \njjolie\n and the \ndevice name\n is \nphone\n, the result will be \njjolie-phone\n.\n\n\nLoad the key into the (running) Recorder:\n\n\necho \njjolie-phone mysecreTpass01\n | ocat --load=keys\n\n\n\n\nFrom this moment onwards, the Recorder will use this secret key for this username/device combination when it receives JSON payloads of \n_type: encrypted\n. The Recorder will decrypt the payload and will store the result in plain text in its storage.", 
            "title": "Encryption"
        }, 
        {
            "location": "/features/encrypt/#payload-encryption", 
            "text": "In addition to the  transport encryption via TLS , the OwnTracks apps support payload encryption using  libsodium , in particular  secret-key authenticated encryption . We have also implemented support for payload encryption (i.e. decryption) in the  OwnTracks Recorder .  You configure a  secret  (which you keep secret) in the app's settings. From this moment onwards, the apps encrypt the  JSON  with this secret and transport the payload in a new JSON object which looks like this:  {\n   _type :  encrypted ,\n   data :  1Vu7Owp ... W4lMnh28FB+el22GsCrlnggvEcp4H8GR9iKJdi1qfwkejYpzrQ+491Mwunjg= \n}  If you want to share location with a friend, both you and your friend need to share the same  secret . A  secret  should be kept secret; it is an up to 32 octet long passphrase (which the apps pad with binary zeroes) which is required both for encryption as well as for decryption of the payloads. It is not possible to share locations with a friend's device using different  secret  keys.  Recorder  You can set up multiple decryption keys on the Recorder (but not in the apps). This is to enable, say, different people to use different secrets on the same Recorder.  Add a key by determining the  username  and the  device name  of the client app. Lowercase these, and create a string with the two values separated with a dash. Suppose the  username  is  jjolie  and the  device name  is  phone , the result will be  jjolie-phone .  Load the key into the (running) Recorder:  echo  jjolie-phone mysecreTpass01  | ocat --load=keys  From this moment onwards, the Recorder will use this secret key for this username/device combination when it receives JSON payloads of  _type: encrypted . The Recorder will decrypt the payload and will store the result in plain text in its storage.", 
            "title": "Payload encryption"
        }, 
        {
            "location": "/features/remoteconfig/", 
            "text": "Remote config\n\n\nInstead of telling others how to edit settings on their device in order to use OwnTracks to connect to your server, you can help them yourself by sending them a ready-to-run configuration which they load onto their device. This is particularly useful in cases of \"remote support\" for parents, etc.\n\n\n\n\nCreate a configuration file in JSON with an \n.otrc\n suffix (for OwnTracks Configuration). (The legacy \n.mqtc\n suffix is also supported.)\n\n\nEnsure the JSON is valid by using either of the \nonline JSON validator\n, a utility such as \njq\n or simply by running\n\n\n\n\npython -mjson.tool \n your.otrc\n\n\n\n\n\n\nSend the file to the device via e-mail, provide it for download on an HTTP server, send via Dropbox, ... you name it.\n\n\nHave the OwnTracks app user open the file on their device with OwnTracks.\n\n\n\n\nHere is a sample configuration file which contains some of the possible settings.\n The \n_type\n\nentry is mandatory, most other entries are optional; they are replaced by built-in\ndefaults if not specified.\n\n\n{\n  \nusername\n: \njjolie\n,\n  \npassword\n: \ns1kr3t\n,\n  \nclientId\n: \njanecli01\n,\n  \npubRetain\n: true,\n  \nsubTopic\n: \nowntracks/+/+\n,\n  \nallowRemoteLocation\n: true,\n  \ncmd\n: true,\n  \npubTopicBase\n: \n,\n  \n_type\n: \nconfiguration\n,\n  \ntid\n: \njJ\n,\n  \nhost\n: \nmybroker.example.org\n,\n  \nwillRetain\n: false,\n  \nupdateAddressBook\n: true,\n  \nport\n: 8883,\n  \npubQos\n: 2,\n  \nlocatorInterval\n: 180,\n  \ntls\n: true,\n  \nauth\n: true,\n  \ncleanSession\n: false\n}\n\n\n\n\nA list of all possible settings is described \non the JSON page\n.\n\n\nOver the Air configuration is possible on Android using JSON payloads with \n_type: configuration\n which is described \non the JSON page\n.\n\n\nsetWaypoints\n\n\n(iOS only)\n\n\nWaypoints can be configured remotely if \nRemote Commands\n is enabled on the device, by publishing a JSON payload which is merged into existing waypoints. (Note: the \"key\" for a waypoint is the \ntst\n timestamp, so overwriting an existing \ntst\n actually overwrites an existing waypoint.)\n\n\n{\n  \n_type\n: \ncmd\n,\n  \naction\n: \nsetWaypoints\n,\n  \npayload\n: {\n    \nwaypoints\n: [\n      {\n        \ndesc\n: \nSome place\n,\n        \nrad\n: 8867,\n        \nlon\n: 10.428771973,\n        \nlat\n: 46.935260881,\n        \ntst\n: 1437552714,\n        \n_type\n: \nwaypoint\n\n      }\n    ],\n    \n_type\n: \nwaypoints\n\n  }\n}\n\n\n\n\nPublishing the above payload to an OwnTracks iOS device will create/modify said waypoint. This also works for Beacon configurations, which are basically waypoints.", 
            "title": "Remoteconfig"
        }, 
        {
            "location": "/features/remoteconfig/#remote-config", 
            "text": "Instead of telling others how to edit settings on their device in order to use OwnTracks to connect to your server, you can help them yourself by sending them a ready-to-run configuration which they load onto their device. This is particularly useful in cases of \"remote support\" for parents, etc.   Create a configuration file in JSON with an  .otrc  suffix (for OwnTracks Configuration). (The legacy  .mqtc  suffix is also supported.)  Ensure the JSON is valid by using either of the  online JSON validator , a utility such as  jq  or simply by running   python -mjson.tool   your.otrc   Send the file to the device via e-mail, provide it for download on an HTTP server, send via Dropbox, ... you name it.  Have the OwnTracks app user open the file on their device with OwnTracks.   Here is a sample configuration file which contains some of the possible settings.\n The  _type \nentry is mandatory, most other entries are optional; they are replaced by built-in\ndefaults if not specified.  {\n   username :  jjolie ,\n   password :  s1kr3t ,\n   clientId :  janecli01 ,\n   pubRetain : true,\n   subTopic :  owntracks/+/+ ,\n   allowRemoteLocation : true,\n   cmd : true,\n   pubTopicBase :  ,\n   _type :  configuration ,\n   tid :  jJ ,\n   host :  mybroker.example.org ,\n   willRetain : false,\n   updateAddressBook : true,\n   port : 8883,\n   pubQos : 2,\n   locatorInterval : 180,\n   tls : true,\n   auth : true,\n   cleanSession : false\n}  A list of all possible settings is described  on the JSON page .  Over the Air configuration is possible on Android using JSON payloads with  _type: configuration  which is described  on the JSON page .", 
            "title": "Remote config"
        }, 
        {
            "location": "/features/remoteconfig/#setwaypoints", 
            "text": "(iOS only)  Waypoints can be configured remotely if  Remote Commands  is enabled on the device, by publishing a JSON payload which is merged into existing waypoints. (Note: the \"key\" for a waypoint is the  tst  timestamp, so overwriting an existing  tst  actually overwrites an existing waypoint.)  {\n   _type :  cmd ,\n   action :  setWaypoints ,\n   payload : {\n     waypoints : [\n      {\n         desc :  Some place ,\n         rad : 8867,\n         lon : 10.428771973,\n         lat : 46.935260881,\n         tst : 1437552714,\n         _type :  waypoint \n      }\n    ],\n     _type :  waypoints \n  }\n}  Publishing the above payload to an OwnTracks iOS device will create/modify said waypoint. This also works for Beacon configurations, which are basically waypoints.", 
            "title": "setWaypoints"
        }, 
        {
            "location": "/features/debug/", 
            "text": "Debugging\n\n\nDesigning mobile apps is hard. Designing mobile apps which are killed off every once in a while by the underlying OS is harder (iOS). Designing mobile apps which reliable do what they should at all times is hardest. \nChristoph and Alexander\n know this and they've done a hell of a job to get stability and reliability of OwnTracks to where it stands today.\n\n\nBe that as it may, there are things which can be difficult to test, and in this section we give you some things to watch out for.\n\n\nFirst and foremost, and please don't laugh: does your device have either WiFi or 3G connectivity? No data means no location reported, which ought to be self-explanatory.\n\n\n\n\nCheck whether OwnTracks is connected to your broker. On iOS this is the green mushroom symbol on the map; on Android you can check in preferences. If need be, disconnect and reconnect OwnTracks and check your broker's logfile as you do so.\n\n\nIs your broker running and can it be reached by your device? We've \ngiven you tips on configuring your broker\n.\n\n\nMake liberal use of the Mosquitto \nclients\n to test whether your broker is receiving messages, and please ensure your broker ACLs match the settings in OwnTracks.", 
            "title": "Debugging"
        }, 
        {
            "location": "/features/debug/#debugging", 
            "text": "Designing mobile apps is hard. Designing mobile apps which are killed off every once in a while by the underlying OS is harder (iOS). Designing mobile apps which reliable do what they should at all times is hardest.  Christoph and Alexander  know this and they've done a hell of a job to get stability and reliability of OwnTracks to where it stands today.  Be that as it may, there are things which can be difficult to test, and in this section we give you some things to watch out for.  First and foremost, and please don't laugh: does your device have either WiFi or 3G connectivity? No data means no location reported, which ought to be self-explanatory.   Check whether OwnTracks is connected to your broker. On iOS this is the green mushroom symbol on the map; on Android you can check in preferences. If need be, disconnect and reconnect OwnTracks and check your broker's logfile as you do so.  Is your broker running and can it be reached by your device? We've  given you tips on configuring your broker .  Make liberal use of the Mosquitto  clients  to test whether your broker is receiving messages, and please ensure your broker ACLs match the settings in OwnTracks.", 
            "title": "Debugging"
        }, 
        {
            "location": "/tech/json/", 
            "text": "JSON\n\n\nOwnTracks publishes its message payloads in \nJSON\n format. The different payload types are identified by a \n_type\n element. Depending on the app platform, different payload types are supported. \n\n\n\n\n\n\n\n\n_type\n\n\niOS\n\n\nAndroid\n\n\n\n\n\n\n\n\n\n\nlocation\n\n\nY\n\n\nY\n\n\n\n\n\n\nlwt\n\n\nY\n\n\nY\n\n\n\n\n\n\nwaypoint\n\n\nY\n\n\nY\n\n\n\n\n\n\ntransition\n\n\nY\n\n\nY\n\n\n\n\n\n\nbeacon\n\n\nY\n\n\nN\n\n\n\n\n\n\ncmd\n\n\nY\n\n\nY\n\n\n\n\n\n\nsteps\n\n\nY\n\n\nN\n\n\n\n\n\n\nconfiguration\n\n\nY\n\n\nY\n\n\n\n\n\n\ncard\n\n\nY\n\n\nY\n\n\n\n\n\n\nwaypoints\n\n\nY\n\n\n\n\n\n\n\n\nencrypted\n\n\nY\n\n\nY\n\n\n\n\n\n\n\n\nTopics\n\n\nApps publish to:\n\n\n\n\nowntracks/user/device\n with \n_type=location\n for location updates, and with \n_type=lwt\n\n\nowntracks/user/device/cmd\n with \n_type=cmd\n      for remote commands\n\n\nowntracks/user/device/event\n with \n_type=transition\n for enter/leave events\n\n\n\n\nApps subscribe to:\n\n\n\n\nowntracks/user/device/cmd\n if remote commands are enabled\n\n\nowntracks/+/+\n for seeing other user's locations, depending on broker ACL\n\n\nowntracks/+/+/event\n (singular) for transition messages (\nenter\n/\nleave\n)\n\n\nowntracks/+/+/waypoint\n  (singular) for Waypoint definitions/modifications\n\n\nowntracks/+/+/info\n  for obtaining \ncards\n.\n\n\n\n\nIn addition, the iOS app publishes to:\n\n\n\n\nowntracks/user/device/step\n to report step counter\n\n\nowntracks/user/device/beacon\n for beacon ranging\n\n\nowntracks/user/device/dump\n for config dumps\n\n\n\n\n_type=location\n\n\nThis location object describes the location of the device that published it. \nHeads up: as from Android version 0.5.11 and from iOS version 8.0 numeric types are real numeric (\nfloat\n, \nint\n, boolean \ntrue\n/\nfalse\n) and no longer strings.\n\n\n{\n    \n_type\n : \nlocation\n,        \n    \nacc\n   : 75,              \n    \nalt\n   : 13,\n    \nbatt\n  : nnn,              \n    \ncog\n   : 270,\n    \ndesc\n  : \nsssss\n,\n    \nevent\n : \nsssss\n,\n    \nlat\n   : x.xxxxxx,       \n    \nlon\n   : y.yyyyyy,        \n    \nrad\n   : nnn, \n    \nt\n     : \nx\n,\n    \ntid\n   : \nYY\n,\n    \ntst\n   : 1376715317,      \n    \nvacc\n  : 10,\n    \nvel\n   : 54,\n    \np\n     : nnn\n}\n\n\n\n\n\n\nacc\n is accuracy of the reported location in meters without unit (integer). iOS adds this element only if it \n= 0.\n\n\nalt\n is the altitude measured in meters above sea level (\nOptional\n, integer). iOS adds this element only if it \n= 0.\n\n\nbatt\n is the device's battery level in percent (integer)\n\n\ncog\n is the heading (course over ground) in degrees, 0 = North (\nOptional\n, integer). iOS adds this element only if it \n= 0.. iOS adds this element only if it \n= 0.\n\n\ndesc\n is the description of a \nwaypoint\n\n\nevent\n is one of \n\"enter\"\n or \n\"leave\"\n and tells if the app is entering or leaving a geofence \n\n\nlat\n is latitude as decimal, represented as a floating point number\n\n\nlon\n is longitude as decimal, represented as a floating point number\n\n\nrad\n is the radius in meters around around the geo-fence when entering/leaving a geofence (integer)\n\n\nt\n is the trigger for the publish x = \n\n\n\"p\" ping, issued randomly by background task. Note, that the \ntst\n in a ping is that of the \nlast location reported by iOS\n, so this may look like a duplicate.\n\n\n\"c\" circular region enter/leave event \n\n\n\"b\" beacon region enter/leave event\n\n\n\"r\" response to a \"reportLocation\" request\n\n\n\"u\" manual publish requested by the user\n\n\n\"t\" timer based publish in move move\n\n\n\"a\" or missing \nt\n indicates automatic location update\n\n\n\n\n\n\ntid\n is a configurable tracker-ID which is used by the iOS auto-faces feature to display, say, initials of a user. If it isn't explicitly configured, it defaults to the last two characters of the device's publish topic. \n\n\ntst\n is a UNIX \nepoch timestamp\n of the event as it occurs which may be different from the time it is published (integer, seconds).\n\n\nvacc\n is the vertical accuracy of the reported altitude in meters (\nOptional\n, integer). iOS adds this element only if it \n= 0.\n\n\nvel\n is the velocity (speed) in km/h (\nOptional\n, integer). iOS adds this element only if it \n= 0.\n\n\np\n is barometric pressure in kPa (kilo Pascal) (iOS \n 8.1.1 only with \nExtended data\n enabled)\n\n\n\n\n(The iOS device can be configured to produce or not produce fields marked as \noptional\n with the Extended Data setting.)\n\n\nNotes:\n* A publish with of \n\"_type\": \"location\"\n with a \n\"b\"\n trigger is sent when an iOS device enters or leaves a beacon in addition to a \n\"_type\": \"transition\"\n: if somebody leaves and enters his home without having left the radius of detection for significant changes, a subscriber to his main topic would otherwise not get notified of any location change although beacon or circular region enter and leave transitions were generated.\n\n\nGreenwich\n\n\nThe OwnTracks-edition of the \nChoral Greenwich\n device reports the following additional elements in a \n_type=location\n message:\n\n\n{\n    \n_type\n: \nlocation\n,\n    \nalt\n: 160,\n    \ncog\n: 0,\n    \ndist\n: 189,\n    \ntrip\n: 279122,\n    \nlat\n: xx.xxxxxx,\n    \nlon\n: y.yyyyyy,\n    \nvel\n: 12,\n    \nt\n: \nt\n,\n    \ntst\n: 1406803894\n}\n\n\n\n\n\n\nalt\n is altitude in meters. (\nOptional\n)\n\n\nbatt\n is the external battery voltage. (\nOptional\n)\n\n\ncog\n is the course over ground (heading) in degrees. (\nOptional\n)\n\n\ndist\n is the distance travelled in meters since the last location publish. (\nOptional\n)\n\n\ntrip\n is the distance travelled in meters since the last reboot. (\nOptional\n)\n\n\nvel\n is the speed (velocity) in km/h. (\nOptional\n)\n\n\nt\n is the trigger of the published message:\n\n\nf\n first publish after reboot\n\n\nm\n for manually requested locations (e.g. by publishing to \n/cmd\n)\n\n\nt\n (time) for location published because device is moving.\n\n\nT\n (time) for location published because of time passed (\nmaxInterval\n); device is stationary\n\n\nk\n When transitioning from \nmove\n to \nstationary\n an additional publish is sent marked with trigger \nk\n (park)\n\n\nv\n When transitioning from \nstationary\n to \nmove\n additional publish is sent marked with trigger \nv\n (mo-v-e)\n\n\nl\n When device looses GPS fix, an additional publish is sent to transmit the last known position\n\n\nL\n last position before gracefull shutdown\n\n\n\n\n(The device can be configured to produce or not produce fields marked as \noptional\n.)\n\n\n_type=lwt\n\n\nA \nlast will and testament\n is published automatically by the MQTT broker when it looses contact with the app. This typically looks like this:\n\n\n{\n    \n_type\n:\nlwt\n,\n    \ntst\n: 1380738247\n}\n\n\n\n\nThe timestamp is the Unix epoch time at which the app first connected (and \nnot\n the time at which the LWT was published).\n\n\n_type=waypoint\n\n\nWaypoints denote specific geographical locations that you want to keep track of. You define a waypoint on the OwnTracks device, and OwnTracks publishes this waypoint to your broker (if the waypoint is marked \nshared\n). OwnTracks also monitors these waypoints and will publish a transition event (\n_type: transition\n) when entering or leaving the waypoint. Note, that a waypoint may also define a \nBeacon\n.\n\n\n{\n    \n_type\n  : \nwaypoint\n,\n    \ndesc\n   : \nFree text entered on device\n,\n    \nlat\n    : x.xxxxxx,       \n    \nlon\n    : y.yyyyyy,        \n    \nrad\n    : xxx,\n    \ntst\n    : nnnnn,\n    \nshared\n : true,\n    \ntid\n    : \nXX\n\n}\n\n\n\n\n\n\nshared\n location messages of shared waypoints contain a desc and event attribute. Not shared ones contain an event attribute only\n\n\ntst\n is the timestamp of waypoint \ncreation\n even if it was subsequently modified by the user. (See \nWaypoints\n.) It is copied into the \nwtst\n of the transition event (\ntype: transition\n) when an event pertaining to this waypoint fires.\n\n\n\n\nWaypoints are published non-retained because the second waypoint would overwrite the first: a client would only get the last one which makes no sense. Your application will typically store waypoints to some kind of persistent storage.\n\n\n_type=transition\n\n\nA transition into or out of a previously configured waypoint is effected by publishing a \ntransition\n to the \n../event\n subtopic. In addition to the coordinates where the event fired (\nlat\n, \nlon\n, and \nacc\n of these), the message contains the timestamp of the waypoint creation (\nwtst\n) as well as the \nevent\n (which can be either \nenter\n or \nleave\n) and, in the case of a shared waypoint, it's description in \ndesc\n. Transition messages are published with \nretain=0\n.\n\n\n{\n  \n_type\n: \ntransition\n,\n  \nwtst\n: 1425042603,           // time of waypoint creation\n  \nlat\n: 12.34,                 // transition coordinates i.e. \nhere\n\n  \nlon\n: 44.5,\n  \ntst\n: 1427634603,            // timestamp of transition (e.g. \nnow\n)\n  \nacc\n: 130,                   // accuracy of lat, lon\n  \ntid\n: \nJP\n,\n  \nevent\n: \nenter\n,\n  \ndesc\n: \nmy Indian restaurant\n,\n  \nt\n: \nb\n          // trigger (\nc\n -default- for circular regions, \nb\n for beacons, \nw\n for WiFi (Android only))\n}\n\n\n\n\nA transition event published as a result of a Beacon movement will have a \n\"t\" : \"b\"\n associated with it.\n\n\n_type=configuration\n\n\nThe device configuration can be imported and exported as JSON. The exported configuration can contain an array of waypoints that are defined on the device. \n\n\n{\n    \n_type\n: \nconfiguration\n,\n    \nmode\n: 0,\n    \nlocked\n: false,\n    \ndeviceId\n: \nphone\n,\n    \nclientId\n: \njane-phone\n,\n    \ntrackerId\n: \nxx\n,\n    \nsubTopic\n: \nowntracks/#\n,\n    \npubTopicBase\n: \nowntracks/jane/phone\n,\n    \nhost\n: \nbroker.my.net\n,\n    \nusername\n: \njane\n,\n    \npassword\n: \nsecr3t\n,\n    \nwillTopic\n: \n,\n    \nsubQos\n: 1,\n    \npubQos\n: 2,\n    \npubInterval\n : 30,\n    \nport\n: 8883,\n    \nkeepalive\n: 60,\n    \nwillQos\n: 1,\n    \npubRetain\n: true,\n    \ntls\n: true,\n    \ntlsCrtPath\n : \n/foo/bar\n,\n    \nauth\n: true,\n    \ncleanSession\n: false,\n    \nwillRetain\n: false,\n    \nlocatorDisplacement\n: 200,\n    \nlocatorInterval\n: 180,\n    \nlocatorAccuracyBackground\n : 2,\n    \nlocatorAccuracyForeground\n : 0,\n    \nmessaging\n: true,\n    \nmonitoring\n: 1,\n    \nranging\n: \n,\n    \npositions\n: 50,\n    \nconnectionAdvancedMode\n : false,\n    \nautostartOnBoot\n : false,\n    \npubIncludeBattery\n : false,\n    \nsub\n : false,\n    \npub\n : false,\n    \nupdateAddressBook\n : false,\n    \nnotification\n : false,\n    \nnotificationLocation\n : false,\n    \nnotificationGeocoder\n : false,\n    \nnotificationTickerOnPublish\n : false,\n    \nnotificationTickerOnGeofenceTransition\n : false,\n    \nremoteCommandReportLocation\n : false,\n    \nremoteCommandDump\n : false,\n    \ncmd\n : false,\n    \nallowRemoteLocation\n : false,\n    \nextendedData\n : false,\n    \nremoteConfiguration\n : false,\n    \nusepolicy\n : false,\n    \npolicymode\n : 0,\n    \nallowinvalidcerts\n : false,\n    \nvalidatedomainname\n : false,\n    \nvalidatecertificatechain\n : false,\n    \nservercer\n : \n,\n    \nclientpkcs\n : \n,\n    \npassphrase\n : \n,\n    \nwaypoints\n : [\n                    { \n_type\n : \nwaypoint\n,\n                      \ntst\n: nnnnnnnnnn,\n                      \nlat\n: nn.nnn,\n                      \nlon\n: nn.nnn,\n                      \nrad\n: nnn,\n                      \nshared\n: true,\n                      \ndesc\n : \nblabla\n\n                    } \n                  ]\n}\n\n\n\n\n\n\nmode\n                    0 == \nPrivate\n mode, 2 == \nPublic\n mode, 3 == \nHTTP\n mode\n\n\nlocked\n                  if set to true, locks settings screen on device for editing. View only. Default = false. Can only be set via \n.otrc\n import.\n\n\nsubTopic\n                                    is what the apps subscribe to\n\n\npubTopicBase\n                                is the prefix under which the apps will publish\n\n\nusername\n\n\npassword\n\n\ndeviceId\n\n\ntid\n                      is a configurable tracker-ID which is used by the iOS auto-faces feature to display, say, initials of a user. If it isn't explicitly configured, it defaults to the last two characters of the device's publish topic. \n\n\nwillTopic\n\n\nsubQos\n\n\npubQos\n\n\nwillQos\n\n\npubRetain\n\n\ntlsCrtPath\n                  not in iOS\n\n\ncleanSession\n\n\nwillRetain\n\n\nlocatorDisplacement\n             in meters\n\n\nlocatorInterval\n             in seconds\n\n\nlocatorAccuracyBackground\n           0 == high power, 1 == balanced power, 2 == low power, 3 == no power\n\n\nlocatorAccuracyForeground\n           0 == high power, 1 == balanced power, 2 == low power, 3 == no power\n\n\nmonitoring\n                  iOS only, set in UI. The four modes are: Quiet (-1), Manual (0), Significant (1), and Move (2)\n\n\nranging\n                 iOS only, set in UI\n\n\npositions\n                   iOS only, number of positions to keep and display\n\n\nautostartOnBoot\n             Android only\n\n\npubIncludeBattery\n               Android only, in iOS alway on\n\n\nsub\n                     Android only, subscription enabled for contacts, in iOS always subscribed\n\n\npub\n                     Android only, auto publish, in iOS controlled by \nmonitoring\n\n\nupdateAddressBook\n\n\nnotification\n                Android only, show notifications\n\n\nnotificationLocation\n            Android only, show last reported location in notification, off in iOS\n\n\nnotificationGeocoder\n            Android only, resolve location in notification to address, in iOS only resolved when in show details\n\n\nnotificationTickerOnPublish\n         Android only, show a ticker on successful publishes, always off in iOS\", \n\n\nnotificationTickerOnGeofenceTransition\n  Android only, show a ticker when the devices enters or leaves a geofence, always on in iOS\", \n\n\nremoteCommandReportLocation\n         Android only, respond to reportLocation remote command\n\n\nremoteCommandDump\n               Android only, respond to dump remote command\n\n\ncmd\n                     iOS only, respond to remote commands\n\n\nallowRemoteLocation\n             iOS only, respond to remote location request even if monitoring mode is set to manual\n\n\nextendedData\n                iOS only, add altitude, vertical accuracy, velocity and course over ground to published data\n\n\nremoteConfiguration\n             Android only, respond to remote configuration messages\n\n\nusepolicy\n                   iOS only, use user defined security policy\n\n\nallowinvalidcerts\n               iOS only, allow self signed certificates in user defined security policy\n\n\nvalidatedomainname\n              iOS only, validate domain main during TLS handshake\n\n\nvalidatecertificatechain\n            iOS only, validate the whole certificate chain or just the server certificate\n\n\npolicymode\n                  iOS only, \n\n\n0 = Do not used pinned certificates to validate servers.\n\n\n1 = Validate host certificates against public keys of pinned certificates.\n\n\n2 = Validate host certificates against pinned certificates.\n\n\n\n\n\n\nservercer\n                   iOS only, blank separated list of certificate file names in DER format, or empty\n\n\nclientpkcs\n                  iOS only, name of the client pkcs12 file,or empty \n\n\npassphrase\n                  iOS only, passphrase for client pkcs12 file \n\n\n\n\nNotes\n\n\n\n\nImagine you are operating an OwnTracks backend for e.g. your family, and you want to avoid your family members accidentally switching modes or modifying settings locally on the device. You can export their configuration, add a \nlocked: true\n to it and re-import it onto the iOS device. The settings will then be visible, but cannot be changed.\n\n\n\n\n_type=beacon\n\n\nThese messages are published when beacon ranging (iOS only) is enabled. Be advised that beacon ranging publishes a lot of messages.\n\n\n{\n        \n_type\n:\nbeacon\n,\n        \nuuid\n:\nCA271EAE-5FA8-4E80-8F08-2A302A95A959\n,\n        \nmajor\n:1,\n        \nminor\n:1,\n        \ntst\n: 1399028969,\n        \nacc\n:n,\n        \nrssi\n:n,\n        \nprox\n:n,\n}\n\n\n\n\n\n\nacc\n The accuracy of the proximity value, measured in meters from the beacon.\n\n\nrssi\n    The received signal strength of the beacon, measured in decibels. The theoretical relationship between RSSI and distance is something like this: \nRSSI[dbm] = \u2212(10n log10(d) \u2212 A)\n where d is the distance and A is the offset which is the measured RSSI 1 meter point away from the Bluetooth Low Energy device.\n\n\nprox\n    The relative distance to the beacon where n indicates\n\n\n0 = the proximity of the beacon could not be determined.\n\n\n1 = the beacon is in the user\u2019s immediate vicinity.\n\n\n2 = the beacon is relatively close to the user.\n\n\n3 = the beacon is far away.\"\n\n\n\n\n\n\n\n\n_type=cmd\n\n\n{\n_type\n:\ncmd\n,\naction\n:\nreportLocation\n}\n{\n_type\n:\ncmd\n,\naction\n:\nreportSteps\n}\n{\n_type\n:\ncmd\n,\naction\n:\ndump\n}\n{\n_type\n:\ncmd\n,\naction\n:\nwaypoints\n}\n{\n_type\n:\ncmd\n,\naction\n:\nsetWaypoints\n,\nwaypoints\n:[...]}\n{\n_type\n:\ncmd\n,\naction\n:\naction\n,\ncontent\n:\nBackend maintenance scheduled for tonight\\n\\nhttp://support.owntracks.org\n}\n{\n_type\n:\ncmd\n,\naction\n:\naction\n,\ncontent\n:\na href='http://support.owntracks.org'\nBackend Maintenance tonight\n/a\n}\n{\n_type\n:\ncmd\n,\naction\n:\naction\n,\nurl\n:\nhttp://support.owntracks.org\n}\n\n\n\n\n\n\naction\n      action to be performed by the device\n\n\nreportSteps\n reports steps walked on iPhone 5s devices. \n\n  You may add \"from\":\ntimestamp\n and/or \"to\":\ntimestamp\n\" \n  which defaults to current time, from defaults to current date 00:00 am\n  (see \nPedometer\n).\n\n\nreportLocation\n triggers the publish of the current location\n\n\ndump\n triggers the publish of a configuration message\n\n\nsetWaypoints\n configures new waypoints. (iOS only; \ndetails\n )\n\n\nwaypoints\n triggers a publish of all waypoints configured on the device. These are published in \n.otrw\n format to the \n../waypoints\n topic.\n\n\naction\n inserts an additional 'Featured Content' tab in the UI.\n\n\nIf \n\"url\"\n is specified, the URL is opened in a full screen web view within the app. \n\n\nIf \n\"url\"\n is not specified\n\n\nThe text in \n\"content\"\n is displayed. Links embedded in the text are operational.  If \n\"content\"\n is HTML, it is rendered.\n\n\nSend \n\"action\":\"action\"\n without \n\"content\"\n and without \n\"url\"\n to remove the extra tab.\n\n\nIf \n\"notify\"\n is in the payload, it is a string which will be used as notification in the UI\n\n\nIf the optional \n\"extern\"\n boolean is \ntrue\n a click on the notification will launch an external Web browser; \nfalse\n (the default) opens the \nurl\n in a Webview within the OwnTracks app.\n\n\n\n\n\n\n\n\n_type=steps\n\n\n{\n_type\n:\nsteps\n,\ntst\n:1400455130,\nsteps\n:1234,\nfrom\n:1400455130,\nto\n:1400458000}\n\n\n\n\n\n\ntst\n         timestamp of the request\n\n\nsteps\n   the number of steps walked with the device in the specfied time period or\n                -1 if device does not support step counting or specified time period\n                is invalid\n\n\nfrom\n        effective start of time period\n\n\nto\n          effective end of time period\n\n\n\n\n_type=card\n\n\nAs described in \nCard\n, apps read retained messages of \n_type=card\n on \nowntracks/+/+/info\n to find the \nname\n and avatar (\nface\n) of a user.\n\n\n{\n  \n_type\n: \ncard\n,\n  \nname\n: \nJane Jolie\n\n  \nface\n: \niV1CFEVkMhmCIKBUKh3 ... ghAAAAABJRU5ErkJggg==\n,\n}\n\n\n\n\nThe \nname\n element contains a name which is displayed by the apps to identify a user, and \nface\n contains the base64-encoded PNG image (40x40 px) which is displayed instead of a \nTID\n.\n\n\n_type=waypoints\n\n\n(currently iOS only)\nThe app can export a list of configured waypoints (separate from the configuration) in order to share these, for example. Similarly, the app can import a list of waypoints, merging them into the current list, from a JSON file with \n.otrw\n extension. The list of waypoints looks like this.\n\n\n{\n    \n_type\n: \nwaypoints\n,\n    \n_creator\n: \nOTwpDraw\n,\n    \nwaypoints\n: [\n        {\n            \n_type\n: \nwaypoint\n,\n            \ntst\n: 1433598071,\n            \nlat\n: 47.580231298,\n            \nlon\n: 9.525146484,\n            \nrad\n: 25186,\n            \ndesc\n: \nI went swimming here\n\n        },\n        {\n            \n_type\n: \nwaypoint\n,\n            \ntst\n: 1430398091,\n            \nlat\n: 46.517295754,\n            \nlon\n: 9.871215820,\n            \nrad\n: 500,\n            \ndesc\n: \nCheese fondue\n\n        }\n    ]\n}\n\n\n\n\nNote that \n_type=waypoints\n is \nplural\n.\n\n\n_type=encrypted\n\n\nThis payload type contains a single \ndata\n element with the original JSON object \n_type\n (e.g. \nlocation\n, \nbeacon\n, etc.) \nencrypted payload\n in it.\n\n\n{\n  \n_type\n: \nencrypted\n,\n  \ndata\n: \n1Vu7Owp ... W4lMnh28FB+el22GsCrlnggvEcp4H8GR9iKJdi1qfwkejYpzrQ+491Mwunjg=\n\n}", 
            "title": "JSON"
        }, 
        {
            "location": "/tech/json/#json", 
            "text": "OwnTracks publishes its message payloads in  JSON  format. The different payload types are identified by a  _type  element. Depending on the app platform, different payload types are supported.      _type  iOS  Android      location  Y  Y    lwt  Y  Y    waypoint  Y  Y    transition  Y  Y    beacon  Y  N    cmd  Y  Y    steps  Y  N    configuration  Y  Y    card  Y  Y    waypoints  Y     encrypted  Y  Y", 
            "title": "JSON"
        }, 
        {
            "location": "/tech/json/#topics", 
            "text": "Apps publish to:   owntracks/user/device  with  _type=location  for location updates, and with  _type=lwt  owntracks/user/device/cmd  with  _type=cmd       for remote commands  owntracks/user/device/event  with  _type=transition  for enter/leave events   Apps subscribe to:   owntracks/user/device/cmd  if remote commands are enabled  owntracks/+/+  for seeing other user's locations, depending on broker ACL  owntracks/+/+/event  (singular) for transition messages ( enter / leave )  owntracks/+/+/waypoint   (singular) for Waypoint definitions/modifications  owntracks/+/+/info   for obtaining  cards .   In addition, the iOS app publishes to:   owntracks/user/device/step  to report step counter  owntracks/user/device/beacon  for beacon ranging  owntracks/user/device/dump  for config dumps", 
            "title": "Topics"
        }, 
        {
            "location": "/tech/json/#_typelocation", 
            "text": "This location object describes the location of the device that published it.  Heads up: as from Android version 0.5.11 and from iOS version 8.0 numeric types are real numeric ( float ,  int , boolean  true / false ) and no longer strings.  {\n     _type  :  location ,        \n     acc    : 75,              \n     alt    : 13,\n     batt   : nnn,              \n     cog    : 270,\n     desc   :  sssss ,\n     event  :  sssss ,\n     lat    : x.xxxxxx,       \n     lon    : y.yyyyyy,        \n     rad    : nnn, \n     t      :  x ,\n     tid    :  YY ,\n     tst    : 1376715317,      \n     vacc   : 10,\n     vel    : 54,\n     p      : nnn\n}   acc  is accuracy of the reported location in meters without unit (integer). iOS adds this element only if it  = 0.  alt  is the altitude measured in meters above sea level ( Optional , integer). iOS adds this element only if it  = 0.  batt  is the device's battery level in percent (integer)  cog  is the heading (course over ground) in degrees, 0 = North ( Optional , integer). iOS adds this element only if it  = 0.. iOS adds this element only if it  = 0.  desc  is the description of a  waypoint  event  is one of  \"enter\"  or  \"leave\"  and tells if the app is entering or leaving a geofence   lat  is latitude as decimal, represented as a floating point number  lon  is longitude as decimal, represented as a floating point number  rad  is the radius in meters around around the geo-fence when entering/leaving a geofence (integer)  t  is the trigger for the publish x =   \"p\" ping, issued randomly by background task. Note, that the  tst  in a ping is that of the  last location reported by iOS , so this may look like a duplicate.  \"c\" circular region enter/leave event   \"b\" beacon region enter/leave event  \"r\" response to a \"reportLocation\" request  \"u\" manual publish requested by the user  \"t\" timer based publish in move move  \"a\" or missing  t  indicates automatic location update    tid  is a configurable tracker-ID which is used by the iOS auto-faces feature to display, say, initials of a user. If it isn't explicitly configured, it defaults to the last two characters of the device's publish topic.   tst  is a UNIX  epoch timestamp  of the event as it occurs which may be different from the time it is published (integer, seconds).  vacc  is the vertical accuracy of the reported altitude in meters ( Optional , integer). iOS adds this element only if it  = 0.  vel  is the velocity (speed) in km/h ( Optional , integer). iOS adds this element only if it  = 0.  p  is barometric pressure in kPa (kilo Pascal) (iOS   8.1.1 only with  Extended data  enabled)   (The iOS device can be configured to produce or not produce fields marked as  optional  with the Extended Data setting.)  Notes:\n* A publish with of  \"_type\": \"location\"  with a  \"b\"  trigger is sent when an iOS device enters or leaves a beacon in addition to a  \"_type\": \"transition\" : if somebody leaves and enters his home without having left the radius of detection for significant changes, a subscriber to his main topic would otherwise not get notified of any location change although beacon or circular region enter and leave transitions were generated.  Greenwich  The OwnTracks-edition of the  Choral Greenwich  device reports the following additional elements in a  _type=location  message:  {\n     _type :  location ,\n     alt : 160,\n     cog : 0,\n     dist : 189,\n     trip : 279122,\n     lat : xx.xxxxxx,\n     lon : y.yyyyyy,\n     vel : 12,\n     t :  t ,\n     tst : 1406803894\n}   alt  is altitude in meters. ( Optional )  batt  is the external battery voltage. ( Optional )  cog  is the course over ground (heading) in degrees. ( Optional )  dist  is the distance travelled in meters since the last location publish. ( Optional )  trip  is the distance travelled in meters since the last reboot. ( Optional )  vel  is the speed (velocity) in km/h. ( Optional )  t  is the trigger of the published message:  f  first publish after reboot  m  for manually requested locations (e.g. by publishing to  /cmd )  t  (time) for location published because device is moving.  T  (time) for location published because of time passed ( maxInterval ); device is stationary  k  When transitioning from  move  to  stationary  an additional publish is sent marked with trigger  k  (park)  v  When transitioning from  stationary  to  move  additional publish is sent marked with trigger  v  (mo-v-e)  l  When device looses GPS fix, an additional publish is sent to transmit the last known position  L  last position before gracefull shutdown   (The device can be configured to produce or not produce fields marked as  optional .)", 
            "title": "_type=location"
        }, 
        {
            "location": "/tech/json/#_typelwt", 
            "text": "A  last will and testament  is published automatically by the MQTT broker when it looses contact with the app. This typically looks like this:  {\n     _type : lwt ,\n     tst : 1380738247\n}  The timestamp is the Unix epoch time at which the app first connected (and  not  the time at which the LWT was published).", 
            "title": "_type=lwt"
        }, 
        {
            "location": "/tech/json/#_typewaypoint", 
            "text": "Waypoints denote specific geographical locations that you want to keep track of. You define a waypoint on the OwnTracks device, and OwnTracks publishes this waypoint to your broker (if the waypoint is marked  shared ). OwnTracks also monitors these waypoints and will publish a transition event ( _type: transition ) when entering or leaving the waypoint. Note, that a waypoint may also define a  Beacon .  {\n     _type   :  waypoint ,\n     desc    :  Free text entered on device ,\n     lat     : x.xxxxxx,       \n     lon     : y.yyyyyy,        \n     rad     : xxx,\n     tst     : nnnnn,\n     shared  : true,\n     tid     :  XX \n}   shared  location messages of shared waypoints contain a desc and event attribute. Not shared ones contain an event attribute only  tst  is the timestamp of waypoint  creation  even if it was subsequently modified by the user. (See  Waypoints .) It is copied into the  wtst  of the transition event ( type: transition ) when an event pertaining to this waypoint fires.   Waypoints are published non-retained because the second waypoint would overwrite the first: a client would only get the last one which makes no sense. Your application will typically store waypoints to some kind of persistent storage.", 
            "title": "_type=waypoint"
        }, 
        {
            "location": "/tech/json/#_typetransition", 
            "text": "A transition into or out of a previously configured waypoint is effected by publishing a  transition  to the  ../event  subtopic. In addition to the coordinates where the event fired ( lat ,  lon , and  acc  of these), the message contains the timestamp of the waypoint creation ( wtst ) as well as the  event  (which can be either  enter  or  leave ) and, in the case of a shared waypoint, it's description in  desc . Transition messages are published with  retain=0 .  {\n   _type :  transition ,\n   wtst : 1425042603,           // time of waypoint creation\n   lat : 12.34,                 // transition coordinates i.e.  here \n   lon : 44.5,\n   tst : 1427634603,            // timestamp of transition (e.g.  now )\n   acc : 130,                   // accuracy of lat, lon\n   tid :  JP ,\n   event :  enter ,\n   desc :  my Indian restaurant ,\n   t :  b           // trigger ( c  -default- for circular regions,  b  for beacons,  w  for WiFi (Android only))\n}  A transition event published as a result of a Beacon movement will have a  \"t\" : \"b\"  associated with it.", 
            "title": "_type=transition"
        }, 
        {
            "location": "/tech/json/#_typeconfiguration", 
            "text": "The device configuration can be imported and exported as JSON. The exported configuration can contain an array of waypoints that are defined on the device.   {\n     _type :  configuration ,\n     mode : 0,\n     locked : false,\n     deviceId :  phone ,\n     clientId :  jane-phone ,\n     trackerId :  xx ,\n     subTopic :  owntracks/# ,\n     pubTopicBase :  owntracks/jane/phone ,\n     host :  broker.my.net ,\n     username :  jane ,\n     password :  secr3t ,\n     willTopic :  ,\n     subQos : 1,\n     pubQos : 2,\n     pubInterval  : 30,\n     port : 8883,\n     keepalive : 60,\n     willQos : 1,\n     pubRetain : true,\n     tls : true,\n     tlsCrtPath  :  /foo/bar ,\n     auth : true,\n     cleanSession : false,\n     willRetain : false,\n     locatorDisplacement : 200,\n     locatorInterval : 180,\n     locatorAccuracyBackground  : 2,\n     locatorAccuracyForeground  : 0,\n     messaging : true,\n     monitoring : 1,\n     ranging :  ,\n     positions : 50,\n     connectionAdvancedMode  : false,\n     autostartOnBoot  : false,\n     pubIncludeBattery  : false,\n     sub  : false,\n     pub  : false,\n     updateAddressBook  : false,\n     notification  : false,\n     notificationLocation  : false,\n     notificationGeocoder  : false,\n     notificationTickerOnPublish  : false,\n     notificationTickerOnGeofenceTransition  : false,\n     remoteCommandReportLocation  : false,\n     remoteCommandDump  : false,\n     cmd  : false,\n     allowRemoteLocation  : false,\n     extendedData  : false,\n     remoteConfiguration  : false,\n     usepolicy  : false,\n     policymode  : 0,\n     allowinvalidcerts  : false,\n     validatedomainname  : false,\n     validatecertificatechain  : false,\n     servercer  :  ,\n     clientpkcs  :  ,\n     passphrase  :  ,\n     waypoints  : [\n                    {  _type  :  waypoint ,\n                       tst : nnnnnnnnnn,\n                       lat : nn.nnn,\n                       lon : nn.nnn,\n                       rad : nnn,\n                       shared : true,\n                       desc  :  blabla \n                    } \n                  ]\n}   mode                     0 ==  Private  mode, 2 ==  Public  mode, 3 ==  HTTP  mode  locked                   if set to true, locks settings screen on device for editing. View only. Default = false. Can only be set via  .otrc  import.  subTopic                                     is what the apps subscribe to  pubTopicBase                                 is the prefix under which the apps will publish  username  password  deviceId  tid                       is a configurable tracker-ID which is used by the iOS auto-faces feature to display, say, initials of a user. If it isn't explicitly configured, it defaults to the last two characters of the device's publish topic.   willTopic  subQos  pubQos  willQos  pubRetain  tlsCrtPath                   not in iOS  cleanSession  willRetain  locatorDisplacement              in meters  locatorInterval              in seconds  locatorAccuracyBackground            0 == high power, 1 == balanced power, 2 == low power, 3 == no power  locatorAccuracyForeground            0 == high power, 1 == balanced power, 2 == low power, 3 == no power  monitoring                   iOS only, set in UI. The four modes are: Quiet (-1), Manual (0), Significant (1), and Move (2)  ranging                  iOS only, set in UI  positions                    iOS only, number of positions to keep and display  autostartOnBoot              Android only  pubIncludeBattery                Android only, in iOS alway on  sub                      Android only, subscription enabled for contacts, in iOS always subscribed  pub                      Android only, auto publish, in iOS controlled by  monitoring  updateAddressBook  notification                 Android only, show notifications  notificationLocation             Android only, show last reported location in notification, off in iOS  notificationGeocoder             Android only, resolve location in notification to address, in iOS only resolved when in show details  notificationTickerOnPublish          Android only, show a ticker on successful publishes, always off in iOS\",   notificationTickerOnGeofenceTransition   Android only, show a ticker when the devices enters or leaves a geofence, always on in iOS\",   remoteCommandReportLocation          Android only, respond to reportLocation remote command  remoteCommandDump                Android only, respond to dump remote command  cmd                      iOS only, respond to remote commands  allowRemoteLocation              iOS only, respond to remote location request even if monitoring mode is set to manual  extendedData                 iOS only, add altitude, vertical accuracy, velocity and course over ground to published data  remoteConfiguration              Android only, respond to remote configuration messages  usepolicy                    iOS only, use user defined security policy  allowinvalidcerts                iOS only, allow self signed certificates in user defined security policy  validatedomainname               iOS only, validate domain main during TLS handshake  validatecertificatechain             iOS only, validate the whole certificate chain or just the server certificate  policymode                   iOS only,   0 = Do not used pinned certificates to validate servers.  1 = Validate host certificates against public keys of pinned certificates.  2 = Validate host certificates against pinned certificates.    servercer                    iOS only, blank separated list of certificate file names in DER format, or empty  clientpkcs                   iOS only, name of the client pkcs12 file,or empty   passphrase                   iOS only, passphrase for client pkcs12 file    Notes   Imagine you are operating an OwnTracks backend for e.g. your family, and you want to avoid your family members accidentally switching modes or modifying settings locally on the device. You can export their configuration, add a  locked: true  to it and re-import it onto the iOS device. The settings will then be visible, but cannot be changed.", 
            "title": "_type=configuration"
        }, 
        {
            "location": "/tech/json/#_typebeacon", 
            "text": "These messages are published when beacon ranging (iOS only) is enabled. Be advised that beacon ranging publishes a lot of messages.  {\n         _type : beacon ,\n         uuid : CA271EAE-5FA8-4E80-8F08-2A302A95A959 ,\n         major :1,\n         minor :1,\n         tst : 1399028969,\n         acc :n,\n         rssi :n,\n         prox :n,\n}   acc  The accuracy of the proximity value, measured in meters from the beacon.  rssi     The received signal strength of the beacon, measured in decibels. The theoretical relationship between RSSI and distance is something like this:  RSSI[dbm] = \u2212(10n log10(d) \u2212 A)  where d is the distance and A is the offset which is the measured RSSI 1 meter point away from the Bluetooth Low Energy device.  prox     The relative distance to the beacon where n indicates  0 = the proximity of the beacon could not be determined.  1 = the beacon is in the user\u2019s immediate vicinity.  2 = the beacon is relatively close to the user.  3 = the beacon is far away.\"", 
            "title": "_type=beacon"
        }, 
        {
            "location": "/tech/json/#_typecmd", 
            "text": "{ _type : cmd , action : reportLocation }\n{ _type : cmd , action : reportSteps }\n{ _type : cmd , action : dump }\n{ _type : cmd , action : waypoints }\n{ _type : cmd , action : setWaypoints , waypoints :[...]}\n{ _type : cmd , action : action , content : Backend maintenance scheduled for tonight\\n\\nhttp://support.owntracks.org }\n{ _type : cmd , action : action , content : a href='http://support.owntracks.org' Backend Maintenance tonight /a }\n{ _type : cmd , action : action , url : http://support.owntracks.org }   action       action to be performed by the device  reportSteps  reports steps walked on iPhone 5s devices.  \n  You may add \"from\": timestamp  and/or \"to\": timestamp \" \n  which defaults to current time, from defaults to current date 00:00 am\n  (see  Pedometer ).  reportLocation  triggers the publish of the current location  dump  triggers the publish of a configuration message  setWaypoints  configures new waypoints. (iOS only;  details  )  waypoints  triggers a publish of all waypoints configured on the device. These are published in  .otrw  format to the  ../waypoints  topic.  action  inserts an additional 'Featured Content' tab in the UI.  If  \"url\"  is specified, the URL is opened in a full screen web view within the app.   If  \"url\"  is not specified  The text in  \"content\"  is displayed. Links embedded in the text are operational.  If  \"content\"  is HTML, it is rendered.  Send  \"action\":\"action\"  without  \"content\"  and without  \"url\"  to remove the extra tab.  If  \"notify\"  is in the payload, it is a string which will be used as notification in the UI  If the optional  \"extern\"  boolean is  true  a click on the notification will launch an external Web browser;  false  (the default) opens the  url  in a Webview within the OwnTracks app.", 
            "title": "_type=cmd"
        }, 
        {
            "location": "/tech/json/#_typesteps", 
            "text": "{ _type : steps , tst :1400455130, steps :1234, from :1400455130, to :1400458000}   tst          timestamp of the request  steps    the number of steps walked with the device in the specfied time period or\n                -1 if device does not support step counting or specified time period\n                is invalid  from         effective start of time period  to           effective end of time period", 
            "title": "_type=steps"
        }, 
        {
            "location": "/tech/json/#_typecard", 
            "text": "As described in  Card , apps read retained messages of  _type=card  on  owntracks/+/+/info  to find the  name  and avatar ( face ) of a user.  {\n   _type :  card ,\n   name :  Jane Jolie \n   face :  iV1CFEVkMhmCIKBUKh3 ... ghAAAAABJRU5ErkJggg== ,\n}  The  name  element contains a name which is displayed by the apps to identify a user, and  face  contains the base64-encoded PNG image (40x40 px) which is displayed instead of a  TID .", 
            "title": "_type=card"
        }, 
        {
            "location": "/tech/json/#_typewaypoints", 
            "text": "(currently iOS only)\nThe app can export a list of configured waypoints (separate from the configuration) in order to share these, for example. Similarly, the app can import a list of waypoints, merging them into the current list, from a JSON file with  .otrw  extension. The list of waypoints looks like this.  {\n     _type :  waypoints ,\n     _creator :  OTwpDraw ,\n     waypoints : [\n        {\n             _type :  waypoint ,\n             tst : 1433598071,\n             lat : 47.580231298,\n             lon : 9.525146484,\n             rad : 25186,\n             desc :  I went swimming here \n        },\n        {\n             _type :  waypoint ,\n             tst : 1430398091,\n             lat : 46.517295754,\n             lon : 9.871215820,\n             rad : 500,\n             desc :  Cheese fondue \n        }\n    ]\n}  Note that  _type=waypoints  is  plural .", 
            "title": "_type=waypoints"
        }, 
        {
            "location": "/tech/json/#_typeencrypted", 
            "text": "This payload type contains a single  data  element with the original JSON object  _type  (e.g.  location ,  beacon , etc.)  encrypted payload  in it.  {\n   _type :  encrypted ,\n   data :  1Vu7Owp ... W4lMnh28FB+el22GsCrlnggvEcp4H8GR9iKJdi1qfwkejYpzrQ+491Mwunjg= \n}", 
            "title": "_type=encrypted"
        }, 
        {
            "location": "/tech/mqtt/", 
            "text": "MQTT\n\n\nKeepalives\n\n\nMQTT was designed with mobile clients in mind so it doesn't require a persistent TCP connection. The broker detects a dead client if it hasn't heard from a client within the \nkeepalive\n interval which is set by the client.\n\n\nThe server should send the LWT if it the interval plus 50% passed without receiving any MQTT packet from the client (e.g. after 90 sec if keepalive was 60 sec.\n\n\nFrom the spec:\n\n\n\n\nThe actual value of the Keep Alive is application specific; typically this is\na few minutes. The maximum value is 18 hours 12 minutes and 15 seconds.\n\n\n\n\nFor example, \nmosquitto_sub\n uses a default of 60 sec.\n\n\nIn addition, note that the mosquitto broker sends an LWT message if the TCP connection is closed/aborts without sending an MQTT-Disconnect beforehand.", 
            "title": "MQTT"
        }, 
        {
            "location": "/tech/mqtt/#mqtt", 
            "text": "Keepalives  MQTT was designed with mobile clients in mind so it doesn't require a persistent TCP connection. The broker detects a dead client if it hasn't heard from a client within the  keepalive  interval which is set by the client.  The server should send the LWT if it the interval plus 50% passed without receiving any MQTT packet from the client (e.g. after 90 sec if keepalive was 60 sec.  From the spec:   The actual value of the Keep Alive is application specific; typically this is\na few minutes. The maximum value is 18 hours 12 minutes and 15 seconds.   For example,  mosquitto_sub  uses a default of 60 sec.  In addition, note that the mosquitto broker sends an LWT message if the TCP connection is closed/aborts without sending an MQTT-Disconnect beforehand.", 
            "title": "MQTT"
        }, 
        {
            "location": "/tech/qr/", 
            "text": "QR codes\n\n\nTo setup the OwnTracks app (iOS only currently), you can use QR codes or specially-constructed URLs to configure the app. This is currently implemented in iOS. The QR codes can be scanned from the settings tab within the app\n\n\n\n\nAlternatively, you can use an external QR reader app (such as \nQrafter\n) or, even easier, you provide the URL and view it through the device's mobile Web browser.\n\n\n\n\nQR codes can be prepared with a number of tools: there are online offerings, and there is a standalone C program by the name of \nqrencode\n which works very well:\n\n\nqrencode -l H -v 10 -d 300 -o mybeacon.png 'owntracks:///beacon?name=MyBeacon\nuuid=12345678-1234-1234-1234-123456789A\nmajor=2\nminor=1'\n\n\n\n\niBeacon QR URL\n\n\n\n\nscheme = \nowntracks\n\n\nhost = \nempty\n\n\npath = \n/beacon\n\n\nquery = \nname=\nname\nuuid=\nuuid\nmajor=\nmajor\nminor=\nminor\n\n\n\n\nmajor and minor are optional\n\n\nExample:\n\n\nowntracks:///beacon?name=MyBeacon\nuuid=12345678-1234-1234-1234-123456789A\nmajor=2\nminor=1", 
            "title": "QR"
        }, 
        {
            "location": "/tech/qr/#qr-codes", 
            "text": "To setup the OwnTracks app (iOS only currently), you can use QR codes or specially-constructed URLs to configure the app. This is currently implemented in iOS. The QR codes can be scanned from the settings tab within the app   Alternatively, you can use an external QR reader app (such as  Qrafter ) or, even easier, you provide the URL and view it through the device's mobile Web browser.   QR codes can be prepared with a number of tools: there are online offerings, and there is a standalone C program by the name of  qrencode  which works very well:  qrencode -l H -v 10 -d 300 -o mybeacon.png 'owntracks:///beacon?name=MyBeacon uuid=12345678-1234-1234-1234-123456789A major=2 minor=1'  iBeacon QR URL   scheme =  owntracks  host =  empty  path =  /beacon  query =  name= name uuid= uuid major= major minor= minor   major and minor are optional  Example:  owntracks:///beacon?name=MyBeacon uuid=12345678-1234-1234-1234-123456789A major=2 minor=1", 
            "title": "QR codes"
        }, 
        {
            "location": "/tech/program/", 
            "text": "Programming\n\n\nWe've \nshown you some clients which consume OwnTracks data\n, but you may well wish to dip your fingers into programming something of your own. Creating a program to consume OwnTracks data isn't particularly difficult, and we're going to show you what you can do with a bit of \nPython\n together with the \nPaho Python client\n.\n\n\nGetting started: Paho Python\n\n\nWe're assuming you have Python installed, which you can verify by attempting to invoke \npython -V\n; if installed, it tells you the version number. We're also assuming you have \npip\n installed (a Python package manager) which may be called \npip2\n or something on your machine. You may have to install \nsetuptools\n via your distribution's package manager.\n\n\nInstall the \nPaho Python\n module using\n\n\npip install paho-mqtt\n\n\n\n\nProgress reports\n\n\nAssume we want to create a program which should report the location of our friends, as a simple list:\n\n\nTID = n4 is currently at 51.0343863, 9.4763712\nTID = n7 is currently at 52.7343671, 7.8764431\nTID = jp is currently at 53.134404655, 8.1063173\n\n\n\n\nWe need a small utility program which will subscribe to location publishes received by your broker by connecting to it on \nlocalhost\n and subscribing to \nowntracks/+/+\n (a wild-card expression in which each \n+\n means \nanything at this level\n).\n\n\nThe Code\n\n\nFor each received message, the utility attempts to decode the JSON payload and then prints the tracker-ID (\nTID\n) as well as latitude, longitude coordinates. Keep a copy of our \nOwnTracks-JSON\n documentation handy and study the topic names of each possible publish by the apps.\n\n\n#!/usr/bin/env python\n\nimport paho.mqtt.client as mqtt\nimport json\n\n# The callback for when the client successfully connects to the broker\ndef on_connect(client, userdata, rc):\n    ''' We subscribe on_connect() so that if we lose the connection\n        and reconnect, subscriptions will be renewed. '''\n\n    client.subscribe(\nowntracks/+/+\n)\n\n# The callback for when a PUBLISH message is received from the broker\ndef on_message(client, userdata, msg):\n\n    topic = msg.topic\n\n    try:\n        data = json.loads(str(msg.payload))\n\n        print \nTID = {0} is currently at {1}, {2}\n.format(data['tid'], data['lat'], data['lon'])\n    except:\n        print \nCannot decode data on topic {0}\n.format(topic)\n\nclient = mqtt.Client()\nclient.on_connect = on_connect\nclient.on_message = on_message\n\nclient.connect(\nlocalhost\n, 1883, 60)\n\n# Blocking call which processes all network traffic and dispatches\n# callbacks (see on_*() above). It also handles reconnecting.\n\nclient.loop_forever()\n\n\n\n\nMicro Map\n\n\nAssume for a moment that you alter the program above in such a way as that it writes your current location in JSON format to a file called \nme.json\n which could look like this:\n\n\n{\n    \nlat\n: 48.858334,\n    \nlon\n : 2.295134,\n    \ntid\n:\nJJ\n\n}\n\n\n\n\nWe could then create a Web page which would load that JSON and display a marker on a map.\n\n\n\n\nindex.html\n\n\n!DOCTYPE html\n\n\nhtml\n\n  \nhead\n\n    \ntitle\nMicromap\n/title\n\n    \nmeta name=\nviewport\n content=\nwidth=device-width, height=device-height, user-scalable=no, initial-scale=1.0\n /\n\n\n    \nmeta name=\nmobile-web-app-capable\n content=\nyes\n\n    \nmeta name=\napple-mobile-web-app-capable\n content=\nyes\n\n    \nstyle type=\ntext/css\n\n      body {  font-size: 80%; }\n\n      td { border-bottom: 1px solid; border-right: 1px dotted;}\n\n      #map-canvas { height: 100% }\n\n    \n/style\n\n     \nscript src=\nhttps://maps.googleapis.com/maps/api/js?v=3.exp\nsensor=false\n/script\n\n     \nscript src=\nhttp://code.jquery.com/jquery-1.9.1.min.js\n/script\n\n     \nscript src=\nhttp://code.jquery.com/jquery-migrate-1.1.1.min.js\n/script\n\n    \nscript src=\nfunctions.js\n/script\n\n  \n/head\n\n  \nbody\n\n    \ndiv\n\n      \ndiv id=\nmap-canvas\n style='width: 100%; height: 400px;'/\n/div\n\n    \n/div\n\n  \n/body\n\n\n/html\n\n\n\n\n\nfunctions.js\n\n\nfunction initialize() {\n    var json = (function () {\n        var json = null; \n        $.ajax({ \n            'type' : 'GET',\n            'async': false, \n            'cache' : false,\n            'global': true, \n            'url'   : 'me.json',  // URI of JSON file we create\n            'dataType': \njson\n, \n            'success': function (data) {\n                json = data;\n                return json;\n             }\n        });\n    return json;\n    })();\n\n    var data = json;\n    console.log(JSON.stringify(data));\n\n    var center = new google.maps.LatLng(data.lat, data.lon);\n    mapOptions = {\n        center: center,\n        zoom: 12,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        scrollwheel: false,\n        disableDefaultUI: false,\n        panControl: false,\n        scaleControl: false,\n        streetViewControl: false,\n        overviewMapControl: false,\n    };\n\n    map = new google.maps.Map(document.getElementById(\nmap-canvas\n), mapOptions);\n\n    var LatLng = new google.maps.LatLng(data.lat, data.lon); \n    var m = new google.maps.Marker({\n        position: LatLng,\n        map: map,\n        title: data.tid,\n    });\n}\ngoogle.maps.event.addDomListener(window, 'load', initialize);\n\n\n\n\nwould result in a map being displayed in your Web browser with a marker at the last location received by your MQTT broker. Note: the marker won't move; we leave that as an exercise to you, or just head over and look \nat some clients\n which do that for you.\n\n\nTesting\n\n\nTesting location-based apps is a bit of a, well, pain, but remember there are a few simple tricks you can apply:\n\n\n\n\nUse the \npublish now\n button in OwnTracks to fire a location update. The smart phone won't really \nmove\n much of course, but it'll allow you to test your program a bit.\n\n\nPublish your own \nOwnTracks-JSON\n payload to the broker with \nmosquitto_pub\n or similar.\n\n\n\n\nLast words\n\n\nConsuming OwnTracks messages from your MQTT broker isn't particularly difficult, and people have built nice programs doing so.", 
            "title": "Code"
        }, 
        {
            "location": "/tech/program/#programming", 
            "text": "We've  shown you some clients which consume OwnTracks data , but you may well wish to dip your fingers into programming something of your own. Creating a program to consume OwnTracks data isn't particularly difficult, and we're going to show you what you can do with a bit of  Python  together with the  Paho Python client .", 
            "title": "Programming"
        }, 
        {
            "location": "/tech/program/#getting-started-paho-python", 
            "text": "We're assuming you have Python installed, which you can verify by attempting to invoke  python -V ; if installed, it tells you the version number. We're also assuming you have  pip  installed (a Python package manager) which may be called  pip2  or something on your machine. You may have to install  setuptools  via your distribution's package manager.  Install the  Paho Python  module using  pip install paho-mqtt", 
            "title": "Getting started: Paho Python"
        }, 
        {
            "location": "/tech/program/#progress-reports", 
            "text": "Assume we want to create a program which should report the location of our friends, as a simple list:  TID = n4 is currently at 51.0343863, 9.4763712\nTID = n7 is currently at 52.7343671, 7.8764431\nTID = jp is currently at 53.134404655, 8.1063173  We need a small utility program which will subscribe to location publishes received by your broker by connecting to it on  localhost  and subscribing to  owntracks/+/+  (a wild-card expression in which each  +  means  anything at this level ).  The Code  For each received message, the utility attempts to decode the JSON payload and then prints the tracker-ID ( TID ) as well as latitude, longitude coordinates. Keep a copy of our  OwnTracks-JSON  documentation handy and study the topic names of each possible publish by the apps.  #!/usr/bin/env python\n\nimport paho.mqtt.client as mqtt\nimport json\n\n# The callback for when the client successfully connects to the broker\ndef on_connect(client, userdata, rc):\n    ''' We subscribe on_connect() so that if we lose the connection\n        and reconnect, subscriptions will be renewed. '''\n\n    client.subscribe( owntracks/+/+ )\n\n# The callback for when a PUBLISH message is received from the broker\ndef on_message(client, userdata, msg):\n\n    topic = msg.topic\n\n    try:\n        data = json.loads(str(msg.payload))\n\n        print  TID = {0} is currently at {1}, {2} .format(data['tid'], data['lat'], data['lon'])\n    except:\n        print  Cannot decode data on topic {0} .format(topic)\n\nclient = mqtt.Client()\nclient.on_connect = on_connect\nclient.on_message = on_message\n\nclient.connect( localhost , 1883, 60)\n\n# Blocking call which processes all network traffic and dispatches\n# callbacks (see on_*() above). It also handles reconnecting.\n\nclient.loop_forever()", 
            "title": "Progress reports"
        }, 
        {
            "location": "/tech/program/#micro-map", 
            "text": "Assume for a moment that you alter the program above in such a way as that it writes your current location in JSON format to a file called  me.json  which could look like this:  {\n     lat : 48.858334,\n     lon  : 2.295134,\n     tid : JJ \n}  We could then create a Web page which would load that JSON and display a marker on a map.   index.html  !DOCTYPE html  html \n   head \n     title Micromap /title \n     meta name= viewport  content= width=device-width, height=device-height, user-scalable=no, initial-scale=1.0  / \n\n     meta name= mobile-web-app-capable  content= yes \n     meta name= apple-mobile-web-app-capable  content= yes \n     style type= text/css \n      body {  font-size: 80%; }\n\n      td { border-bottom: 1px solid; border-right: 1px dotted;}\n\n      #map-canvas { height: 100% }\n\n     /style \n      script src= https://maps.googleapis.com/maps/api/js?v=3.exp sensor=false /script \n      script src= http://code.jquery.com/jquery-1.9.1.min.js /script \n      script src= http://code.jquery.com/jquery-migrate-1.1.1.min.js /script \n     script src= functions.js /script \n   /head \n   body \n     div \n       div id= map-canvas  style='width: 100%; height: 400px;'/ /div \n     /div \n   /body  /html   functions.js  function initialize() {\n    var json = (function () {\n        var json = null; \n        $.ajax({ \n            'type' : 'GET',\n            'async': false, \n            'cache' : false,\n            'global': true, \n            'url'   : 'me.json',  // URI of JSON file we create\n            'dataType':  json , \n            'success': function (data) {\n                json = data;\n                return json;\n             }\n        });\n    return json;\n    })();\n\n    var data = json;\n    console.log(JSON.stringify(data));\n\n    var center = new google.maps.LatLng(data.lat, data.lon);\n    mapOptions = {\n        center: center,\n        zoom: 12,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        scrollwheel: false,\n        disableDefaultUI: false,\n        panControl: false,\n        scaleControl: false,\n        streetViewControl: false,\n        overviewMapControl: false,\n    };\n\n    map = new google.maps.Map(document.getElementById( map-canvas ), mapOptions);\n\n    var LatLng = new google.maps.LatLng(data.lat, data.lon); \n    var m = new google.maps.Marker({\n        position: LatLng,\n        map: map,\n        title: data.tid,\n    });\n}\ngoogle.maps.event.addDomListener(window, 'load', initialize);  would result in a map being displayed in your Web browser with a marker at the last location received by your MQTT broker. Note: the marker won't move; we leave that as an exercise to you, or just head over and look  at some clients  which do that for you.", 
            "title": "Micro Map"
        }, 
        {
            "location": "/tech/program/#testing", 
            "text": "Testing location-based apps is a bit of a, well, pain, but remember there are a few simple tricks you can apply:   Use the  publish now  button in OwnTracks to fire a location update. The smart phone won't really  move  much of course, but it'll allow you to test your program a bit.  Publish your own  OwnTracks-JSON  payload to the broker with  mosquitto_pub  or similar.", 
            "title": "Testing"
        }, 
        {
            "location": "/tech/program/#last-words", 
            "text": "Consuming OwnTracks messages from your MQTT broker isn't particularly difficult, and people have built nice programs doing so.", 
            "title": "Last words"
        }, 
        {
            "location": "/terminology/", 
            "text": "Terminology\n\n\nSome of the terms we use can be a little confusing at times, so here's a list of terms you should be familiar with.\n\n\nMQTT\n\n\nMQTT is a lightweight publish-subscribe message-bus over which messages can be exchanged between several clients. \n\n\nbroker\n\n\nA MQTT \nbroker\n is a server that enables the communication between clients. The broker is responsible for distributing messages to interested clients based on the topic of a message. \n\n\npublish\n\n\nThe act of sending a message to a broker. \n\n\ntopic\n\n\nEach message that is published by a client is send to a specific topic on the broker. Clients can opt to receive only certain or all messages depending on which topic they subscribe to. \n\n\nsubscribe\n\n\nClients can specify to receive messages that are published to specific topics by subscribing to them. A client that is subscribed to the topic \nowntracks/jane/iphone\n will, for example, not receive a message that is published to \nowntracks/john/nexus\n.\n\n\nQoS\n\n\nQoS\n or \nQuality of Service\n, specifies how the app should attempt to publish messages to an MQTT broker.\n\n\n\n\nQoS=0. The message is delivered at most once, or it is not delivered at all. Its delivery across the network is not acknowledged.\n\n\nQoS=1. The message is always delivered at least once. If the sender does not receive an acknowledgment, the message is sent again with the DUP flag set until an acknowledgment is received. As a result receiver can be sent the same message multiple times, and might process it multiple times.\n\n\nQoS=2. The message is always delivered exactly once. This is the safest but slowest method of transfer.\n\n\n\n\nRetain\n\n\nWhen a message is published to a \nbroker\n with the \ndurable\n or \nretain\n flat\nset, it means that the MQTT broker will attempt to store the last published\nmessage on a particular topic.\n\n\nA client which subscribes to that topic will receive that last retained message once it\nconnects to the broker.\n\n\nGeocoding\n\n\nReverse geocoding\n is the act of looking up the address for a pair of coordinates.\n\n\nGeofence\n\n\nA \ngeofence\n is an area around a particular coordinate. Geofences will trigger certain actions once the device enters or leaves the setup area.", 
            "title": "Terminology"
        }, 
        {
            "location": "/terminology/#terminology", 
            "text": "Some of the terms we use can be a little confusing at times, so here's a list of terms you should be familiar with.  MQTT  MQTT is a lightweight publish-subscribe message-bus over which messages can be exchanged between several clients.   broker  A MQTT  broker  is a server that enables the communication between clients. The broker is responsible for distributing messages to interested clients based on the topic of a message.   publish  The act of sending a message to a broker.   topic  Each message that is published by a client is send to a specific topic on the broker. Clients can opt to receive only certain or all messages depending on which topic they subscribe to.   subscribe  Clients can specify to receive messages that are published to specific topics by subscribing to them. A client that is subscribed to the topic  owntracks/jane/iphone  will, for example, not receive a message that is published to  owntracks/john/nexus .  QoS  QoS  or  Quality of Service , specifies how the app should attempt to publish messages to an MQTT broker.   QoS=0. The message is delivered at most once, or it is not delivered at all. Its delivery across the network is not acknowledged.  QoS=1. The message is always delivered at least once. If the sender does not receive an acknowledgment, the message is sent again with the DUP flag set until an acknowledgment is received. As a result receiver can be sent the same message multiple times, and might process it multiple times.  QoS=2. The message is always delivered exactly once. This is the safest but slowest method of transfer.   Retain  When a message is published to a  broker  with the  durable  or  retain  flat\nset, it means that the MQTT broker will attempt to store the last published\nmessage on a particular topic.  A client which subscribes to that topic will receive that last retained message once it\nconnects to the broker.  Geocoding  Reverse geocoding  is the act of looking up the address for a pair of coordinates.  Geofence  A  geofence  is an area around a particular coordinate. Geofences will trigger certain actions once the device enters or leaves the setup area.", 
            "title": "Terminology"
        }, 
        {
            "location": "/clients/recorder/", 
            "text": "Recorder\n\n\nThe \nOwnTracks Recorder\n is a lightweight program for storing and accessing location data published via MQTT by the OwnTracks apps. It is a compiled program which is easily to install and operate even on low-end hardware, and it doesn't require external an external database.\n\n\nDocker\n\n\nWe have an \nexperimental Docker image\n which you can use to launch the Recorder and its associated \nMosquitto\n broker. The image expects a volume which you mount into it into which it will write persistent data. Furthermore, you pass environment variables into the container at first launch with which TLS certificates are created with subject (and subjAltNames) according to your preference. \n\n\n\n\nAs an example, let's assume the host on which the Docker container will run has two IP addresses, \n192.168.1.82\n and \n10.0.1.83\n. We will also assume that you want the MQTT port on the host to be \n11883\n and its TLS port to be \n18883\n. Let's further assume that one of these addresses is DNS accessible as \nds415.ww.mens.de\n and the other as \nmqtt.ww.mens.de\n. We want the TLS certificates for the container's Mosquitto broke to contain subjAltNames for these, so we will proceed as follows:\n\n\n\n\nCreate a directory which will be mounted into the container for persistent data: \nmkdir /var/owntracks\n, say.\n\n\nLaunch the Docker container with a script such as this one\n\n\n\n\n#!/bin/sh\n\ndocker run -v /var/owntracks:/owntracks -p 11883:1883 -p 18883:8883 -p 8083:8083 \\\n    --name owntracks-recorder\n    --hostname ds415.ww.mens.de \\\n    -e MQTTHOSTNAME=\nds415.ww.mens.de\n \\\n    -e IPLIST=\n192.168.1.1 192.168.1.82\n \\\n    -e HOSTLIST=\nmqtt.ww.mens.de ds415.ww.mens.de\n \\\n    owntracks/recorderd\n\n\n\n\nThat should download the Docker image (if necessary) and launch a container accordingly. At first run, the TLS certificates are created in the \n/owntracks\n volume (which was mounted onto \n/var/owntracks\n on the host). The host's directory will also contain a \nmosquitto/\n directory which Mosquitto's configuration file, and the Recorder will use \n/owntracks/recorder/\n as its persistent storage.\n\n\nThe above script will surface the port numbers as follows:\n\n\n\n\nMQTT will be on 11883\n\n\nMQTT over TLS on 18883\n\n\nand the Recorder's Web interface on 8083\n\n\n\n\nYou can assign these as you wish. Recall, that if you use our example, your OwnTracks apps will also have to access 18883 over TLS (instead of the default 8883 over TLS).\n\n\nExploring\n\n\nIf you want to see what's going on within the container, try launching an MQTT subscriber: first obtain the container's ID:\n\n\ndocker ps\nCONTAINER ID        IMAGE                   ...\n5c8800a4ab78        owntracks/recorderd     ...\n\n\n\n\nThen, say, point \nmosquitto_sub\n to the broker from within the container:\n\n\ndocker exec -ti 5c8800a4ab78  mosquitto_sub -d -v -t '#'\n\n\n\n\nSynology\n\n\nA number of Synology devices with newer DSM support Docker; please refer to the original documentation to determine if yours has Docker support. If it does, \nthis page\n describes how to use Docker. Once you've installed the package, you can proceed to download the Recorder image (search for \nowntracks-recorder\n; the image you want is called \nowntracks-recorderd\n with a trailing \nd\n on it) and launch a container. (This was tested on DSM 5.2.)\n\n\nLaunch container creation with the wizard, and give the container a name, e.g. \nowntracks-recorder\n.\n\n\n\n\nLeave the settings in Step 2 as they are.\n\n\n\n\nAdd the TCP ports for MQTT (plain), MQTT (over TLS), and the Recorder's HTTP interface.\n\n\n\n\nIn the \nVolume\n tab, add a host folder which will be mounted into the container. Here we've chosen \n/home/jpm/owntracks\n which we first created with DSM's file manager.\n\n\n\n\nIn the \nEnvironment\n tab add the variables which will be exported into the container. Note that \nIPLIST\n and \nHOSTLIST\n (both of which are optional) take a space-separated list of values.\n\n\n\n\nCheck everything and press \nApply\n to have the container created.\n\n\n\n\nThe container can then be launched by pressing the \"on\" switch.\n\n\n\n\nThe Docker container log will show console output.\n\n\n\n\nThe Recorder running on the Synology DiskStation will be accessible via the host port numbers you configured (see above for more information).", 
            "title": "Docker"
        }, 
        {
            "location": "/clients/recorder/#recorder", 
            "text": "The  OwnTracks Recorder  is a lightweight program for storing and accessing location data published via MQTT by the OwnTracks apps. It is a compiled program which is easily to install and operate even on low-end hardware, and it doesn't require external an external database.  Docker  We have an  experimental Docker image  which you can use to launch the Recorder and its associated  Mosquitto  broker. The image expects a volume which you mount into it into which it will write persistent data. Furthermore, you pass environment variables into the container at first launch with which TLS certificates are created with subject (and subjAltNames) according to your preference.    As an example, let's assume the host on which the Docker container will run has two IP addresses,  192.168.1.82  and  10.0.1.83 . We will also assume that you want the MQTT port on the host to be  11883  and its TLS port to be  18883 . Let's further assume that one of these addresses is DNS accessible as  ds415.ww.mens.de  and the other as  mqtt.ww.mens.de . We want the TLS certificates for the container's Mosquitto broke to contain subjAltNames for these, so we will proceed as follows:   Create a directory which will be mounted into the container for persistent data:  mkdir /var/owntracks , say.  Launch the Docker container with a script such as this one   #!/bin/sh\n\ndocker run -v /var/owntracks:/owntracks -p 11883:1883 -p 18883:8883 -p 8083:8083 \\\n    --name owntracks-recorder\n    --hostname ds415.ww.mens.de \\\n    -e MQTTHOSTNAME= ds415.ww.mens.de  \\\n    -e IPLIST= 192.168.1.1 192.168.1.82  \\\n    -e HOSTLIST= mqtt.ww.mens.de ds415.ww.mens.de  \\\n    owntracks/recorderd  That should download the Docker image (if necessary) and launch a container accordingly. At first run, the TLS certificates are created in the  /owntracks  volume (which was mounted onto  /var/owntracks  on the host). The host's directory will also contain a  mosquitto/  directory which Mosquitto's configuration file, and the Recorder will use  /owntracks/recorder/  as its persistent storage.  The above script will surface the port numbers as follows:   MQTT will be on 11883  MQTT over TLS on 18883  and the Recorder's Web interface on 8083   You can assign these as you wish. Recall, that if you use our example, your OwnTracks apps will also have to access 18883 over TLS (instead of the default 8883 over TLS).  Exploring  If you want to see what's going on within the container, try launching an MQTT subscriber: first obtain the container's ID:  docker ps\nCONTAINER ID        IMAGE                   ...\n5c8800a4ab78        owntracks/recorderd     ...  Then, say, point  mosquitto_sub  to the broker from within the container:  docker exec -ti 5c8800a4ab78  mosquitto_sub -d -v -t '#'  Synology  A number of Synology devices with newer DSM support Docker; please refer to the original documentation to determine if yours has Docker support. If it does,  this page  describes how to use Docker. Once you've installed the package, you can proceed to download the Recorder image (search for  owntracks-recorder ; the image you want is called  owntracks-recorderd  with a trailing  d  on it) and launch a container. (This was tested on DSM 5.2.)  Launch container creation with the wizard, and give the container a name, e.g.  owntracks-recorder .   Leave the settings in Step 2 as they are.   Add the TCP ports for MQTT (plain), MQTT (over TLS), and the Recorder's HTTP interface.   In the  Volume  tab, add a host folder which will be mounted into the container. Here we've chosen  /home/jpm/owntracks  which we first created with DSM's file manager.   In the  Environment  tab add the variables which will be exported into the container. Note that  IPLIST  and  HOSTLIST  (both of which are optional) take a space-separated list of values.   Check everything and press  Apply  to have the container created.   The container can then be launched by pressing the \"on\" switch.   The Docker container log will show console output.   The Recorder running on the Synology DiskStation will be accessible via the host port numbers you configured (see above for more information).", 
            "title": "Recorder"
        }, 
        {
            "location": "/privacy/", 
            "text": "It's your data!\n\n\nYour data should be yours. OwnTracks does all it can to ensure that,\nand you decide where you store your data, how to process it, and for\nhow long you store it (if at all).\n\n\nHowever, be advised, that if you're very concerned about privacy,\nyou probably shouldn't be using a smartphone at all. OwnTracks uses\nyour smartphone's location services to determine where it is. While\nyou decide whether you want to enable or disable this feature (check\nyour phone's documentation), there is no guarantee that the APIs used\nby OwnTracks won't submit your data to the vendor's servers.\n\n\nFor example, it's quite possible that Apple or Google keep requests\nused for reverse geo-coding your location; there is pretty much\nnothing OwnTracks can do to avoid this.\n\n\nAs one of the developers writes:\n\n\n\n\nWe could, with great sacrifices to code complexity, battery efficiency and\nperformance code around all native services offered by the platform in order\nto use third party maps and geo coders. In that case Google might not receive\nyour geocoder requests but another third party that sells it. We could also\nwork around the Play Services by handling all the location acquiring the old\nway by querying the GPS/WIFI/Cell positioning ourselves.  I however doubt\nthat these information isn't sent to Google in that case too. The thing is,\nif you don't want Google or Apple to collect your position you have to\ndisable location services in which case you don't have to bother installing\nthe app anyway.\n\n\n\n\nIt's your choice.\n\n\nPrivacy Policy\n\n\nWebsite Visitors\n\n\nLike most website operators, OwnTracks collects non-personally-identifying information of the sort that web browsers and servers typically make available, such as the browser type, language preference, referring site, and the date and time of each visitor request. OwnTracks' purpose in collecting non-personally identifying information is to better understand how OwnTracks' visitors use its website. From time to time, OwnTracks may release non-personally-identifying information in the aggregate, e.g., by publishing a report on trends in the usage of its website.\n\n\nOwnTracks also collects potentially personally-identifying information like Internet Protocol (IP) addresses for logged in users and for users leaving comments on OwnTracks' Web sites. OwnTracks only discloses logged in user and commenter IP addresses under the same circumstances that it uses and discloses personally-identifying information as described below.\n\n\nGathering of Personally-Identifying Information\n\n\nCertain visitors to OwnTracks' websites and servers choose to interact with OwnTracks in\nways that require OwnTracks to gather personally-identifying information. The\namount and type of information that OwnTracks gathers depends on the nature of\nthe interaction. For example, we ask visitors who sign up for an account at\n\nHosted\n to provide a username and email address. Those who engage in\ntransactions with OwnTracks\nare asked to provide additional information,\nincluding as necessary the personal and financial information required to\nprocess those transactions. In each case, OwnTracks collects such information\nonly insofar as is necessary or appropriate to fulfill the purpose of the\nvisitor\u2019s interaction with OwnTracks. OwnTracks does not disclose\npersonally-identifying information other than as described below. And visitors\ncan always refuse to supply personally-identifying information, with the caveat\nthat it may prevent them from engaging in certain website-related activities.\n\n\nOwnTracks collects personally-identifying information in the form of location\nreports made by OwnTracks' apps which use OwnTracks servers. This information\nmay be stored in order to make it available to OwnTracks' users.\n\n\nAggregated Statistics\n\n\nOwnTracks may collect statistics about the behavior of visitors to its\nwebsites. \nOwnTracks may display this information publicly or provide it to others.\nHowever, OwnTracks does not disclose personally-identifying information other\nthan as described below.\n\n\nProtection of Certain Personally-Identifying Information\n\n\nOwnTracks discloses potentially personally-identifying and\npersonally-identifying information only to those of its employees, contractors\nand affiliated organizations that (i) need to know that information in order to\nprocess it on OwnTracks\u2019s behalf or to provide services available at\nOwnTracks\u2019s websites, and (ii) that have agreed not to disclose it to others.\nSome of those employees, contractors and affiliated organizations may be\nlocated outside of your home country; by using OwnTracks\u2019s websites and servers, you\nconsent to the transfer of such information to them. OwnTracks will not rent or\nsell potentially personally-identifying and personally-identifying information\nto anyone. Other than to its employees, contractors and affiliated\norganizations, as described above, OwnTracks discloses potentially\npersonally-identifying and personally-identifying information only in response\nto a subpoena, court order or other governmental request, or when OwnTracks\nbelieves in good faith that disclosure is reasonably necessary to protect the\nproperty or rights of OwnTracks, third parties or the public at large. If you\nare a registered user of an OwnTracks website or service and have supplied your email\naddress, OwnTracks may occasionally send you an email to tell you about new\nfeatures, solicit your feedback, or just keep you up to date with what\u2019s going\non with OwnTracks and our products. We primarily use our various product blogs\nto communicate this type of information, so we expect to keep this type of\nemail to a minimum. If you send us a request (for example via a support email\nor via one of our feedback mechanisms), we reserve the right to publish it in\norder to help us clarify or respond to your request or to help us support other\nusers. OwnTracks takes all measures reasonably necessary to protect against the\nunauthorized access, use, alteration or destruction of potentially\npersonally-identifying and personally-identifying information.\n\n\nCookies\n\n\nA cookie is a string of information that a website stores on a visitor\u2019s computer, and that the visitor\u2019s browser provides to the website each time the visitor returns. OwnTracks uses cookies to help OwnTracks identify and track visitors, their usage of OwnTracks website, and their website access preferences. OwnTracks visitors who do not wish to have cookies placed on their computers should set their browsers to refuse cookies before using OwnTracks\u2019s websites, with the drawback that certain features of OwnTracks\u2019s websites may not function properly without the aid of cookies.\n\n\nBusiness Transfers\n\n\nIf OwnTracks, or substantially all of its assets, were acquired, or in the unlikely event that OwnTracks goes out of business or enters bankruptcy, user information would be one of the assets that is transferred or acquired by a third party. You acknowledge that such transfers may occur, and that any acquirer of OwnTracks may continue to use your personal information as set forth in this policy.\n\n\nAds\n\n\nAds appearing on any of our websites may be delivered to users by advertising partners, who may set cookies. These cookies allow the ad server to recognize your computer each time they send you an online advertisement to compile information about you or others who use your computer. This information allows ad networks to, among other things, deliver targeted advertisements that they believe will be of most interest to you. This Privacy Policy covers the use of cookies by OwnTracks and does not cover the use of cookies by any advertisers.\n\n\nPrivacy Policy Changes\n\n\nAlthough most changes are likely to be minor, OwnTracks may change its Privacy\nPolicy from time to time, and in OwnTracks\u2019s sole discretion. OwnTracks\nencourages visitors to frequently check this page for any changes to its\nPrivacy Policy. Your continued use of this site\nafter any change in this Privacy Policy will constitute your acceptance of such\nchange.\n\n\nThis privacy policy was adapted from \nAutomattic's Privacy Policy\n.", 
            "title": "Privacy"
        }, 
        {
            "location": "/privacy/#privacy-policy", 
            "text": "Website Visitors  Like most website operators, OwnTracks collects non-personally-identifying information of the sort that web browsers and servers typically make available, such as the browser type, language preference, referring site, and the date and time of each visitor request. OwnTracks' purpose in collecting non-personally identifying information is to better understand how OwnTracks' visitors use its website. From time to time, OwnTracks may release non-personally-identifying information in the aggregate, e.g., by publishing a report on trends in the usage of its website.  OwnTracks also collects potentially personally-identifying information like Internet Protocol (IP) addresses for logged in users and for users leaving comments on OwnTracks' Web sites. OwnTracks only discloses logged in user and commenter IP addresses under the same circumstances that it uses and discloses personally-identifying information as described below.  Gathering of Personally-Identifying Information  Certain visitors to OwnTracks' websites and servers choose to interact with OwnTracks in\nways that require OwnTracks to gather personally-identifying information. The\namount and type of information that OwnTracks gathers depends on the nature of\nthe interaction. For example, we ask visitors who sign up for an account at Hosted  to provide a username and email address. Those who engage in\ntransactions with OwnTracks\nare asked to provide additional information,\nincluding as necessary the personal and financial information required to\nprocess those transactions. In each case, OwnTracks collects such information\nonly insofar as is necessary or appropriate to fulfill the purpose of the\nvisitor\u2019s interaction with OwnTracks. OwnTracks does not disclose\npersonally-identifying information other than as described below. And visitors\ncan always refuse to supply personally-identifying information, with the caveat\nthat it may prevent them from engaging in certain website-related activities.  OwnTracks collects personally-identifying information in the form of location\nreports made by OwnTracks' apps which use OwnTracks servers. This information\nmay be stored in order to make it available to OwnTracks' users.  Aggregated Statistics  OwnTracks may collect statistics about the behavior of visitors to its\nwebsites. \nOwnTracks may display this information publicly or provide it to others.\nHowever, OwnTracks does not disclose personally-identifying information other\nthan as described below.  Protection of Certain Personally-Identifying Information  OwnTracks discloses potentially personally-identifying and\npersonally-identifying information only to those of its employees, contractors\nand affiliated organizations that (i) need to know that information in order to\nprocess it on OwnTracks\u2019s behalf or to provide services available at\nOwnTracks\u2019s websites, and (ii) that have agreed not to disclose it to others.\nSome of those employees, contractors and affiliated organizations may be\nlocated outside of your home country; by using OwnTracks\u2019s websites and servers, you\nconsent to the transfer of such information to them. OwnTracks will not rent or\nsell potentially personally-identifying and personally-identifying information\nto anyone. Other than to its employees, contractors and affiliated\norganizations, as described above, OwnTracks discloses potentially\npersonally-identifying and personally-identifying information only in response\nto a subpoena, court order or other governmental request, or when OwnTracks\nbelieves in good faith that disclosure is reasonably necessary to protect the\nproperty or rights of OwnTracks, third parties or the public at large. If you\nare a registered user of an OwnTracks website or service and have supplied your email\naddress, OwnTracks may occasionally send you an email to tell you about new\nfeatures, solicit your feedback, or just keep you up to date with what\u2019s going\non with OwnTracks and our products. We primarily use our various product blogs\nto communicate this type of information, so we expect to keep this type of\nemail to a minimum. If you send us a request (for example via a support email\nor via one of our feedback mechanisms), we reserve the right to publish it in\norder to help us clarify or respond to your request or to help us support other\nusers. OwnTracks takes all measures reasonably necessary to protect against the\nunauthorized access, use, alteration or destruction of potentially\npersonally-identifying and personally-identifying information.  Cookies  A cookie is a string of information that a website stores on a visitor\u2019s computer, and that the visitor\u2019s browser provides to the website each time the visitor returns. OwnTracks uses cookies to help OwnTracks identify and track visitors, their usage of OwnTracks website, and their website access preferences. OwnTracks visitors who do not wish to have cookies placed on their computers should set their browsers to refuse cookies before using OwnTracks\u2019s websites, with the drawback that certain features of OwnTracks\u2019s websites may not function properly without the aid of cookies.  Business Transfers  If OwnTracks, or substantially all of its assets, were acquired, or in the unlikely event that OwnTracks goes out of business or enters bankruptcy, user information would be one of the assets that is transferred or acquired by a third party. You acknowledge that such transfers may occur, and that any acquirer of OwnTracks may continue to use your personal information as set forth in this policy.  Ads  Ads appearing on any of our websites may be delivered to users by advertising partners, who may set cookies. These cookies allow the ad server to recognize your computer each time they send you an online advertisement to compile information about you or others who use your computer. This information allows ad networks to, among other things, deliver targeted advertisements that they believe will be of most interest to you. This Privacy Policy covers the use of cookies by OwnTracks and does not cover the use of cookies by any advertisers.  Privacy Policy Changes  Although most changes are likely to be minor, OwnTracks may change its Privacy\nPolicy from time to time, and in OwnTracks\u2019s sole discretion. OwnTracks\nencourages visitors to frequently check this page for any changes to its\nPrivacy Policy. Your continued use of this site\nafter any change in this Privacy Policy will constitute your acceptance of such\nchange.  This privacy policy was adapted from  Automattic's Privacy Policy .", 
            "title": "Privacy Policy"
        }, 
        {
            "location": "/people/", 
            "text": "People\n\n\nAlexander Rust\n created the first proof-of-concept for the Android app which started out under the very geeky name \nMQTTitude\n, a term coined from our use of MQTT and the then obsolete Latitude app, which Google took out of service in 2013.\n\n\nOnly a few days later, \nChristoph Krey\n implemented a rough prototype on iOS, and didn't stop implementing new and exciting features on the iOS version of OwnTracks until his coffee machine burned out.\n\n\nJan-Piet Mens\n had the \noriginal crazy idea of combining location updates and MQTT\n and tries to keep abreast on what Christoph and Alexander do. As \nBen\n once said: \"JP just sits back and cracks the whips\". So these three could be called the \"core team\", if we were in the market for cool-sounding titles.\n\n\nIncidentally, \nBen Jones\n, who works closely with us, has given us loads of invaluable feedback and he's the chap who created the \nmqttitude binding\n for the wonderful \nopenHAB\n Home Automation project.\n\n\nContributors\n\n\nMany good people have assisted us, be it by testing, by contributing bits of code or documentation, or just by complaining loudly, and we want to acknowledge the following contributions. (If you think your name should be on this list, tell us, or forever hold your peace. :-)\n\n\n\n\nBrad Pillatsch\n wrote the initial implementation of PKCS#12 import for Android.\n\n\nbrunkj\n for help in tracking down an address book crash.\n\n\nMatthew Bordignon\n for ideas and help with testing.\n\n\nStefano Costa\n for bug reports.\n\n\nMark Clark\n for bug reports.\n\n\nAdrian Brown originally suggested the \nidea for location-based services\n\n\nfriesenkiwi\n contributed sundry large patches to Android and drove the LOST integration.", 
            "title": "People"
        }, 
        {
            "location": "/people/#people", 
            "text": "Alexander Rust  created the first proof-of-concept for the Android app which started out under the very geeky name  MQTTitude , a term coined from our use of MQTT and the then obsolete Latitude app, which Google took out of service in 2013.  Only a few days later,  Christoph Krey  implemented a rough prototype on iOS, and didn't stop implementing new and exciting features on the iOS version of OwnTracks until his coffee machine burned out.  Jan-Piet Mens  had the  original crazy idea of combining location updates and MQTT  and tries to keep abreast on what Christoph and Alexander do. As  Ben  once said: \"JP just sits back and cracks the whips\". So these three could be called the \"core team\", if we were in the market for cool-sounding titles.  Incidentally,  Ben Jones , who works closely with us, has given us loads of invaluable feedback and he's the chap who created the  mqttitude binding  for the wonderful  openHAB  Home Automation project.", 
            "title": "People"
        }, 
        {
            "location": "/people/#contributors", 
            "text": "Many good people have assisted us, be it by testing, by contributing bits of code or documentation, or just by complaining loudly, and we want to acknowledge the following contributions. (If you think your name should be on this list, tell us, or forever hold your peace. :-)   Brad Pillatsch  wrote the initial implementation of PKCS#12 import for Android.  brunkj  for help in tracking down an address book crash.  Matthew Bordignon  for ideas and help with testing.  Stefano Costa  for bug reports.  Mark Clark  for bug reports.  Adrian Brown originally suggested the  idea for location-based services  friesenkiwi  contributed sundry large patches to Android and drove the LOST integration.", 
            "title": "Contributors"
        }, 
        {
            "location": "/ideas/", 
            "text": "Ideas\n\n\nOver the course of time, we've had people propose a number of ideas for OwnTracks. Some of these we thought excellent, others we thought would maybe sometime be nice to have, and others, well, see for yourself. Be that as it may, this page lists a few of these in the hope that you'll see we know of them and if you dream up something new, that you'll first check wether we've heard of it already.\n\n\n\n\nAllow KML, GPX export. This we do enable in the back-end.\n\n\nPublish \ncharging\n alongside battery level. No.\n\n\nAdd temperature to the JSON payload. No.\n\n\nHave the device track a route; we do this in the back-end.\n\n\n\n\nShort term\n\n\n\n\nStability\n\n\nReliability \n#38\n\n\nBattery consumption \n#68\n\n\nEnsure UI has \nCredits\n with URL to Web site \n#41\n\n\nDisable all location services (unload app) \n#74\n\n\nLWT \n#55\n\n\n\n\nMid-term\n\n\n\n\nAdd \"traffic light\" \n#73\n\n\nAdd live \"info\" pane to Apps \n#47\n\n\nRemote-control \n#71\n\n\nAnnotations.\n\n\nClick on pin\n\n\nEnter text string \n\"Restaurante La Comida; wonderful gambas al ajillo\"\n\n\nPUBlish with full \n_location\n and additional \n\"note\" : \"....\"\n (see \nwaypoints\n below)\n\n\n2013-11-22: @mrose has some interesting things to say about Messages on iOS \n#199\n. In particular, screen real-estate should be better organized.\n\n\n\n\nLong-term\n\n\n\n\nAdd presence. Are my friends in the area?\n\n\nNeeds friends/family on same broker\n\n\nNeeds 'standardized' topic names (maybe with Twitter id in topic?)\n\n\nAdd transportation info (e.g. trains) as friends\n\n\nQueue updates on device (with \ntst\n etc) to be PUBlished upon available connection\n\n\nCorner-pegging \n#94\n\n\nNFC support, \nsuggested by mrizvic\n\n\n\n\nVery-long term, a.k.a. \"Neat ideas\"\n\n\n\n\nPublish incoming phone call (caller-id), \nsubmitted by @bordingnon\n. JPM: Also SMS? Have to force TLS then, at least.\n\n\nRequested in #86: \"app should register a subscriprion (configurable topic) a) if someone sends a text message it should be displayed as popup window b) if someone sends an HTML message it should be opened in a embedded browser\"\n\n\nGeneralized messaging app (see \n#205\n )\n\n\nFind my friends \n#290\n\n\nIndoors edition with iBeacons as requested in \n#296\n\n\n\n\nWaypoints\n\n\nJPM added 2013-11-22: We currently have \"Annotations\" on iOS (see above). I'd like to be able to have an annotation PUBlished to the broker so that m2s (or other processors) can pick it up. I propose the following payload: \n{ \"_type\": \"_waypoint\", \"tst\":\"xx\", \"lat\":\"\ncurrent\n\", \"lon\":\ncurrent\n\", \"text\":\"utf-8 text\" }\n\n\nRemote control\n\n\n\n\nMaybe add remote-control for enabling \"move-mode\" on iOS (https://github.com/binarybucks/mqttitude/issues/139)\n\n\nInteresting idea in \n#227\n: device can change mode (e.g. \nsilent\n, \nairplane mode\n, etc.) depending on location and by listening to a remote-control topic with which it is instructed to switch modes.\n\n\nAdd remote-control for setting waypoints via MQTT", 
            "title": "Ideas"
        }, 
        {
            "location": "/ideas/#ideas", 
            "text": "Over the course of time, we've had people propose a number of ideas for OwnTracks. Some of these we thought excellent, others we thought would maybe sometime be nice to have, and others, well, see for yourself. Be that as it may, this page lists a few of these in the hope that you'll see we know of them and if you dream up something new, that you'll first check wether we've heard of it already.   Allow KML, GPX export. This we do enable in the back-end.  Publish  charging  alongside battery level. No.  Add temperature to the JSON payload. No.  Have the device track a route; we do this in the back-end.", 
            "title": "Ideas"
        }, 
        {
            "location": "/ideas/#short-term", 
            "text": "Stability  Reliability  #38  Battery consumption  #68  Ensure UI has  Credits  with URL to Web site  #41  Disable all location services (unload app)  #74  LWT  #55", 
            "title": "Short term"
        }, 
        {
            "location": "/ideas/#mid-term", 
            "text": "Add \"traffic light\"  #73  Add live \"info\" pane to Apps  #47  Remote-control  #71  Annotations.  Click on pin  Enter text string  \"Restaurante La Comida; wonderful gambas al ajillo\"  PUBlish with full  _location  and additional  \"note\" : \"....\"  (see  waypoints  below)  2013-11-22: @mrose has some interesting things to say about Messages on iOS  #199 . In particular, screen real-estate should be better organized.", 
            "title": "Mid-term"
        }, 
        {
            "location": "/ideas/#long-term", 
            "text": "Add presence. Are my friends in the area?  Needs friends/family on same broker  Needs 'standardized' topic names (maybe with Twitter id in topic?)  Add transportation info (e.g. trains) as friends  Queue updates on device (with  tst  etc) to be PUBlished upon available connection  Corner-pegging  #94  NFC support,  suggested by mrizvic", 
            "title": "Long-term"
        }, 
        {
            "location": "/ideas/#very-long-term-aka-neat-ideas", 
            "text": "Publish incoming phone call (caller-id),  submitted by @bordingnon . JPM: Also SMS? Have to force TLS then, at least.  Requested in #86: \"app should register a subscriprion (configurable topic) a) if someone sends a text message it should be displayed as popup window b) if someone sends an HTML message it should be opened in a embedded browser\"  Generalized messaging app (see  #205  )  Find my friends  #290  Indoors edition with iBeacons as requested in  #296   Waypoints  JPM added 2013-11-22: We currently have \"Annotations\" on iOS (see above). I'd like to be able to have an annotation PUBlished to the broker so that m2s (or other processors) can pick it up. I propose the following payload:  { \"_type\": \"_waypoint\", \"tst\":\"xx\", \"lat\":\" current \", \"lon\": current \", \"text\":\"utf-8 text\" }  Remote control   Maybe add remote-control for enabling \"move-mode\" on iOS (https://github.com/binarybucks/mqttitude/issues/139)  Interesting idea in  #227 : device can change mode (e.g.  silent ,  airplane mode , etc.) depending on location and by listening to a remote-control topic with which it is instructed to switch modes.  Add remote-control for setting waypoints via MQTT", 
            "title": "Very-long term, a.k.a. \"Neat ideas\""
        }, 
        {
            "location": "/faq/", 
            "text": "Answers\n\n\nThis is a list of question we really get asked a lot and some answers to these questions.\n\n\n\n\n\n\nCan I have OwnTracks not publish location for a specific period of time?\n\n\nset to manual\n\n\n\n\n\n\nHow can I restart OwnTracks?\n\n\n\n\n\n\nI've moved, but OwnTracks is not reporting my location\n\n\n\n\n\n\nHow do I enable region monitoring? (Waypoints)\n\n\n\n\n\n\nI'm sure I've moved into (or out of) a region, but OwnTracks isn't reporting that.\n\n\n\n\n\n\nWhy are transition events delayed?\n\n\n\n\n\n\nHow can I increase reporting frequency and does that have any negative impact?\n\n\nbattery, data plan\n\n\n\n\n\n\nI have a question\n\n\nWe love questions. Well, sometimes. :-)\nIf you want to ask us a question or desire feedback from other OwnTracks users, visit us at the \nOwnTracks Community\n.\n\n\n\n\n\n\nHow can I report an issue?\n    If you think you've found a bug, please report it on our respective [android] or [ios] issue tracker on Github.", 
            "title": "Answers"
        }, 
        {
            "location": "/faq/#answers", 
            "text": "This is a list of question we really get asked a lot and some answers to these questions.    Can I have OwnTracks not publish location for a specific period of time?  set to manual    How can I restart OwnTracks?    I've moved, but OwnTracks is not reporting my location    How do I enable region monitoring? (Waypoints)    I'm sure I've moved into (or out of) a region, but OwnTracks isn't reporting that.    Why are transition events delayed?    How can I increase reporting frequency and does that have any negative impact?  battery, data plan    I have a question  We love questions. Well, sometimes. :-)\nIf you want to ask us a question or desire feedback from other OwnTracks users, visit us at the  OwnTracks Community .    How can I report an issue?\n    If you think you've found a bug, please report it on our respective [android] or [ios] issue tracker on Github.", 
            "title": "Answers"
        }, 
        {
            "location": "/press/", 
            "text": "Press\n\n\nEnglish\n\n\n\n\nOwnTracks Poster @ eclipsecon Europe 2015\n\n\nGerman\n\n\n\n\nAnwesenheitserkennung reloaded\n\n\nownTracks \n Mosquitto \u2013 Google Latitude-Clon im Eigenbau\n\n\nLatitude im Eigenbau \u2013 volle Kontrolle\n\n\nopenHAB f\u00fcr mehr Datenschutz in der Heimautomatisierung\n mentions OwnTracks\n\n\nopenHAB 1.4: Offenheit und Datenschutz im Fokus des Smart-Home-Projekts", 
            "title": "Press"
        }, 
        {
            "location": "/press/#press", 
            "text": "", 
            "title": "Press"
        }, 
        {
            "location": "/press/#english", 
            "text": "OwnTracks Poster @ eclipsecon Europe 2015", 
            "title": "English"
        }, 
        {
            "location": "/press/#german", 
            "text": "Anwesenheitserkennung reloaded  ownTracks   Mosquitto \u2013 Google Latitude-Clon im Eigenbau  Latitude im Eigenbau \u2013 volle Kontrolle  openHAB f\u00fcr mehr Datenschutz in der Heimautomatisierung  mentions OwnTracks  openHAB 1.4: Offenheit und Datenschutz im Fokus des Smart-Home-Projekts", 
            "title": "German"
        }
    ]
}